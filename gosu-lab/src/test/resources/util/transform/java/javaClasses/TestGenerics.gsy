package gw.util.transform.java.JavaClasses

uses java.util.*

class TestGenerics<T extends Comparable<T> & CharSequence, B, Q> extends LinkedList<T> implements List<T>, MyGenericPair<T, B> {
    private class FloatCmp<T1 extends Comparable<T1>> implements Comparator<T1> {
        function compare(o1: T1, o2: T1) : int {
            return o1.compareTo(o2)
        }

    }

    class Inner<A, B2>  {
        construct(a: String & Comparable<String>, n: B2, jj: Object) {
        }

    }

    class Builder<S extends T>  {
    }

    construct(a0: Comparable<T> & CharSequence, a1: Object, a2: Comparable<T> & CharSequence, a3: Object) {
    }

    construct() {
    }

    private function innstance() {
        var tmp: TestGenerics<String, String, Integer> = new TestGenerics()
        var tmpNoDiamond = new TestGenerics<String, String, Integer>()
        var tmp2: TestGenerics<Object, Object, Integer> = new TestGenerics<String, String, Integer>()
        var myMap: Map<String, List<String>> = new HashMap()
    }

    function rrrr() {
        var floats: List<Float> = new LinkedList<Float>()
        var nums = new Float[10]
        Arrays.sort<Float>(nums, new FloatCmp<Float>())
        var monster = new Inner<String, String>("132", "321", "888")
        var Hello = new Comparator<String>() {

            override function compare(o1: String, o2: String) : int {
                return 0
            }

            override function equals(obj: Object) : boolean {
                return false
            }

        }

    }

    private static function cmp<J extends Comparable<J>>(a: J, b: J) {
        a.compareTo(b)
    }

    private static function uuu<J extends Comparable<J>, K>(a: K, b: K, c: TestGenerics<K, Object, Object>) {
    }

    override function size() : int {
        return 0
    }

    override property get Empty() : boolean {
        return false
    }

    override function contains(o: Object) : boolean {
        return false
    }

    override function iterator() : Iterator<T> {
        return null
    }

    override function toArray() : Object[] {
        return new Object[0]
    }

    override function toArray<T3>(a: T3[]) : T3[] {
        return null
    }

    override function add(t: T) : boolean {
        return false
    }

    override function remove(o: Object) : boolean {
        return false
    }

    override function containsAll(c: Collection<Object>) : boolean {
        return false
    }

    override function addAll(c: Collection<T>) : boolean {
        return false
    }

    override function addAll(in_0: int, c: Collection<T>) : boolean {
        return false
    }

    override function removeAll(c: Collection<Object>) : boolean {
        return false
    }

    override function retainAll(c: Collection<Object>) : boolean {
        return false
    }

    override function clear() {
    }

    override function get(in_0: int) : T {
        return null
    }

    override function set(in_0: int, element: T) : T {
        return null
    }

    override function add(in_0: int, element: T) {
    }

    override function remove(in_0: int) : T {
        return null
    }

    override function indexOf(o: Object) : int {
        return 0
    }

    override function lastIndexOf(o: Object) : int {
        return 0
    }

    override function listIterator() : ListIterator<T> {
        return null
    }

    override function listIterator(in_0: int) : ListIterator<T> {
        return null
    }

    override function subList(fromIndex: int, toIndex: int) : List<T> {
        return null
    }

}
