<?xml version="1.0"?>
<class>
  <desc/>
  <method name="getSymbol">
    <desc/>
    <return>The symbol mapped to the specified name.</return>
    <param name="name" type="java.lang.CharSequence"/>
  </method>
  <method name="putSymbol">
    <desc>Maps a name to a symbol in the table.</desc>
    <param name="symbol" type="gw.lang.parser.ISymbol"/>
  </method>
  <method name="removeSymbol">
    <desc>Removes a previously mapped symbol.</desc>
    <param name="name" type="java.lang.CharSequence">The name mapped to the symbol to remove.</param>
  </method>
  <method name="getSymbols">
    <desc/>
    <return>A list of currently mapped ISymbols e.g., the values in a hash
        table based implementation.</return>
  </method>
  <method name="getSymbols">
    <desc/>
    <return>A list of currently mapped ISymbols e.g., the values in a hash
        table based implementation.</return>
    <param name="iScopeIndex" type="int">Scopes positioned on the stack at an index greater than
                   this number are not included. Very useful for examining a specific scope
                   e.g., for a debugger. Note an index &lt; 0 indicates that all scopes are
                   included.</param>
    <param name="iPrivateGlobalIndex" type="int"/>
  </method>
  <method name="getScopeCount">
    <desc/>
    <return>The number of scopes on the stack. These include all scopes:
        global, isolated, and local. Useful for recording a specific offset in the
        symbol table e.g., a debugger needs this to jump to a position in a call
        stack.</return>
  </method>
  <method name="getPrivateGlobalScopeCount">
    <desc/>
    <return>The number of scopes on the private global stack. Useful for
        recording a specific offset in the symbol table e.g., a debugger needs
        this to jump to a position in a call stack.</return>
  </method>
  <method name="pushScope">
    <desc>Push a local scope context onto the symbol table.</desc>
    <return>The pushed scope.</return>
  </method>
  <method name="pushScope">
    <desc>Push a local scope context onto the symbol table.</desc>
    <return>The pushed scope.</return>
    <param name="scope" type="gw.lang.parser.IScope">the scope to push</param>
  </method>
  <method name="popScope">
    <desc>Pop a local scope context from the symbol table.
&lt;p/&gt;
See pushScope() for implementation suggestions.</desc>
    <return>The popped scope.</return>
  </method>
  <method name="peekScope">
    <desc/>
    <return>the currently active scope</return>
  </method>
  <method name="pushIsolatedScope">
    <desc>Push a scope that demarcates an activation record. The behavior is nearly
identical to pushScope(), the [big] difference is that activation record
scopes cannot access symbols from other activation record scopes.
&lt;p/&gt;
Use popScope() to pop a scope pushed via this method.</desc>
    <return>The isolated scope (aka the activation record).</return>
    <param name="activationCtx" type="gw.lang.parser.IActivationContext">The context for the activation record.</param>
  </method>
  <method name="pushPrivateGlobalScope">
    <desc>Push a global scope you specify onto the private global scope space. Useful
for handling private global scopes for libraries, namespaces, etc. As this
functionality is primarily for Gosu runtime, you'll likely never need to
call this.
&lt;p/&gt;
If you need to push a scope with restricted visibility, consider calling
&lt;code&gt;pushIsolatedScope()&lt;/code&gt; instead.</desc>
    <param name="scope" type="gw.lang.parser.IScope"/>
  </method>
  <method name="popGlobalScope">
    <desc>Pops a global scope previously pushed via &lt;code&gt;pushGlobalScope( IScope )&lt;/code&gt;
or &lt;code&gt;pushPrivateGlobalScope( IScope )&lt;/code&gt;.
&lt;p/&gt;
You probably shouldn't call this method.</desc>
    <param name="scope" type="gw.lang.parser.IScope"/>
  </method>
  <method name="copy">
    <desc>Perform a semi-deep copy of this symbol table. Symbols need not be cloned.</desc>
    <return>A semi-deep copy of this symbol table.</return>
  </method>
  <method name="getThisSymbolFromStackOrMap">
    <desc>Get the 'this' symbol from either the stack or the table.</desc>
  </method>
  <method name="defineCommonSymbols">
    <desc>Define symbols that are considered ubiquitous. There may be none.</desc>
  </method>
  <method name="getTotalSymbolCount">
    <desc/>
    <return>the number of symbols exist in this table.</return>
  </method>
  <method name="isSymbolWithinScope">
    <desc/>
    <return>true if the given symbol is within the given scope</return>
    <param name="sym" type="gw.lang.parser.ISymbol"/>
    <param name="scope" type="gw.lang.parser.IScope"/>
  </method>
  <method name="peekIsolatedScope">
    <desc/>
    <return>the top-most isolated scope</return>
  </method>
</class>