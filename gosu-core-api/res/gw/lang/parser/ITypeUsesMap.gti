<?xml version="1.0"?>
<class>
  <desc/>
  <method name="getTypeUses">
    <desc>Returns the set of strings representing the types that are currently
used by this parser. The set of types includes both those declared in
#uses statements and those set via setDefaultTypeUses.</desc>
  </method>
  <method name="getNamespaces">
    <desc>Returns the set of strings representing the namespaces that are currently
used by this parser.</desc>
  </method>
  <method name="addToTypeUses">
    <desc>Adds a type to the current set of types. Can be a complete type or a
wildcard namespace e.g., java.util.HashMap and java.util.* are both legal.</desc>
    <param name="strType" type="java.lang.String"/>
  </method>
  <method name="addToTypeUses">
    <desc>Adds a type to the current set of types. Can be a complete type or a
wildcard namespace e.g., java.util.HashMap and java.util.* are both legal.</desc>
    <param name="usesStmt" type="gw.lang.parser.statements.IUsesStatement"/>
  </method>
  <method name="getUsesStatements">
    <desc>Return the set of uses-statements that participate in this map. Note these
are the uses-statements compiled from source.</desc>
  </method>
  <method name="addToDefaultTypeUses">
    <desc>Add the specified type to the set of default types.  NOTE:  The type is always treated as a package.  If it ends in .* then it will be stripped</desc>
    <param name="strQualifiedType" type="java.lang.String"/>
  </method>
  <method name="resolveType">
    <desc>Resolve the type of a relative name via the type uses. if the relative type
matches uses-type, resolves the type as such. If the type matches, but does
not resove, throws an exception, otherwise returns null if there is no
match.</desc>
    <param name="strRelativeName" type="java.lang.String"/>
  </method>
  <method name="resolveRelativeNamespaceInAllNamespaces">
    <desc/>
    <return>The absolute namespace type for the relative name or null if not found.</return>
    <param name="strRelativeName" type="java.lang.String">A relative path name. E.g., "lang" is a relative package name of "java.lang"</param>
  </method>
  <method name="clearNonDefaultTypeUses">
    <desc>Clears all types not in the default set of types;</desc>
  </method>
  <method name="copy">
    <desc>Returns a shallow copy of this map.</desc>
  </method>
  <method name="copyLocalScope">
    <desc>Copies the type uses map but alias the global map from this.</desc>
    <return>a copy of this type uses map.</return>
  </method>
  <method name="lock">
    <desc>Locks this ITypeUsesMap so that it cannot be mutated in the future</desc>
    <return>this ITypeUsesMap, so that this method can be used in a builder-like manner.</return>
  </method>
  <method name="containsType">
    <desc/>
    <return>if a type wit the given name can be resolved via this type uses map.</return>
    <param name="qualifiedName" type="java.lang.String"/>
  </method>
</class>