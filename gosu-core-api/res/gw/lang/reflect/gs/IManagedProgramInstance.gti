<?xml version="1.0"?>
<class>
  <desc>The intention for this interface is to provide a lifecycle API for a user-defined base class of a program.
The use-case is as follows:

&lt;pre&gt;
MyProgram.gsp
-------------

extends MyBase

doSomething()


MyBase.gs
---------

package abc

class MyBase implements IManagedProgramInstance {
  override function beforeExecution() : boolean {
    // determine if the program should execute
  }
  override function afterExecution( t: Throwable ) {
    // handle the Throwable, do what you need to cleanup
  }
}
&lt;/pre&gt;

Internally the Gosu compiler generates the evaluate() method like so:
&lt;pre&gt;
  function evaluate( map: IExternalSymbolMap ) : Object {
    var $failure : Throwable
    if( this.beforeExecution() ) {
      try {
        [method-body] // returns result
      }
      catch( $catchFailure: Throwable ) {
        $failure = $catchFailure
      }
      finally {
        this.afterExecution( $failure )
      }
    }
    return null // only get here if exception not rethrown in afterExecution()
  }
&lt;/pre&gt;</desc>
  <method name="beforeExecution">
    <desc>Called before IProgramInstance#evaluate().</desc>
    <return>false if the program should not be executed i.e., don't call IProgramInstance#evaluate(),
true if the program should execute normally.</return>
  </method>
  <method name="afterExecution">
    <desc>Called after IProgramInstance#evaluate().</desc>
    <param name="error" type="java.lang.Throwable">The exception or error if IProgramInstance#evaluate() terminates abnormally, otherwise null.</param>
  </method>
</class>