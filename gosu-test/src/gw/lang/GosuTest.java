/* * Copyright 2014 Guidewire Software, Inc. */package gw.lang;import gw.lang.launch.IArgInfo;import gw.lang.launch.Launch;import gw.lang.mode.IGosuMode;import gw.lang.shell.InteractiveMode;import gw.test.TestClass;import gw.util.StreamUtil;import org.fest.assertions.Assertions;import java.io.File;import java.net.URISyntaxException;import java.util.Arrays;import java.util.List;/** * Tests gw.lang.Gosu * * @author dgreen */public class GosuTest extends TestClass {  public void testEmptyCommandLine() throws Exception  {    IArgInfo argInfo = Launch.factory().createArgInfo();    Assertions.assertThat(getModeAndProcessUnknownArgs(argInfo)).isInstanceOf(InteractiveMode.class);    assertNull(argInfo.getErrorMessage());  }  public void testInteractiveMode() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("-i");    Assertions.assertThat(getModeAndProcessUnknownArgs(argInfo)).isInstanceOf(InteractiveMode.class);    assertNull(argInfo.getErrorMessage());  }  public void testShowHelp() throws Exception {    String[] helpOptions = { "-h", "-help" };    for (String helpOption : helpOptions) {      IArgInfo argInfo = Launch.factory().createArgInfo(helpOption);      Assertions.assertThat(getModeAndProcessUnknownArgs(argInfo)).isInstanceOf(Gosu.HelpMode.class);      assertNull(argInfo.getErrorMessage());    }  }  public void testBadOption() throws Exception {    String[] badOptions = { "-z", "-@", "-asdf", "--asdf" };    for (String badOption : badOptions) {      IArgInfo argInfo = Launch.factory().createArgInfo(badOption);      getModeAndProcessUnknownArgs(argInfo);      assertNotNull( argInfo.getErrorMessage() );      assertEquals( "Unknown option: " + badOption, argInfo.getErrorMessage() );    }  }  public void testLaunchProgram() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("foo.gsp");    Assertions.assertThat(getModeAndProcessUnknownArgs(argInfo)).isInstanceOf(Gosu.ExecuteMode.class);    assertTrue(argInfo.getProgramSource().getFile().getPath().endsWith(File.separator + "foo.gsp"));    assertNull(argInfo.getErrorMessage());  }  public void testLaunchProgramWithArgs() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("foo.gsp", "bar", "baz");    IGosuMode mode = getModeAndProcessUnknownArgs(argInfo);    Assertions.assertThat(mode).isInstanceOf(Gosu.ExecuteMode.class);    assertTrue(argInfo.getProgramSource().getFile().getPath().endsWith(File.separator + "foo.gsp"));    assertEquals(Arrays.asList("bar", "baz"), ((Gosu.ExecuteMode)mode).getProgramArgs());    assertNull(argInfo.getErrorMessage());  }  public void testLaunchProgramNameThatContainsSpaces() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("foo.gsp bar", "baz");    IGosuMode mode = getModeAndProcessUnknownArgs(argInfo);    Assertions.assertThat(mode).isInstanceOf(Gosu.ExecuteMode.class);    assertTrue(argInfo.getProgramSource().getFile().getPath().endsWith(File.separator + "foo.gsp bar"));    assertEquals( Arrays.asList( "baz" ), ((Gosu.ExecuteMode)mode).getProgramArgs() );    assertNull(argInfo.getErrorMessage());  }  public void testProgramParamsAreNotConfusedWithGosuParams() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("foo.gsp", "bar", "baz", "-i");    IGosuMode mode = getModeAndProcessUnknownArgs(argInfo);    Assertions.assertThat(mode).isInstanceOf(Gosu.ExecuteMode.class);    assertTrue(argInfo.getProgramSource().getFile().getPath().endsWith(File.separator + "foo.gsp"));    assertEquals( Arrays.asList( "bar", "baz", "-i" ), ((Gosu.ExecuteMode)mode).getProgramArgs() );    assertNull(argInfo.getErrorMessage());  }  public void testProgramWithFqn() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("-fqn", "bar.baz", "foo.gsp", "bar", "baz", "-i");    IGosuMode mode = getModeAndProcessUnknownArgs(argInfo);    Assertions.assertThat(mode).isInstanceOf(Gosu.ExecuteMode.class);    assertEquals("bar.baz", ((Gosu.ExecuteMode)mode).getFqn());    assertNull(argInfo.getErrorMessage());  }  public void testDoubleDashStopsArgumentInterpretation() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("--", "-i", "foo.gsp", "bar", "baz");    IGosuMode mode = getModeAndProcessUnknownArgs(argInfo);    Assertions.assertThat(mode).isInstanceOf(Gosu.ExecuteMode.class);    assertTrue(argInfo.getProgramSource().getFile().getPath().endsWith(File.separator + "-i"));    assertEquals( Arrays.asList( "foo.gsp", "bar", "baz" ), ((Gosu.ExecuteMode)mode).getProgramArgs() );    assertNull(argInfo.getErrorMessage());  }  public void testSimpleExpressionAsSingleParameter() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo( "-e", "5 + 5" );    IGosuMode mode = getModeAndProcessUnknownArgs(argInfo);    Assertions.assertThat(mode).isInstanceOf(Gosu.ExecuteMode.class);    assertEquals("StringProgramSource", argInfo.getProgramSource().getClass().getSimpleName());    String content = StreamUtil.getContent(StreamUtil.getInputStreamReader(argInfo.getProgramSource().openInputStream()));    assertEquals( "5 + 5", content );    assertNull(argInfo.getErrorMessage());  }  public void testRunProgramNamedHyphen() throws Exception {    IArgInfo argInfo = Launch.factory().createArgInfo("--", "-", "foo bar", "baz");    Assertions.assertThat(getModeAndProcessUnknownArgs(argInfo)).isInstanceOf(Gosu.ExecuteMode.class);    assertTrue(argInfo.getProgramSource().getFile().getPath().endsWith(File.separator + "-"));    assertEquals( Arrays.asList( "foo bar", "baz" ), argInfo.getArgsList() );    assertNull(argInfo.getErrorMessage());  }  public void testClasspathDerivationIsPlausible() throws URISyntaxException  {    List<File> files = Gosu.deriveClasspathFrom( this.getClass() );    assertFalse( files.isEmpty() );    assertTrue( files.contains( new File( this.getClass().getProtectionDomain().getCodeSource().getLocation().toURI() ) ) );  }  private IGosuMode getModeAndProcessUnknownArgs(IArgInfo argInfo) {    IGosuMode mode = Gosu.getMode(argInfo);    argInfo.processUnknownArgs();    return mode;  }}