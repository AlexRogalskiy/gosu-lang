package gw.spec.core.expressions.arithmetic.multiplication
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Multiplication_FloatTest extends ArithmeticTestBase {

  function testFloatPByteMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * p_byte(0))
    assertEquals(b_float(0.0), b_float(0.0) * p_byte(1))
    assertEquals(b_float(-0.0), b_float(0.0) * p_byte(-1))
    assertEquals(b_float(0.0), b_float(0.0) * p_byte(23))
    assertEquals(b_float(-0.0), b_float(0.0) * p_byte(-32))
    assertEquals(b_float(0.0), b_float(0.0) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * p_byte(0))
    assertEquals(b_float(1.0), b_float(1.0) * p_byte(1))
    assertEquals(b_float(-1.0), b_float(1.0) * p_byte(-1))
    assertEquals(b_float(23.0), b_float(1.0) * p_byte(23))
    assertEquals(b_float(-32.0), b_float(1.0) * p_byte(-32))
    assertEquals(b_float(127.0), b_float(1.0) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-128.0), b_float(1.0) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * p_byte(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_byte(1))
    assertEquals(b_float(1.0), b_float(-1.0) * p_byte(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * p_byte(23))
    assertEquals(b_float(32.0), b_float(-1.0) * p_byte(-32))
    assertEquals(b_float(-127.0), b_float(-1.0) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(128.0), b_float(-1.0) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * p_byte(0))
    assertEquals(b_float(23.0), b_float(23.0) * p_byte(1))
    assertEquals(b_float(-23.0), b_float(23.0) * p_byte(-1))
    assertEquals(b_float(529.0), b_float(23.0) * p_byte(23))
    assertEquals(b_float(-736.0), b_float(23.0) * p_byte(-32))
    assertEquals(b_float(2921.0), b_float(23.0) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-2944.0), b_float(23.0) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * p_byte(0))
    assertEquals(b_float(23.123), b_float(23.123) * p_byte(1))
    assertEquals(b_float(-23.123), b_float(23.123) * p_byte(-1))
    assertEquals(b_float(531.829), b_float(23.123) * p_byte(23))
    assertEquals(b_float(-739.936), b_float(23.123) * p_byte(-32))
    assertEquals(b_float(2936.6208), b_float(23.123) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-2959.744), b_float(23.123) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * p_byte(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_byte(1))
    assertEquals(b_float(32.0), b_float(-32.0) * p_byte(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * p_byte(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * p_byte(-32))
    assertEquals(b_float(-4064.0), b_float(-32.0) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(4096.0), b_float(-32.0) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * p_byte(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_byte(1))
    assertEquals(b_float(32.456), b_float(-32.456) * p_byte(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * p_byte(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * p_byte(-32))
    assertEquals(b_float(-4121.912), b_float(-32.456) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(4154.368), b_float(-32.456) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_byte(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_byte(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * p_byte(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_byte(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * p_byte(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_byte(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_byte(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_byte(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_byte(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * p_byte(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_byte(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * p_byte(-32))
    assertEquals(b_float(Float.parseFloat("1.78E-43")), b_float(Float.MIN_VALUE) * p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.794E-43")), b_float(Float.MIN_VALUE) * p_byte(Byte.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * p_byte(0)))
  }

  function testFloatByteMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * b_byte(0))
    assertEquals(b_float(0.0), b_float(0.0) * p_byte(1))
    assertEquals(b_float(-0.0), b_float(0.0) * p_byte(-1))
    assertEquals(b_float(0.0), b_float(0.0) * b_byte(23))
    assertEquals(b_float(-0.0), b_float(0.0) * b_byte(-32))
    assertEquals(b_float(0.0), b_float(0.0) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * b_byte(0))
    assertEquals(b_float(1.0), b_float(1.0) * p_byte(1))
    assertEquals(b_float(-1.0), b_float(1.0) * p_byte(-1))
    assertEquals(b_float(23.0), b_float(1.0) * b_byte(23))
    assertEquals(b_float(-32.0), b_float(1.0) * b_byte(-32))
    assertEquals(b_float(127.0), b_float(1.0) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-128.0), b_float(1.0) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * b_byte(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_byte(1))
    assertEquals(b_float(1.0), b_float(-1.0) * p_byte(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * b_byte(23))
    assertEquals(b_float(32.0), b_float(-1.0) * b_byte(-32))
    assertEquals(b_float(-127.0), b_float(-1.0) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(128.0), b_float(-1.0) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * b_byte(0))
    assertEquals(b_float(23.0), b_float(23.0) * p_byte(1))
    assertEquals(b_float(-23.0), b_float(23.0) * p_byte(-1))
    assertEquals(b_float(529.0), b_float(23.0) * b_byte(23))
    assertEquals(b_float(-736.0), b_float(23.0) * b_byte(-32))
    assertEquals(b_float(2921.0), b_float(23.0) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-2944.0), b_float(23.0) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * b_byte(0))
    assertEquals(b_float(23.123), b_float(23.123) * p_byte(1))
    assertEquals(b_float(-23.123), b_float(23.123) * p_byte(-1))
    assertEquals(b_float(531.829), b_float(23.123) * b_byte(23))
    assertEquals(b_float(-739.936), b_float(23.123) * b_byte(-32))
    assertEquals(b_float(2936.6208), b_float(23.123) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-2959.744), b_float(23.123) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * b_byte(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_byte(1))
    assertEquals(b_float(32.0), b_float(-32.0) * p_byte(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * b_byte(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * b_byte(-32))
    assertEquals(b_float(-4064.0), b_float(-32.0) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(4096.0), b_float(-32.0) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * b_byte(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_byte(1))
    assertEquals(b_float(32.456), b_float(-32.456) * p_byte(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * b_byte(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * b_byte(-32))
    assertEquals(b_float(-4121.912), b_float(-32.456) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(4154.368), b_float(-32.456) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_byte(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_byte(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_byte(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_byte(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_byte(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_byte(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_byte(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_byte(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * b_byte(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_byte(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * p_byte(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_byte(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_byte(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_byte(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_byte(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * p_byte(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_byte(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * b_byte(-32))
    assertEquals(b_float(Float.parseFloat("1.78E-43")), b_float(Float.MIN_VALUE) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.794E-43")), b_float(Float.MIN_VALUE) * b_byte(Byte.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * b_byte(0)))
  }

  function testFloatPShortMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * p_short(0))
    assertEquals(b_float(0.0), b_float(0.0) * p_short(1))
    assertEquals(b_float(-0.0), b_float(0.0) * p_short(-1))
    assertEquals(b_float(0.0), b_float(0.0) * p_short(23))
    assertEquals(b_float(-0.0), b_float(0.0) * p_short(-32))
    assertEquals(b_float(0.0), b_float(0.0) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * p_short(0))
    assertEquals(b_float(1.0), b_float(1.0) * p_short(1))
    assertEquals(b_float(-1.0), b_float(1.0) * p_short(-1))
    assertEquals(b_float(23.0), b_float(1.0) * p_short(23))
    assertEquals(b_float(-32.0), b_float(1.0) * p_short(-32))
    assertEquals(b_float(32767.0), b_float(1.0) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(-32768.0), b_float(1.0) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * p_short(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_short(1))
    assertEquals(b_float(1.0), b_float(-1.0) * p_short(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * p_short(23))
    assertEquals(b_float(32.0), b_float(-1.0) * p_short(-32))
    assertEquals(b_float(-32767.0), b_float(-1.0) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(32768.0), b_float(-1.0) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * p_short(0))
    assertEquals(b_float(23.0), b_float(23.0) * p_short(1))
    assertEquals(b_float(-23.0), b_float(23.0) * p_short(-1))
    assertEquals(b_float(529.0), b_float(23.0) * p_short(23))
    assertEquals(b_float(-736.0), b_float(23.0) * p_short(-32))
    assertEquals(b_float(753641.0), b_float(23.0) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(-753664.0), b_float(23.0) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * p_short(0))
    assertEquals(b_float(23.123), b_float(23.123) * p_short(1))
    assertEquals(b_float(-23.123), b_float(23.123) * p_short(-1))
    assertEquals(b_float(531.829), b_float(23.123) * p_short(23))
    assertEquals(b_float(-739.936), b_float(23.123) * p_short(-32))
    assertEquals(b_float(757671.3), b_float(23.123) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(-757694.44), b_float(23.123) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * p_short(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_short(1))
    assertEquals(b_float(32.0), b_float(-32.0) * p_short(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * p_short(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * p_short(-32))
    assertEquals(b_float(-1048544.0), b_float(-32.0) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(1048576.0), b_float(-32.0) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * p_short(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_short(1))
    assertEquals(b_float(32.456), b_float(-32.456) * p_short(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * p_short(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * p_short(-32))
    assertEquals(b_float(-1063485.8), b_float(-32.456) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(1063518.2), b_float(-32.456) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_short(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_short(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_short(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_short(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_short(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_short(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_short(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_short(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_short(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_short(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * p_short(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_short(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * p_short(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_short(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_short(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_short(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_short(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * p_short(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_short(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * p_short(-32))
    assertEquals(b_float(Float.parseFloat("4.5916E-41")), b_float(Float.MIN_VALUE) * p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5918E-41")), b_float(Float.MIN_VALUE) * p_short(Short.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * p_short(0)))
  }

  function testFloatShortMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * b_short(0))
    assertEquals(b_float(0.0), b_float(0.0) * b_short(1))
    assertEquals(b_float(-0.0), b_float(0.0) * b_short(-1))
    assertEquals(b_float(0.0), b_float(0.0) * b_short(23))
    assertEquals(b_float(-0.0), b_float(0.0) * b_short(-32))
    assertEquals(b_float(0.0), b_float(0.0) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * b_short(0))
    assertEquals(b_float(1.0), b_float(1.0) * b_short(1))
    assertEquals(b_float(-1.0), b_float(1.0) * b_short(-1))
    assertEquals(b_float(23.0), b_float(1.0) * b_short(23))
    assertEquals(b_float(-32.0), b_float(1.0) * b_short(-32))
    assertEquals(b_float(32767.0), b_float(1.0) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(-32768.0), b_float(1.0) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * b_short(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * b_short(1))
    assertEquals(b_float(1.0), b_float(-1.0) * b_short(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * b_short(23))
    assertEquals(b_float(32.0), b_float(-1.0) * b_short(-32))
    assertEquals(b_float(-32767.0), b_float(-1.0) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(32768.0), b_float(-1.0) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * b_short(0))
    assertEquals(b_float(23.0), b_float(23.0) * b_short(1))
    assertEquals(b_float(-23.0), b_float(23.0) * b_short(-1))
    assertEquals(b_float(529.0), b_float(23.0) * b_short(23))
    assertEquals(b_float(-736.0), b_float(23.0) * b_short(-32))
    assertEquals(b_float(753641.0), b_float(23.0) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(-753664.0), b_float(23.0) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * b_short(0))
    assertEquals(b_float(23.123), b_float(23.123) * b_short(1))
    assertEquals(b_float(-23.123), b_float(23.123) * b_short(-1))
    assertEquals(b_float(531.829), b_float(23.123) * b_short(23))
    assertEquals(b_float(-739.936), b_float(23.123) * b_short(-32))
    assertEquals(b_float(757671.3), b_float(23.123) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(-757694.44), b_float(23.123) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * b_short(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * b_short(1))
    assertEquals(b_float(32.0), b_float(-32.0) * b_short(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * b_short(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * b_short(-32))
    assertEquals(b_float(-1048544.0), b_float(-32.0) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(1048576.0), b_float(-32.0) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * b_short(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * b_short(1))
    assertEquals(b_float(32.456), b_float(-32.456) * b_short(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * b_short(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * b_short(-32))
    assertEquals(b_float(-1063485.8), b_float(-32.456) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(1063518.2), b_float(-32.456) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_short(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_short(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_short(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_short(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_short(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_short(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_short(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_short(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_short(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_short(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * b_short(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * b_short(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * b_short(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_short(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_short(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_short(Short.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_short(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * b_short(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * b_short(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_short(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * b_short(-32))
    assertEquals(b_float(Float.parseFloat("4.5916E-41")), b_float(Float.MIN_VALUE) * b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5918E-41")), b_float(Float.MIN_VALUE) * b_short(Short.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * b_short(0)))
  }

  function testFloatPCharMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * p_char(0))
    assertEquals(b_float(0.0), b_float(0.0) * p_char(1))
    assertEquals(b_float(0.0), b_float(0.0) * p_char(23))
    assertEquals(b_float(0.0), b_float(0.0) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * p_char(0))
    assertEquals(b_float(1.0), b_float(1.0) * p_char(1))
    assertEquals(b_float(23.0), b_float(1.0) * p_char(23))
    assertEquals(b_float(65535.0), b_float(1.0) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * p_char(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_char(1))
    assertEquals(b_float(-23.0), b_float(-1.0) * p_char(23))
    assertEquals(b_float(-65535.0), b_float(-1.0) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * p_char(0))
    assertEquals(b_float(23.0), b_float(23.0) * p_char(1))
    assertEquals(b_float(529.0), b_float(23.0) * p_char(23))
    assertEquals(b_float(1507305.0), b_float(23.0) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * p_char(0))
    assertEquals(b_float(23.123), b_float(23.123) * p_char(1))
    assertEquals(b_float(531.829), b_float(23.123) * p_char(23))
    assertEquals(b_float(1515365.8), b_float(23.123) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * p_char(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_char(1))
    assertEquals(b_float(-736.0), b_float(-32.0) * p_char(23))
    assertEquals(b_float(-2097120.0), b_float(-32.0) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * p_char(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_char(1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * p_char(23))
    assertEquals(b_float(-2127004.0), b_float(-32.456) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_char(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_char(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_char(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_char(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_char(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_char(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * p_char(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_char(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_char(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_char(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_char(1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_char(23))
    assertEquals(b_float(Float.parseFloat("9.1834E-41")), b_float(Float.MIN_VALUE) * p_char(Character.MAX_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * p_char(0)))
  }

  function testFloatCharacterMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * b_char(0))
    assertEquals(b_float(0.0), b_float(0.0) * b_char(1))
    assertEquals(b_float(0.0), b_float(0.0) * b_char(23))
    assertEquals(b_float(0.0), b_float(0.0) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * b_char(0))
    assertEquals(b_float(1.0), b_float(1.0) * b_char(1))
    assertEquals(b_float(23.0), b_float(1.0) * b_char(23))
    assertEquals(b_float(65535.0), b_float(1.0) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * b_char(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * b_char(1))
    assertEquals(b_float(-23.0), b_float(-1.0) * b_char(23))
    assertEquals(b_float(-65535.0), b_float(-1.0) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * b_char(0))
    assertEquals(b_float(23.0), b_float(23.0) * b_char(1))
    assertEquals(b_float(529.0), b_float(23.0) * b_char(23))
    assertEquals(b_float(1507305.0), b_float(23.0) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * b_char(0))
    assertEquals(b_float(23.123), b_float(23.123) * b_char(1))
    assertEquals(b_float(531.829), b_float(23.123) * b_char(23))
    assertEquals(b_float(1515365.8), b_float(23.123) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * b_char(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * b_char(1))
    assertEquals(b_float(-736.0), b_float(-32.0) * b_char(23))
    assertEquals(b_float(-2097120.0), b_float(-32.0) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * b_char(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * b_char(1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * b_char(23))
    assertEquals(b_float(-2127004.0), b_float(-32.456) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_char(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_char(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_char(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_char(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_char(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_char(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * b_char(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * b_char(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_char(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_char(Character.MAX_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_char(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * b_char(1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_char(23))
    assertEquals(b_float(Float.parseFloat("9.1834E-41")), b_float(Float.MIN_VALUE) * b_char(Character.MAX_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * b_char(0)))
  }

  function testFloatPIntMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * p_int(0))
    assertEquals(b_float(0.0), b_float(0.0) * p_int(1))
    assertEquals(b_float(-0.0), b_float(0.0) * p_int(-1))
    assertEquals(b_float(0.0), b_float(0.0) * p_int(23))
    assertEquals(b_float(-0.0), b_float(0.0) * p_int(-32))
    assertEquals(b_float(0.0), b_float(0.0) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * p_int(0))
    assertEquals(b_float(1.0), b_float(1.0) * p_int(1))
    assertEquals(b_float(-1.0), b_float(1.0) * p_int(-1))
    assertEquals(b_float(23.0), b_float(1.0) * p_int(23))
    assertEquals(b_float(-32.0), b_float(1.0) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_float(1.0) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_float(1.0) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * p_int(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_int(1))
    assertEquals(b_float(1.0), b_float(-1.0) * p_int(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * p_int(23))
    assertEquals(b_float(32.0), b_float(-1.0) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_float(-1.0) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_float(-1.0) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * p_int(0))
    assertEquals(b_float(23.0), b_float(23.0) * p_int(1))
    assertEquals(b_float(-23.0), b_float(23.0) * p_int(-1))
    assertEquals(b_float(529.0), b_float(23.0) * p_int(23))
    assertEquals(b_float(-736.0), b_float(23.0) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("4.9392124E10")), b_float(23.0) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.9392124E10")), b_float(23.0) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * p_int(0))
    assertEquals(b_float(23.123), b_float(23.123) * p_int(1))
    assertEquals(b_float(-23.123), b_float(23.123) * p_int(-1))
    assertEquals(b_float(531.829), b_float(23.123) * p_int(23))
    assertEquals(b_float(-739.936), b_float(23.123) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("4.9656263E10")), b_float(23.123) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.9656263E10")), b_float(23.123) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * p_int(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_int(1))
    assertEquals(b_float(32.0), b_float(-32.0) * p_int(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * p_int(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("-6.8719477E10")), b_float(-32.0) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("6.8719477E10")), b_float(-32.0) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * p_int(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_int(1))
    assertEquals(b_float(32.456), b_float(-32.456) * p_int(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * p_int(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("-6.9698732E10")), b_float(-32.456) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("6.9698732E10")), b_float(-32.456) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_int(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_int(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_int(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_int(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_int(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_int(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_int(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_int(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_int(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_int(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * p_int(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_int(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * p_int(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_int(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_int(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_int(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_int(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * p_int(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_int(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * p_int(-32))
    assertEquals(b_float(Float.parseFloat("3.0092655E-36")), b_float(Float.MIN_VALUE) * p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.0092655E-36")), b_float(Float.MIN_VALUE) * p_int(Integer.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * p_int(0)))
  }

  function testFloatIntegerMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * b_int(0))
    assertEquals(b_float(0.0), b_float(0.0) * b_int(1))
    assertEquals(b_float(-0.0), b_float(0.0) * b_int(-1))
    assertEquals(b_float(0.0), b_float(0.0) * b_int(23))
    assertEquals(b_float(-0.0), b_float(0.0) * b_int(-32))
    assertEquals(b_float(0.0), b_float(0.0) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * b_int(0))
    assertEquals(b_float(1.0), b_float(1.0) * b_int(1))
    assertEquals(b_float(-1.0), b_float(1.0) * b_int(-1))
    assertEquals(b_float(23.0), b_float(1.0) * b_int(23))
    assertEquals(b_float(-32.0), b_float(1.0) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_float(1.0) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_float(1.0) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * b_int(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * b_int(1))
    assertEquals(b_float(1.0), b_float(-1.0) * b_int(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * b_int(23))
    assertEquals(b_float(32.0), b_float(-1.0) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_float(-1.0) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_float(-1.0) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * b_int(0))
    assertEquals(b_float(23.0), b_float(23.0) * b_int(1))
    assertEquals(b_float(-23.0), b_float(23.0) * b_int(-1))
    assertEquals(b_float(529.0), b_float(23.0) * b_int(23))
    assertEquals(b_float(-736.0), b_float(23.0) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("4.9392124E10")), b_float(23.0) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.9392124E10")), b_float(23.0) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * b_int(0))
    assertEquals(b_float(23.123), b_float(23.123) * b_int(1))
    assertEquals(b_float(-23.123), b_float(23.123) * b_int(-1))
    assertEquals(b_float(531.829), b_float(23.123) * b_int(23))
    assertEquals(b_float(-739.936), b_float(23.123) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("4.9656263E10")), b_float(23.123) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.9656263E10")), b_float(23.123) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * b_int(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * b_int(1))
    assertEquals(b_float(32.0), b_float(-32.0) * b_int(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * b_int(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("-6.8719477E10")), b_float(-32.0) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("6.8719477E10")), b_float(-32.0) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * b_int(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * b_int(1))
    assertEquals(b_float(32.456), b_float(-32.456) * b_int(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * b_int(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("-6.9698732E10")), b_float(-32.456) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("6.9698732E10")), b_float(-32.456) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_int(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_int(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_int(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_int(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_int(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_int(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_int(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_int(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_int(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_int(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * b_int(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * b_int(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * b_int(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_int(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_int(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_int(Integer.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_int(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * b_int(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * b_int(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_int(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * b_int(-32))
    assertEquals(b_float(Float.parseFloat("3.0092655E-36")), b_float(Float.MIN_VALUE) * b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.0092655E-36")), b_float(Float.MIN_VALUE) * b_int(Integer.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * b_int(0)))
  }

  function testFloatPLongMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * p_long(0))
    assertEquals(b_float(0.0), b_float(0.0) * p_long(1))
    assertEquals(b_float(-0.0), b_float(0.0) * p_long(-1))
    assertEquals(b_float(0.0), b_float(0.0) * p_long(23))
    assertEquals(b_float(-0.0), b_float(0.0) * p_long(-32))
    assertEquals(b_float(0.0), b_float(0.0) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * p_long(0))
    assertEquals(b_float(1.0), b_float(1.0) * p_long(1))
    assertEquals(b_float(-1.0), b_float(1.0) * p_long(-1))
    assertEquals(b_float(23.0), b_float(1.0) * p_long(23))
    assertEquals(b_float(-32.0), b_float(1.0) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("9.223372E18")), b_float(1.0) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-9.223372E18")), b_float(1.0) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * p_long(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_long(1))
    assertEquals(b_float(1.0), b_float(-1.0) * p_long(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * p_long(23))
    assertEquals(b_float(32.0), b_float(-1.0) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("-9.223372E18")), b_float(-1.0) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("9.223372E18")), b_float(-1.0) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * p_long(0))
    assertEquals(b_float(23.0), b_float(23.0) * p_long(1))
    assertEquals(b_float(-23.0), b_float(23.0) * p_long(-1))
    assertEquals(b_float(529.0), b_float(23.0) * p_long(23))
    assertEquals(b_float(-736.0), b_float(23.0) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("2.1213756E20")), b_float(23.0) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.1213756E20")), b_float(23.0) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * p_long(0))
    assertEquals(b_float(23.123), b_float(23.123) * p_long(1))
    assertEquals(b_float(-23.123), b_float(23.123) * p_long(-1))
    assertEquals(b_float(531.829), b_float(23.123) * p_long(23))
    assertEquals(b_float(-739.936), b_float(23.123) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("2.1327202E20")), b_float(23.123) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.1327202E20")), b_float(23.123) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * p_long(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_long(1))
    assertEquals(b_float(32.0), b_float(-32.0) * p_long(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * p_long(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("-2.951479E20")), b_float(-32.0) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("2.951479E20")), b_float(-32.0) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * p_long(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_long(1))
    assertEquals(b_float(32.456), b_float(-32.456) * p_long(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * p_long(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("-2.9935377E20")), b_float(-32.456) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("2.9935377E20")), b_float(-32.456) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_long(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_long(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_long(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_long(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_long(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_long(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_long(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_long(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_long(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_long(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * p_long(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_long(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * p_long(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_long(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_long(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_long(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_long(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * p_long(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_long(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * p_long(-32))
    assertEquals(b_float(Float.parseFloat("1.2924697E-26")), b_float(Float.MIN_VALUE) * p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.2924697E-26")), b_float(Float.MIN_VALUE) * p_long(Long.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * p_long(0)))
  }

  function testFloatLongMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * b_long(0))
    assertEquals(b_float(0.0), b_float(0.0) * b_long(1))
    assertEquals(b_float(-0.0), b_float(0.0) * b_long(-1))
    assertEquals(b_float(0.0), b_float(0.0) * b_long(23))
    assertEquals(b_float(-0.0), b_float(0.0) * b_long(-32))
    assertEquals(b_float(0.0), b_float(0.0) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * b_long(0))
    assertEquals(b_float(1.0), b_float(1.0) * b_long(1))
    assertEquals(b_float(-1.0), b_float(1.0) * b_long(-1))
    assertEquals(b_float(23.0), b_float(1.0) * b_long(23))
    assertEquals(b_float(-32.0), b_float(1.0) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("9.223372E18")), b_float(1.0) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-9.223372E18")), b_float(1.0) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * b_long(0))
    assertEquals(b_float(-1.0), b_float(-1.0) * b_long(1))
    assertEquals(b_float(1.0), b_float(-1.0) * b_long(-1))
    assertEquals(b_float(-23.0), b_float(-1.0) * b_long(23))
    assertEquals(b_float(32.0), b_float(-1.0) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("-9.223372E18")), b_float(-1.0) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("9.223372E18")), b_float(-1.0) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * b_long(0))
    assertEquals(b_float(23.0), b_float(23.0) * b_long(1))
    assertEquals(b_float(-23.0), b_float(23.0) * b_long(-1))
    assertEquals(b_float(529.0), b_float(23.0) * b_long(23))
    assertEquals(b_float(-736.0), b_float(23.0) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("2.1213756E20")), b_float(23.0) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.1213756E20")), b_float(23.0) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * b_long(0))
    assertEquals(b_float(23.123), b_float(23.123) * b_long(1))
    assertEquals(b_float(-23.123), b_float(23.123) * b_long(-1))
    assertEquals(b_float(531.829), b_float(23.123) * b_long(23))
    assertEquals(b_float(-739.936), b_float(23.123) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("2.1327202E20")), b_float(23.123) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.1327202E20")), b_float(23.123) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * b_long(0))
    assertEquals(b_float(-32.0), b_float(-32.0) * b_long(1))
    assertEquals(b_float(32.0), b_float(-32.0) * b_long(-1))
    assertEquals(b_float(-736.0), b_float(-32.0) * b_long(23))
    assertEquals(b_float(1024.0), b_float(-32.0) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("-2.951479E20")), b_float(-32.0) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("2.951479E20")), b_float(-32.0) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * b_long(0))
    assertEquals(b_float(-32.456), b_float(-32.456) * b_long(1))
    assertEquals(b_float(32.456), b_float(-32.456) * b_long(-1))
    assertEquals(b_float(-746.48804), b_float(-32.456) * b_long(23))
    assertEquals(b_float(1038.592), b_float(-32.456) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("-2.9935377E20")), b_float(-32.456) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("2.9935377E20")), b_float(-32.456) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_long(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_long(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_long(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_long(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_long(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_long(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_long(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_long(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_long(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_long(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * b_long(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * b_long(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * b_long(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_long(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_long(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_long(Long.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_long(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * b_long(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * b_long(-1))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_long(23))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * b_long(-32))
    assertEquals(b_float(Float.parseFloat("1.2924697E-26")), b_float(Float.MIN_VALUE) * b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.2924697E-26")), b_float(Float.MIN_VALUE) * b_long(Long.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * b_long(0)))
  }

  function testFloatPFloatMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * p_float(0.0))
    assertEquals(b_float(0.0), b_float(0.0) * p_float(1.0))
    assertEquals(b_float(-0.0), b_float(0.0) * p_float(-1.0))
    assertEquals(b_float(0.0), b_float(0.0) * p_float(23.0))
    assertEquals(b_float(0.0), b_float(0.0) * p_float(23.123))
    assertEquals(b_float(-0.0), b_float(0.0) * p_float(-32.0))
    assertEquals(b_float(-0.0), b_float(0.0) * p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(0.0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) * p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(0.0) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * p_float(0.0))
    assertEquals(b_float(1.0), b_float(1.0) * p_float(1.0))
    assertEquals(b_float(-1.0), b_float(1.0) * p_float(-1.0))
    assertEquals(b_float(23.0), b_float(1.0) * p_float(23.0))
    assertEquals(b_float(23.123), b_float(1.0) * p_float(23.123))
    assertEquals(b_float(-32.0), b_float(1.0) * p_float(-32.0))
    assertEquals(b_float(-32.456), b_float(1.0) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(1.0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(1.0) * p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(1.0) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(1.0) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * p_float(0.0))
    assertEquals(b_float(-1.0), b_float(-1.0) * p_float(1.0))
    assertEquals(b_float(1.0), b_float(-1.0) * p_float(-1.0))
    assertEquals(b_float(-23.0), b_float(-1.0) * p_float(23.0))
    assertEquals(b_float(-23.123), b_float(-1.0) * p_float(23.123))
    assertEquals(b_float(32.0), b_float(-1.0) * p_float(-32.0))
    assertEquals(b_float(32.456), b_float(-1.0) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(-1.0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-1.0) * p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(-1.0) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(-1.0) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * p_float(0.0))
    assertEquals(b_float(23.0), b_float(23.0) * p_float(1.0))
    assertEquals(b_float(-23.0), b_float(23.0) * p_float(-1.0))
    assertEquals(b_float(529.0), b_float(23.0) * p_float(23.0))
    assertEquals(b_float(531.829), b_float(23.0) * p_float(23.123))
    assertEquals(b_float(-736.0), b_float(23.0) * p_float(-32.0))
    assertEquals(b_float(-746.48804), b_float(23.0) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(23.0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.0) * p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(23.0) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * p_float(0.0))
    assertEquals(b_float(23.123), b_float(23.123) * p_float(1.0))
    assertEquals(b_float(-23.123), b_float(23.123) * p_float(-1.0))
    assertEquals(b_float(531.829), b_float(23.123) * p_float(23.0))
    assertEquals(b_float(534.6731), b_float(23.123) * p_float(23.123))
    assertEquals(b_float(-739.936), b_float(23.123) * p_float(-32.0))
    assertEquals(b_float(-750.4801), b_float(23.123) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(23.123) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.123) * p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(23.123) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * p_float(0.0))
    assertEquals(b_float(-32.0), b_float(-32.0) * p_float(1.0))
    assertEquals(b_float(32.0), b_float(-32.0) * p_float(-1.0))
    assertEquals(b_float(-736.0), b_float(-32.0) * p_float(23.0))
    assertEquals(b_float(-739.936), b_float(-32.0) * p_float(23.123))
    assertEquals(b_float(1024.0), b_float(-32.0) * p_float(-32.0))
    assertEquals(b_float(1038.592), b_float(-32.0) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(-32.0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.0) * p_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(-32.0) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * p_float(0.0))
    assertEquals(b_float(-32.456), b_float(-32.456) * p_float(1.0))
    assertEquals(b_float(32.456), b_float(-32.456) * p_float(-1.0))
    assertEquals(b_float(-746.48804), b_float(-32.456) * p_float(23.0))
    assertEquals(b_float(-750.4801), b_float(-32.456) * p_float(23.123))
    assertEquals(b_float(1038.592), b_float(-32.456) * p_float(-32.0))
    assertEquals(b_float(1053.392), b_float(-32.456) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(-32.456) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.456) * p_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(-32.456) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_float(0.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(-1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(23.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(23.123))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(-32.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_float(0.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(-1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(23.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(23.123))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(-32.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * p_float(0.0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * p_float(1.0))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * p_float(-1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(23.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(23.123))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(-32.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) * p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("4.7683713E-7")), b_float(Float.MAX_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_float(0.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * p_float(1.0))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * p_float(-1.0))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_float(23.0))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * p_float(23.123))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * p_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MIN_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) * p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("4.7683713E-7")), b_float(Float.MIN_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * p_float(0.0)))
  }

  function testFloatFloatMultiplication() {
    assertEquals(b_float(0.0), b_float(0.0) * b_float(0.0))
    assertEquals(b_float(0.0), b_float(0.0) * b_float(1.0))
    assertEquals(b_float(-0.0), b_float(0.0) * b_float(-1.0))
    assertEquals(b_float(0.0), b_float(0.0) * b_float(23.0))
    assertEquals(b_float(0.0), b_float(0.0) * b_float(23.123))
    assertEquals(b_float(-0.0), b_float(0.0) * b_float(-32.0))
    assertEquals(b_float(-0.0), b_float(0.0) * b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(0.0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) * b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(0.0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(1.0) * b_float(0.0))
    assertEquals(b_float(1.0), b_float(1.0) * b_float(1.0))
    assertEquals(b_float(-1.0), b_float(1.0) * b_float(-1.0))
    assertEquals(b_float(23.0), b_float(1.0) * b_float(23.0))
    assertEquals(b_float(23.123), b_float(1.0) * b_float(23.123))
    assertEquals(b_float(-32.0), b_float(1.0) * b_float(-32.0))
    assertEquals(b_float(-32.456), b_float(1.0) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(1.0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(1.0) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(1.0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(1.0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-1.0) * b_float(0.0))
    assertEquals(b_float(-1.0), b_float(-1.0) * b_float(1.0))
    assertEquals(b_float(1.0), b_float(-1.0) * b_float(-1.0))
    assertEquals(b_float(-23.0), b_float(-1.0) * b_float(23.0))
    assertEquals(b_float(-23.123), b_float(-1.0) * b_float(23.123))
    assertEquals(b_float(32.0), b_float(-1.0) * b_float(-32.0))
    assertEquals(b_float(32.456), b_float(-1.0) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(-1.0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-1.0) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(-1.0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(-1.0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.0) * b_float(0.0))
    assertEquals(b_float(23.0), b_float(23.0) * b_float(1.0))
    assertEquals(b_float(-23.0), b_float(23.0) * b_float(-1.0))
    assertEquals(b_float(529.0), b_float(23.0) * b_float(23.0))
    assertEquals(b_float(531.829), b_float(23.0) * b_float(23.123))
    assertEquals(b_float(-736.0), b_float(23.0) * b_float(-32.0))
    assertEquals(b_float(-746.48804), b_float(23.0) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(23.0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.0) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(23.0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(23.123) * b_float(0.0))
    assertEquals(b_float(23.123), b_float(23.123) * b_float(1.0))
    assertEquals(b_float(-23.123), b_float(23.123) * b_float(-1.0))
    assertEquals(b_float(531.829), b_float(23.123) * b_float(23.0))
    assertEquals(b_float(534.6731), b_float(23.123) * b_float(23.123))
    assertEquals(b_float(-739.936), b_float(23.123) * b_float(-32.0))
    assertEquals(b_float(-750.4801), b_float(23.123) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(23.123) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.123) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(23.123) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.0) * b_float(0.0))
    assertEquals(b_float(-32.0), b_float(-32.0) * b_float(1.0))
    assertEquals(b_float(32.0), b_float(-32.0) * b_float(-1.0))
    assertEquals(b_float(-736.0), b_float(-32.0) * b_float(23.0))
    assertEquals(b_float(-739.936), b_float(-32.0) * b_float(23.123))
    assertEquals(b_float(1024.0), b_float(-32.0) * b_float(-32.0))
    assertEquals(b_float(1038.592), b_float(-32.0) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(-32.0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.0) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(-32.0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_float(-32.456) * b_float(0.0))
    assertEquals(b_float(-32.456), b_float(-32.456) * b_float(1.0))
    assertEquals(b_float(32.456), b_float(-32.456) * b_float(-1.0))
    assertEquals(b_float(-746.48804), b_float(-32.456) * b_float(23.0))
    assertEquals(b_float(-750.4801), b_float(-32.456) * b_float(23.123))
    assertEquals(b_float(1038.592), b_float(-32.456) * b_float(-32.0))
    assertEquals(b_float(1053.392), b_float(-32.456) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(-32.456) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.456) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(-32.456) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_float(0.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(-1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(23.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(23.123))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(-32.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_float(0.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(-1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(23.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(23.123))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(-32.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) * b_float(0.0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) * b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) * b_float(-1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(23.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(23.123))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(-32.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("4.7683713E-7")), b_float(Float.MAX_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_float(0.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) * b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) * b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_float(23.0))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_float(Float.MIN_VALUE) * b_float(23.123))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_float(Float.MIN_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.MIN_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("4.7683713E-7")), b_float(Float.MIN_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) * b_float(0.0)))
  }

  function testFloatPDoubleMultiplication() {
    assertEquals(b_double(0.0), b_float(0.0) * p_double(0.0))
    assertEquals(b_double(0.0), b_float(0.0) * p_double(1.0))
    assertEquals(b_double(-0.0), b_float(0.0) * p_double(-1.0))
    assertEquals(b_double(0.0), b_float(0.0) * p_double(23.0))
    assertEquals(b_double(0.0), b_float(0.0) * p_double(23.123))
    assertEquals(b_double(-0.0), b_float(0.0) * p_double(-32.0))
    assertEquals(b_double(-0.0), b_float(0.0) * p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(0.0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) * p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(0.0) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(0.0) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(1.0) * p_double(0.0))
    assertEquals(b_double(1.0), b_float(1.0) * p_double(1.0))
    assertEquals(b_double(-1.0), b_float(1.0) * p_double(-1.0))
    assertEquals(b_double(23.0), b_float(1.0) * p_double(23.0))
    assertEquals(b_double(23.123), b_float(1.0) * p_double(23.123))
    assertEquals(b_double(-32.0), b_float(1.0) * p_double(-32.0))
    assertEquals(b_double(-32.456), b_float(1.0) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(1.0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(1.0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(1.0) * p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_float(1.0) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), b_float(1.0) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_float(-1.0) * p_double(0.0))
    assertEquals(b_double(-1.0), b_float(-1.0) * p_double(1.0))
    assertEquals(b_double(1.0), b_float(-1.0) * p_double(-1.0))
    assertEquals(b_double(-23.0), b_float(-1.0) * p_double(23.0))
    assertEquals(b_double(-23.123), b_float(-1.0) * p_double(23.123))
    assertEquals(b_double(32.0), b_float(-1.0) * p_double(-32.0))
    assertEquals(b_double(32.456), b_float(-1.0) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-1.0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(-1.0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-1.0) * p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), b_float(-1.0) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), b_float(-1.0) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(23.0) * p_double(0.0))
    assertEquals(b_double(23.0), b_float(23.0) * p_double(1.0))
    assertEquals(b_double(-23.0), b_float(23.0) * p_double(-1.0))
    assertEquals(b_double(529.0), b_float(23.0) * p_double(23.0))
    assertEquals(b_double(531.8290000000001), b_float(23.0) * p_double(23.123))
    assertEquals(b_double(-736.0), b_float(23.0) * p_double(-32.0))
    assertEquals(b_double(-746.488), b_float(23.0) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(23.0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.0) * p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), b_float(23.0) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(23.123) * p_double(0.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) * p_double(1.0))
    assertEquals(b_double(-23.12299919128418), b_float(23.123) * p_double(-1.0))
    assertEquals(b_double(531.8289813995361), b_float(23.123) * p_double(23.0))
    assertEquals(b_double(534.6731103000641), b_float(23.123) * p_double(23.123))
    assertEquals(b_double(-739.9359741210938), b_float(23.123) * p_double(-32.0))
    assertEquals(b_double(-750.4800617523194), b_float(23.123) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(23.123) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.123) * p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), b_float(23.123) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_float(-32.0) * p_double(0.0))
    assertEquals(b_double(-32.0), b_float(-32.0) * p_double(1.0))
    assertEquals(b_double(32.0), b_float(-32.0) * p_double(-1.0))
    assertEquals(b_double(-736.0), b_float(-32.0) * p_double(23.0))
    assertEquals(b_double(-739.936), b_float(-32.0) * p_double(23.123))
    assertEquals(b_double(1024.0), b_float(-32.0) * p_double(-32.0))
    assertEquals(b_double(1038.592), b_float(-32.0) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(-32.0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.0) * p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), b_float(-32.0) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_float(-32.456) * p_double(0.0))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) * p_double(1.0))
    assertEquals(b_double(32.45600128173828), b_float(-32.456) * p_double(-1.0))
    assertEquals(b_double(-746.4880294799805), b_float(-32.456) * p_double(23.0))
    assertEquals(b_double(-750.4801176376343), b_float(-32.456) * p_double(23.123))
    assertEquals(b_double(1038.592041015625), b_float(-32.456) * p_double(-32.0))
    assertEquals(b_double(1053.3919776000978), b_float(-32.456) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(-32.456) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.456) * p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), b_float(-32.456) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) * p_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(-1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) * p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(-1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) * p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) * p_double(0.0))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) * p_double(1.0))
    assertEquals(b_double(Double.parseDouble("-3.4028234663852886E38")), b_float(Float.MAX_VALUE) * p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("7.826493972686164E39")), b_float(Float.MAX_VALUE) * p_double(23.0))
    assertEquals(b_double(Double.parseDouble("7.868348701322703E39")), b_float(Float.MAX_VALUE) * p_double(23.123))
    assertEquals(b_double(Double.parseDouble("-1.0889035092432924E40")), b_float(Float.MAX_VALUE) * p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-1.1044203842500094E40")), b_float(Float.MAX_VALUE) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) * p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.681218173603397E-285")), b_float(Float.MAX_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) * p_double(0.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) * p_double(1.0))
    assertEquals(b_double(Double.parseDouble("-1.401298464324817E-45")), b_float(Float.MIN_VALUE) * p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("3.2229864679470793E-44")), b_float(Float.MIN_VALUE) * p_double(23.0))
    assertEquals(b_double(Double.parseDouble("3.2402224390582747E-44")), b_float(Float.MIN_VALUE) * p_double(23.123))
    assertEquals(b_double(Double.parseDouble("-4.4841550858394146E-44")), b_float(Float.MIN_VALUE) * p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-4.548054295812627E-44")), b_float(Float.MIN_VALUE) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.MIN_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) * p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("2.5191046292098293E263")), b_float(Float.MIN_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_float(0.0) * p_double(0.0)))
  }

  function testFloatDoubleMultiplication() {
    assertEquals(b_double(0.0), b_float(0.0) * b_double(0.0))
    assertEquals(b_double(0.0), b_float(0.0) * b_double(1.0))
    assertEquals(b_double(-0.0), b_float(0.0) * b_double(-1.0))
    assertEquals(b_double(0.0), b_float(0.0) * b_double(23.0))
    assertEquals(b_double(0.0), b_float(0.0) * b_double(23.123))
    assertEquals(b_double(-0.0), b_float(0.0) * b_double(-32.0))
    assertEquals(b_double(-0.0), b_float(0.0) * b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(0.0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) * b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(0.0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(0.0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(1.0) * b_double(0.0))
    assertEquals(b_double(1.0), b_float(1.0) * b_double(1.0))
    assertEquals(b_double(-1.0), b_float(1.0) * b_double(-1.0))
    assertEquals(b_double(23.0), b_float(1.0) * b_double(23.0))
    assertEquals(b_double(23.123), b_float(1.0) * b_double(23.123))
    assertEquals(b_double(-32.0), b_float(1.0) * b_double(-32.0))
    assertEquals(b_double(-32.456), b_float(1.0) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(1.0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(1.0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(1.0) * b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_float(1.0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), b_float(1.0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_float(-1.0) * b_double(0.0))
    assertEquals(b_double(-1.0), b_float(-1.0) * b_double(1.0))
    assertEquals(b_double(1.0), b_float(-1.0) * b_double(-1.0))
    assertEquals(b_double(-23.0), b_float(-1.0) * b_double(23.0))
    assertEquals(b_double(-23.123), b_float(-1.0) * b_double(23.123))
    assertEquals(b_double(32.0), b_float(-1.0) * b_double(-32.0))
    assertEquals(b_double(32.456), b_float(-1.0) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-1.0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(-1.0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-1.0) * b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), b_float(-1.0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), b_float(-1.0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(23.0) * b_double(0.0))
    assertEquals(b_double(23.0), b_float(23.0) * b_double(1.0))
    assertEquals(b_double(-23.0), b_float(23.0) * b_double(-1.0))
    assertEquals(b_double(529.0), b_float(23.0) * b_double(23.0))
    assertEquals(b_double(531.8290000000001), b_float(23.0) * b_double(23.123))
    assertEquals(b_double(-736.0), b_float(23.0) * b_double(-32.0))
    assertEquals(b_double(-746.488), b_float(23.0) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(23.0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.0) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), b_float(23.0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(23.123) * b_double(0.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) * b_double(1.0))
    assertEquals(b_double(-23.12299919128418), b_float(23.123) * b_double(-1.0))
    assertEquals(b_double(531.8289813995361), b_float(23.123) * b_double(23.0))
    assertEquals(b_double(534.6731103000641), b_float(23.123) * b_double(23.123))
    assertEquals(b_double(-739.9359741210938), b_float(23.123) * b_double(-32.0))
    assertEquals(b_double(-750.4800617523194), b_float(23.123) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(23.123) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.123) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), b_float(23.123) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_float(-32.0) * b_double(0.0))
    assertEquals(b_double(-32.0), b_float(-32.0) * b_double(1.0))
    assertEquals(b_double(32.0), b_float(-32.0) * b_double(-1.0))
    assertEquals(b_double(-736.0), b_float(-32.0) * b_double(23.0))
    assertEquals(b_double(-739.936), b_float(-32.0) * b_double(23.123))
    assertEquals(b_double(1024.0), b_float(-32.0) * b_double(-32.0))
    assertEquals(b_double(1038.592), b_float(-32.0) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(-32.0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.0) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), b_float(-32.0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_float(-32.456) * b_double(0.0))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) * b_double(1.0))
    assertEquals(b_double(32.45600128173828), b_float(-32.456) * b_double(-1.0))
    assertEquals(b_double(-746.4880294799805), b_float(-32.456) * b_double(23.0))
    assertEquals(b_double(-750.4801176376343), b_float(-32.456) * b_double(23.123))
    assertEquals(b_double(1038.592041015625), b_float(-32.456) * b_double(-32.0))
    assertEquals(b_double(1053.3919776000978), b_float(-32.456) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(-32.456) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.456) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), b_float(-32.456) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) * b_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(-1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(-1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) * b_double(0.0))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) * b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-3.4028234663852886E38")), b_float(Float.MAX_VALUE) * b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("7.826493972686164E39")), b_float(Float.MAX_VALUE) * b_double(23.0))
    assertEquals(b_double(Double.parseDouble("7.868348701322703E39")), b_float(Float.MAX_VALUE) * b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-1.0889035092432924E40")), b_float(Float.MAX_VALUE) * b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-1.1044203842500094E40")), b_float(Float.MAX_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.MAX_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.681218173603397E-285")), b_float(Float.MAX_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) * b_double(0.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) * b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-1.401298464324817E-45")), b_float(Float.MIN_VALUE) * b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("3.2229864679470793E-44")), b_float(Float.MIN_VALUE) * b_double(23.0))
    assertEquals(b_double(Double.parseDouble("3.2402224390582747E-44")), b_float(Float.MIN_VALUE) * b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-4.4841550858394146E-44")), b_float(Float.MIN_VALUE) * b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-4.548054295812627E-44")), b_float(Float.MIN_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.MIN_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("2.5191046292098293E263")), b_float(Float.MIN_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_float(0.0) * b_double(0.0)))
  }

  function testFloatBigIntegerMultiplication() {
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("-1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("23"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("-32"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.0"), b_float(1.0) * big_int("0"))
    assertEquals(big_decimal("1.0"), b_float(1.0) * big_int("1"))
    assertEquals(big_decimal("-1.0"), b_float(1.0) * big_int("-1"))
    assertEquals(big_decimal("23.0"), b_float(1.0) * big_int("23"))
    assertEquals(big_decimal("-32.0"), b_float(1.0) * big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567890.0"), b_float(1.0) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), b_float(1.0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.0"), b_float(-1.0) * big_int("0"))
    assertEquals(big_decimal("-1.0"), b_float(-1.0) * big_int("1"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) * big_int("-1"))
    assertEquals(big_decimal("-23.0"), b_float(-1.0) * big_int("23"))
    assertEquals(big_decimal("32.0"), b_float(-1.0) * big_int("-32"))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), b_float(-1.0) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("123456789012345678901234567890.0"), b_float(-1.0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.0"), b_float(23.0) * big_int("0"))
    assertEquals(big_decimal("23.0"), b_float(23.0) * big_int("1"))
    assertEquals(big_decimal("-23.0"), b_float(23.0) * big_int("-1"))
    assertEquals(big_decimal("529.0"), b_float(23.0) * big_int("23"))
    assertEquals(big_decimal("-736.0"), b_float(23.0) * big_int("-32"))
    assertEquals(big_decimal("2839506147283950614728395061470.0"), b_float(23.0) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-2839506147283950614728395061470.0"), b_float(23.0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.000"), b_float(23.123) * big_int("0"))
    assertEquals(big_decimal("23.123"), b_float(23.123) * big_int("1"))
    assertEquals(big_decimal("-23.123"), b_float(23.123) * big_int("-1"))
    assertEquals(big_decimal("531.829"), b_float(23.123) * big_int("23"))
    assertEquals(big_decimal("-739.936"), b_float(23.123) * big_int("-32"))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), b_float(23.123) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), b_float(23.123) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.0"), b_float(-32.0) * big_int("0"))
    assertEquals(big_decimal("-32.0"), b_float(-32.0) * big_int("1"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) * big_int("-1"))
    assertEquals(big_decimal("-736.0"), b_float(-32.0) * big_int("23"))
    assertEquals(big_decimal("1024.0"), b_float(-32.0) * big_int("-32"))
    assertEquals(big_decimal("-3950617248395061724839506172480.0"), b_float(-32.0) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("3950617248395061724839506172480.0"), b_float(-32.0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.000"), b_float(-32.456) * big_int("0"))
    assertEquals(big_decimal("-32.456"), b_float(-32.456) * big_int("1"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) * big_int("-1"))
    assertEquals(big_decimal("-746.488"), b_float(-32.456) * big_int("23"))
    assertEquals(big_decimal("1038.592"), b_float(-32.456) * big_int("-32"))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), b_float(-32.456) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), b_float(-32.456) * big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0E+31"), b_float(Float.MAX_VALUE) * big_int("0"))
    assertEquals(big_decimal("3.4028235E+38"), b_float(Float.MAX_VALUE) * big_int("1"))
    assertEquals(big_decimal("-3.4028235E+38"), b_float(Float.MAX_VALUE) * big_int("-1"))
    assertEquals(big_decimal("7.82649405E+39"), b_float(Float.MAX_VALUE) * big_int("23"))
    assertEquals(big_decimal("-1.088903520E+40"), b_float(Float.MAX_VALUE) * big_int("-32"))
    assertEquals(big_decimal("4.201016628857516662885751666284374150E+67"), b_float(Float.MAX_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-4.201016628857516662885751666284374150E+67"), b_float(Float.MAX_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0E-46"), b_float(Float.MIN_VALUE) * big_int("0"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) * big_int("1"))
    assertEquals(big_decimal("-1.4E-45"), b_float(Float.MIN_VALUE) * big_int("-1"))
    assertEquals(big_decimal("3.22E-44"), b_float(Float.MIN_VALUE) * big_int("23"))
    assertEquals(big_decimal("-4.48E-44"), b_float(Float.MIN_VALUE) * big_int("-32"))
    assertEquals(big_decimal("1.728395046172839504617283950460E-16"), b_float(Float.MIN_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.728395046172839504617283950460E-16"), b_float(Float.MIN_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(b_float(0.0) * big_int("0")))
  }

  function testFloatBigDecimalMultiplication() {
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_decimal("-1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_decimal("23"))
    assertEquals(big_decimal("0.0000"), b_float(0.0) * big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), b_float(0.0) * big_decimal("-32"))
    assertEquals(big_decimal("0.0000"), b_float(0.0) * big_decimal("-32.456"))
    assertEquals(big_decimal("0E-10"), b_float(0.0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-10"), b_float(0.0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.0"), b_float(1.0) * big_decimal("0"))
    assertEquals(big_decimal("1.0"), b_float(1.0) * big_decimal("1"))
    assertEquals(big_decimal("-1.0"), b_float(1.0) * big_decimal("-1"))
    assertEquals(big_decimal("23.0"), b_float(1.0) * big_decimal("23"))
    assertEquals(big_decimal("23.1230"), b_float(1.0) * big_decimal("23.123"))
    assertEquals(big_decimal("-32.0"), b_float(1.0) * big_decimal("-32"))
    assertEquals(big_decimal("-32.4560"), b_float(1.0) * big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), b_float(1.0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), b_float(1.0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.0"), b_float(-1.0) * big_decimal("0"))
    assertEquals(big_decimal("-1.0"), b_float(-1.0) * big_decimal("1"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) * big_decimal("-1"))
    assertEquals(big_decimal("-23.0"), b_float(-1.0) * big_decimal("23"))
    assertEquals(big_decimal("-23.1230"), b_float(-1.0) * big_decimal("23.123"))
    assertEquals(big_decimal("32.0"), b_float(-1.0) * big_decimal("-32"))
    assertEquals(big_decimal("32.4560"), b_float(-1.0) * big_decimal("-32.456"))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), b_float(-1.0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), b_float(-1.0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.0"), b_float(23.0) * big_decimal("0"))
    assertEquals(big_decimal("23.0"), b_float(23.0) * big_decimal("1"))
    assertEquals(big_decimal("-23.0"), b_float(23.0) * big_decimal("-1"))
    assertEquals(big_decimal("529.0"), b_float(23.0) * big_decimal("23"))
    assertEquals(big_decimal("531.8290"), b_float(23.0) * big_decimal("23.123"))
    assertEquals(big_decimal("-736.0"), b_float(23.0) * big_decimal("-32"))
    assertEquals(big_decimal("-746.4880"), b_float(23.0) * big_decimal("-32.456"))
    assertEquals(big_decimal("2839506147283950614728395061472.8395061470"), b_float(23.0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2839506147283950614728395061472.8395061470"), b_float(23.0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.000"), b_float(23.123) * big_decimal("0"))
    assertEquals(big_decimal("23.123"), b_float(23.123) * big_decimal("1"))
    assertEquals(big_decimal("-23.123"), b_float(23.123) * big_decimal("-1"))
    assertEquals(big_decimal("531.829"), b_float(23.123) * big_decimal("23"))
    assertEquals(big_decimal("534.673129"), b_float(23.123) * big_decimal("23.123"))
    assertEquals(big_decimal("-739.936"), b_float(23.123) * big_decimal("-32"))
    assertEquals(big_decimal("-750.480088"), b_float(23.123) * big_decimal("-32.456"))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), b_float(23.123) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), b_float(23.123) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.0"), b_float(-32.0) * big_decimal("0"))
    assertEquals(big_decimal("-32.0"), b_float(-32.0) * big_decimal("1"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) * big_decimal("-1"))
    assertEquals(big_decimal("-736.0"), b_float(-32.0) * big_decimal("23"))
    assertEquals(big_decimal("-739.9360"), b_float(-32.0) * big_decimal("23.123"))
    assertEquals(big_decimal("1024.0"), b_float(-32.0) * big_decimal("-32"))
    assertEquals(big_decimal("1038.5920"), b_float(-32.0) * big_decimal("-32.456"))
    assertEquals(big_decimal("-3950617248395061724839506172483.9506172480"), b_float(-32.0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("3950617248395061724839506172483.9506172480"), b_float(-32.0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.000"), b_float(-32.456) * big_decimal("0"))
    assertEquals(big_decimal("-32.456"), b_float(-32.456) * big_decimal("1"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) * big_decimal("-1"))
    assertEquals(big_decimal("-746.488"), b_float(-32.456) * big_decimal("23"))
    assertEquals(big_decimal("-750.480088"), b_float(-32.456) * big_decimal("23.123"))
    assertEquals(big_decimal("1038.592"), b_float(-32.456) * big_decimal("-32"))
    assertEquals(big_decimal("1053.391936"), b_float(-32.456) * big_decimal("-32.456"))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), b_float(-32.456) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), b_float(-32.456) * big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0E+31"), b_float(Float.MAX_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("3.4028235E+38"), b_float(Float.MAX_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("-3.4028235E+38"), b_float(Float.MAX_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("7.82649405E+39"), b_float(Float.MAX_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("7.86834877905E+39"), b_float(Float.MAX_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("-1.088903520E+40"), b_float(Float.MAX_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("-1.104420395160E+40"), b_float(Float.MAX_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("4.201016628857516662885751666288575166628437415E+67"), b_float(Float.MAX_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-4.201016628857516662885751666288575166628437415E+67"), b_float(Float.MAX_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0E-46"), b_float(Float.MIN_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("-1.4E-45"), b_float(Float.MIN_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("3.22E-44"), b_float(Float.MIN_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("3.23722E-44"), b_float(Float.MIN_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("-4.48E-44"), b_float(Float.MIN_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("-4.54384E-44"), b_float(Float.MIN_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("1.728395046172839504617283950461728395046E-16"), b_float(Float.MIN_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.728395046172839504617283950461728395046E-16"), b_float(Float.MIN_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_float(0.0) * big_decimal("0")))
  }

}

