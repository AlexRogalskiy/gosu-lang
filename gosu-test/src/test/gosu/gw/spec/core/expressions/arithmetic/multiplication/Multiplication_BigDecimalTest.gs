package gw.spec.core.expressions.arithmetic.multiplication
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Multiplication_BigDecimalTest extends ArithmeticTestBase {

  function testBigDecimalPByteMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(23))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * p_byte(0))
    assertEquals(big_decimal("1"), big_decimal("1") * p_byte(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * p_byte(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * p_byte(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * p_byte(-32))
    assertEquals(big_decimal("127"), big_decimal("1") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-128"), big_decimal("1") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * p_byte(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * p_byte(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * p_byte(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * p_byte(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * p_byte(-32))
    assertEquals(big_decimal("-127"), big_decimal("-1") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("128"), big_decimal("-1") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * p_byte(0))
    assertEquals(big_decimal("23"), big_decimal("23") * p_byte(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * p_byte(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * p_byte(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * p_byte(-32))
    assertEquals(big_decimal("2921"), big_decimal("23") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-2944"), big_decimal("23") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * p_byte(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * p_byte(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * p_byte(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * p_byte(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * p_byte(-32))
    assertEquals(big_decimal("2936.621"), big_decimal("23.123") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-2959.744"), big_decimal("23.123") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * p_byte(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * p_byte(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * p_byte(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * p_byte(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * p_byte(-32))
    assertEquals(big_decimal("-4064"), big_decimal("-32") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("4096"), big_decimal("-32") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * p_byte(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * p_byte(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * p_byte(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * p_byte(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * p_byte(-32))
    assertEquals(big_decimal("-4121.912"), big_decimal("-32.456") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("4154.368"), big_decimal("-32.456") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * p_byte(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_byte(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_byte(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * p_byte(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * p_byte(-32))
    assertEquals(big_decimal("15679012204567901220456790122045.679012203"), big_decimal("123456789012345678901234567890.123456789") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-15802468993580246899358024689935.802468992"), big_decimal("123456789012345678901234567890.123456789") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(-32))
    assertEquals(big_decimal("-15679012204567901220456790122045.679012203"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("15802468993580246899358024689935.802468992"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(Byte.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_byte(0)))
  }

  function testBigDecimalByteMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_byte(23))
    assertEquals(big_decimal("0"), big_decimal("0") * b_byte(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * b_byte(0))
    assertEquals(big_decimal("1"), big_decimal("1") * p_byte(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * p_byte(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * b_byte(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * b_byte(-32))
    assertEquals(big_decimal("127"), big_decimal("1") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-128"), big_decimal("1") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * b_byte(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * p_byte(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * p_byte(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * b_byte(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * b_byte(-32))
    assertEquals(big_decimal("-127"), big_decimal("-1") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("128"), big_decimal("-1") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * b_byte(0))
    assertEquals(big_decimal("23"), big_decimal("23") * p_byte(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * p_byte(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * b_byte(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * b_byte(-32))
    assertEquals(big_decimal("2921"), big_decimal("23") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-2944"), big_decimal("23") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * b_byte(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * p_byte(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * p_byte(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * b_byte(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * b_byte(-32))
    assertEquals(big_decimal("2936.621"), big_decimal("23.123") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-2959.744"), big_decimal("23.123") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * b_byte(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * p_byte(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * p_byte(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * b_byte(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * b_byte(-32))
    assertEquals(big_decimal("-4064"), big_decimal("-32") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("4096"), big_decimal("-32") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * b_byte(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * p_byte(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * p_byte(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * b_byte(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * b_byte(-32))
    assertEquals(big_decimal("-4121.912"), big_decimal("-32.456") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("4154.368"), big_decimal("-32.456") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * b_byte(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_byte(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_byte(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * b_byte(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * b_byte(-32))
    assertEquals(big_decimal("15679012204567901220456790122045.679012203"), big_decimal("123456789012345678901234567890.123456789") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-15802468993580246899358024689935.802468992"), big_decimal("123456789012345678901234567890.123456789") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * b_byte(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_byte(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * b_byte(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * b_byte(-32))
    assertEquals(big_decimal("-15679012204567901220456790122045.679012203"), big_decimal("-123456789012345678901234567890.123456789") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("15802468993580246899358024689935.802468992"), big_decimal("-123456789012345678901234567890.123456789") * b_byte(Byte.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_byte(0)))
  }

  function testBigDecimalPShortMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(0))
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(23))
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * p_short(0))
    assertEquals(big_decimal("1"), big_decimal("1") * p_short(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * p_short(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * p_short(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * p_short(-32))
    assertEquals(big_decimal("32767"), big_decimal("1") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-32768"), big_decimal("1") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * p_short(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * p_short(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * p_short(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * p_short(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * p_short(-32))
    assertEquals(big_decimal("-32767"), big_decimal("-1") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("32768"), big_decimal("-1") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * p_short(0))
    assertEquals(big_decimal("23"), big_decimal("23") * p_short(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * p_short(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * p_short(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * p_short(-32))
    assertEquals(big_decimal("753641"), big_decimal("23") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-753664"), big_decimal("23") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * p_short(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * p_short(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * p_short(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * p_short(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * p_short(-32))
    assertEquals(big_decimal("757671.341"), big_decimal("23.123") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-757694.464"), big_decimal("23.123") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * p_short(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * p_short(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * p_short(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * p_short(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * p_short(-32))
    assertEquals(big_decimal("-1048544"), big_decimal("-32") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1048576"), big_decimal("-32") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * p_short(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * p_short(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * p_short(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * p_short(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * p_short(-32))
    assertEquals(big_decimal("-1063485.752"), big_decimal("-32.456") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1063518.208"), big_decimal("-32.456") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * p_short(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_short(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_short(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * p_short(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * p_short(-32))
    assertEquals(big_decimal("4045308605567530860556753086055675.308605163"), big_decimal("123456789012345678901234567890.123456789") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-4045432062356543206235654320623565.432061952"), big_decimal("123456789012345678901234567890.123456789") * p_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * p_short(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_short(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_short(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * p_short(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * p_short(-32))
    assertEquals(big_decimal("-4045308605567530860556753086055675.308605163"), big_decimal("-123456789012345678901234567890.123456789") * p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("4045432062356543206235654320623565.432061952"), big_decimal("-123456789012345678901234567890.123456789") * p_short(Short.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_short(0)))
  }

  function testBigDecimalShortMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(0))
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(23))
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * b_short(0))
    assertEquals(big_decimal("1"), big_decimal("1") * b_short(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * b_short(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * b_short(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * b_short(-32))
    assertEquals(big_decimal("32767"), big_decimal("1") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-32768"), big_decimal("1") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * b_short(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * b_short(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * b_short(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * b_short(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * b_short(-32))
    assertEquals(big_decimal("-32767"), big_decimal("-1") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("32768"), big_decimal("-1") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * b_short(0))
    assertEquals(big_decimal("23"), big_decimal("23") * b_short(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * b_short(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * b_short(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * b_short(-32))
    assertEquals(big_decimal("753641"), big_decimal("23") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-753664"), big_decimal("23") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * b_short(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * b_short(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * b_short(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * b_short(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * b_short(-32))
    assertEquals(big_decimal("757671.341"), big_decimal("23.123") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-757694.464"), big_decimal("23.123") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * b_short(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * b_short(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * b_short(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * b_short(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * b_short(-32))
    assertEquals(big_decimal("-1048544"), big_decimal("-32") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1048576"), big_decimal("-32") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * b_short(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * b_short(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * b_short(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * b_short(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * b_short(-32))
    assertEquals(big_decimal("-1063485.752"), big_decimal("-32.456") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1063518.208"), big_decimal("-32.456") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * b_short(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_short(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_short(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * b_short(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * b_short(-32))
    assertEquals(big_decimal("4045308605567530860556753086055675.308605163"), big_decimal("123456789012345678901234567890.123456789") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-4045432062356543206235654320623565.432061952"), big_decimal("123456789012345678901234567890.123456789") * b_short(Short.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * b_short(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_short(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_short(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * b_short(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * b_short(-32))
    assertEquals(big_decimal("-4045308605567530860556753086055675.308605163"), big_decimal("-123456789012345678901234567890.123456789") * b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("4045432062356543206235654320623565.432061952"), big_decimal("-123456789012345678901234567890.123456789") * b_short(Short.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_short(0)))
  }

  function testBigDecimalPCharMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * p_char(0))
    assertEquals(big_decimal("0"), big_decimal("0") * p_char(1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_char(23))
    assertEquals(big_decimal("0"), big_decimal("0") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * p_char(0))
    assertEquals(big_decimal("1"), big_decimal("1") * p_char(1))
    assertEquals(big_decimal("23"), big_decimal("1") * p_char(23))
    assertEquals(big_decimal("65535"), big_decimal("1") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * p_char(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * p_char(1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * p_char(23))
    assertEquals(big_decimal("-65535"), big_decimal("-1") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * p_char(0))
    assertEquals(big_decimal("23"), big_decimal("23") * p_char(1))
    assertEquals(big_decimal("529"), big_decimal("23") * p_char(23))
    assertEquals(big_decimal("1507305"), big_decimal("23") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * p_char(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * p_char(1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * p_char(23))
    assertEquals(big_decimal("1515365.805"), big_decimal("23.123") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * p_char(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * p_char(1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * p_char(23))
    assertEquals(big_decimal("-2097120"), big_decimal("-32") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * p_char(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * p_char(1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * p_char(23))
    assertEquals(big_decimal("-2127003.960"), big_decimal("-32.456") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * p_char(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_char(1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * p_char(23))
    assertEquals(big_decimal("8090740667924074066792407406679240.740667115"), big_decimal("123456789012345678901234567890.123456789") * p_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * p_char(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_char(1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * p_char(23))
    assertEquals(big_decimal("-8090740667924074066792407406679240.740667115"), big_decimal("-123456789012345678901234567890.123456789") * p_char(Character.MAX_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_char(0)))
  }

  function testBigDecimalCharacterMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * b_char(0))
    assertEquals(big_decimal("0"), big_decimal("0") * b_char(1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_char(23))
    assertEquals(big_decimal("0"), big_decimal("0") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * b_char(0))
    assertEquals(big_decimal("1"), big_decimal("1") * b_char(1))
    assertEquals(big_decimal("23"), big_decimal("1") * b_char(23))
    assertEquals(big_decimal("65535"), big_decimal("1") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * b_char(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * b_char(1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * b_char(23))
    assertEquals(big_decimal("-65535"), big_decimal("-1") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * b_char(0))
    assertEquals(big_decimal("23"), big_decimal("23") * b_char(1))
    assertEquals(big_decimal("529"), big_decimal("23") * b_char(23))
    assertEquals(big_decimal("1507305"), big_decimal("23") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * b_char(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * b_char(1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * b_char(23))
    assertEquals(big_decimal("1515365.805"), big_decimal("23.123") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * b_char(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * b_char(1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * b_char(23))
    assertEquals(big_decimal("-2097120"), big_decimal("-32") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * b_char(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * b_char(1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * b_char(23))
    assertEquals(big_decimal("-2127003.960"), big_decimal("-32.456") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * b_char(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_char(1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * b_char(23))
    assertEquals(big_decimal("8090740667924074066792407406679240.740667115"), big_decimal("123456789012345678901234567890.123456789") * b_char(Character.MAX_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * b_char(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_char(1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * b_char(23))
    assertEquals(big_decimal("-8090740667924074066792407406679240.740667115"), big_decimal("-123456789012345678901234567890.123456789") * b_char(Character.MAX_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_char(0)))
  }

  function testBigDecimalPIntMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(0))
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(23))
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * p_int(0))
    assertEquals(big_decimal("1"), big_decimal("1") * p_int(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * p_int(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * p_int(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * p_int(-32))
    assertEquals(big_decimal("2147483647"), big_decimal("1") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-2147483648"), big_decimal("1") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * p_int(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * p_int(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * p_int(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * p_int(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * p_int(-32))
    assertEquals(big_decimal("-2147483647"), big_decimal("-1") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("2147483648"), big_decimal("-1") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * p_int(0))
    assertEquals(big_decimal("23"), big_decimal("23") * p_int(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * p_int(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * p_int(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * p_int(-32))
    assertEquals(big_decimal("49392123881"), big_decimal("23") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-49392123904"), big_decimal("23") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * p_int(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * p_int(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * p_int(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * p_int(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * p_int(-32))
    assertEquals(big_decimal("49656264369.581"), big_decimal("23.123") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-49656264392.704"), big_decimal("23.123") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * p_int(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * p_int(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * p_int(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * p_int(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * p_int(-32))
    assertEquals(big_decimal("-68719476704"), big_decimal("-32") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("68719476736"), big_decimal("-32") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * p_int(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * p_int(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * p_int(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * p_int(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * p_int(-32))
    assertEquals(big_decimal("-69698729247.032"), big_decimal("-32.456") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("69698729279.488"), big_decimal("-32.456") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * p_int(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_int(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_int(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * p_int(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * p_int(-32))
    assertEquals(big_decimal("265121435515141626551514162655151416265.488629483"), big_decimal("123456789012345678901234567890.123456789") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-265121435638598415563859841556385984155.612086272"), big_decimal("123456789012345678901234567890.123456789") * p_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * p_int(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_int(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_int(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * p_int(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * p_int(-32))
    assertEquals(big_decimal("-265121435515141626551514162655151416265.488629483"), big_decimal("-123456789012345678901234567890.123456789") * p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("265121435638598415563859841556385984155.612086272"), big_decimal("-123456789012345678901234567890.123456789") * p_int(Integer.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_int(0)))
  }

  function testBigDecimalIntegerMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(0))
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(23))
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * b_int(0))
    assertEquals(big_decimal("1"), big_decimal("1") * b_int(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * b_int(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * b_int(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * b_int(-32))
    assertEquals(big_decimal("2147483647"), big_decimal("1") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-2147483648"), big_decimal("1") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * b_int(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * b_int(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * b_int(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * b_int(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * b_int(-32))
    assertEquals(big_decimal("-2147483647"), big_decimal("-1") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("2147483648"), big_decimal("-1") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * b_int(0))
    assertEquals(big_decimal("23"), big_decimal("23") * b_int(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * b_int(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * b_int(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * b_int(-32))
    assertEquals(big_decimal("49392123881"), big_decimal("23") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-49392123904"), big_decimal("23") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * b_int(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * b_int(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * b_int(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * b_int(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * b_int(-32))
    assertEquals(big_decimal("49656264369.581"), big_decimal("23.123") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-49656264392.704"), big_decimal("23.123") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * b_int(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * b_int(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * b_int(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * b_int(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * b_int(-32))
    assertEquals(big_decimal("-68719476704"), big_decimal("-32") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("68719476736"), big_decimal("-32") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * b_int(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * b_int(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * b_int(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * b_int(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * b_int(-32))
    assertEquals(big_decimal("-69698729247.032"), big_decimal("-32.456") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("69698729279.488"), big_decimal("-32.456") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * b_int(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_int(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_int(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * b_int(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * b_int(-32))
    assertEquals(big_decimal("265121435515141626551514162655151416265.488629483"), big_decimal("123456789012345678901234567890.123456789") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-265121435638598415563859841556385984155.612086272"), big_decimal("123456789012345678901234567890.123456789") * b_int(Integer.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * b_int(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_int(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_int(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * b_int(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * b_int(-32))
    assertEquals(big_decimal("-265121435515141626551514162655151416265.488629483"), big_decimal("-123456789012345678901234567890.123456789") * b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("265121435638598415563859841556385984155.612086272"), big_decimal("-123456789012345678901234567890.123456789") * b_int(Integer.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_int(0)))
  }

  function testBigDecimalPLongMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(0))
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(23))
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * p_long(0))
    assertEquals(big_decimal("1"), big_decimal("1") * p_long(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * p_long(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * p_long(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * p_long(-32))
    assertEquals(big_decimal("9223372036854775807"), big_decimal("1") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-9223372036854775808"), big_decimal("1") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * p_long(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * p_long(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * p_long(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * p_long(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * p_long(-32))
    assertEquals(big_decimal("-9223372036854775807"), big_decimal("-1") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("9223372036854775808"), big_decimal("-1") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * p_long(0))
    assertEquals(big_decimal("23"), big_decimal("23") * p_long(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * p_long(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * p_long(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * p_long(-32))
    assertEquals(big_decimal("212137556847659843561"), big_decimal("23") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-212137556847659843584"), big_decimal("23") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * p_long(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * p_long(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * p_long(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * p_long(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * p_long(-32))
    assertEquals(big_decimal("213272031608192980985.261"), big_decimal("23.123") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-213272031608192981008.384"), big_decimal("23.123") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * p_long(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * p_long(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * p_long(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * p_long(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * p_long(-32))
    assertEquals(big_decimal("-295147905179352825824"), big_decimal("-32") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("295147905179352825856"), big_decimal("-32") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * p_long(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * p_long(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * p_long(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * p_long(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * p_long(-32))
    assertEquals(big_decimal("-299353762828158603591.992"), big_decimal("-32.456") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("299353762828158603624.448"), big_decimal("-32.456") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * p_long(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_long(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * p_long(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * p_long(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * p_long(-32))
    assertEquals(big_decimal("1138687895536349070000738630000073862999893517510.447103723"), big_decimal("123456789012345678901234567890.123456789") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-1138687895536349070124195419012419541901128085400.570560512"), big_decimal("123456789012345678901234567890.123456789") * p_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * p_long(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_long(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * p_long(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * p_long(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * p_long(-32))
    assertEquals(big_decimal("-1138687895536349070000738630000073862999893517510.447103723"), big_decimal("-123456789012345678901234567890.123456789") * p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1138687895536349070124195419012419541901128085400.570560512"), big_decimal("-123456789012345678901234567890.123456789") * p_long(Long.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_long(0)))
  }

  function testBigDecimalLongMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(0))
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(-1))
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(23))
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(-32))
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("1") * b_long(0))
    assertEquals(big_decimal("1"), big_decimal("1") * b_long(1))
    assertEquals(big_decimal("-1"), big_decimal("1") * b_long(-1))
    assertEquals(big_decimal("23"), big_decimal("1") * b_long(23))
    assertEquals(big_decimal("-32"), big_decimal("1") * b_long(-32))
    assertEquals(big_decimal("9223372036854775807"), big_decimal("1") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-9223372036854775808"), big_decimal("1") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-1") * b_long(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") * b_long(1))
    assertEquals(big_decimal("1"), big_decimal("-1") * b_long(-1))
    assertEquals(big_decimal("-23"), big_decimal("-1") * b_long(23))
    assertEquals(big_decimal("32"), big_decimal("-1") * b_long(-32))
    assertEquals(big_decimal("-9223372036854775807"), big_decimal("-1") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("9223372036854775808"), big_decimal("-1") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("23") * b_long(0))
    assertEquals(big_decimal("23"), big_decimal("23") * b_long(1))
    assertEquals(big_decimal("-23"), big_decimal("23") * b_long(-1))
    assertEquals(big_decimal("529"), big_decimal("23") * b_long(23))
    assertEquals(big_decimal("-736"), big_decimal("23") * b_long(-32))
    assertEquals(big_decimal("212137556847659843561"), big_decimal("23") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-212137556847659843584"), big_decimal("23") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * b_long(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * b_long(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * b_long(-1))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * b_long(23))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * b_long(-32))
    assertEquals(big_decimal("213272031608192980985.261"), big_decimal("23.123") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-213272031608192981008.384"), big_decimal("23.123") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0"), big_decimal("-32") * b_long(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") * b_long(1))
    assertEquals(big_decimal("32"), big_decimal("-32") * b_long(-1))
    assertEquals(big_decimal("-736"), big_decimal("-32") * b_long(23))
    assertEquals(big_decimal("1024"), big_decimal("-32") * b_long(-32))
    assertEquals(big_decimal("-295147905179352825824"), big_decimal("-32") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("295147905179352825856"), big_decimal("-32") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * b_long(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * b_long(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * b_long(-1))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * b_long(23))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * b_long(-32))
    assertEquals(big_decimal("-299353762828158603591.992"), big_decimal("-32.456") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("299353762828158603624.448"), big_decimal("-32.456") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * b_long(0))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_long(1))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * b_long(-1))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * b_long(23))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * b_long(-32))
    assertEquals(big_decimal("1138687895536349070000738630000073862999893517510.447103723"), big_decimal("123456789012345678901234567890.123456789") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-1138687895536349070124195419012419541901128085400.570560512"), big_decimal("123456789012345678901234567890.123456789") * b_long(Long.MIN_VALUE))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * b_long(0))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_long(1))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * b_long(-1))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * b_long(23))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * b_long(-32))
    assertEquals(big_decimal("-1138687895536349070000738630000073862999893517510.447103723"), big_decimal("-123456789012345678901234567890.123456789") * b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1138687895536349070124195419012419541901128085400.570560512"), big_decimal("-123456789012345678901234567890.123456789") * b_long(Long.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_long(0)))
  }

  function testBigDecimalPFloatMultiplication() {
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_float(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_float(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * p_float(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_float(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.NaN_))
    assertEquals(big_decimal("0E+31"), big_decimal("0") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E-46"), big_decimal("0") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("1") * p_float(0.0))
    assertEquals(big_decimal("1.0"), big_decimal("1") * p_float(1.0))
    assertEquals(big_decimal("-1.0"), big_decimal("1") * p_float(-1.0))
    assertEquals(big_decimal("23.0"), big_decimal("1") * p_float(23.0))
    assertEquals(big_decimal("23.123"), big_decimal("1") * p_float(23.123))
    assertEquals(big_decimal("-32.0"), big_decimal("1") * p_float(-32.0))
    assertEquals(big_decimal("-32.456"), big_decimal("1") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.NaN_))
    assertEquals(big_decimal("3.4028235E+38"), big_decimal("1") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.4E-45"), big_decimal("1") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-1") * p_float(0.0))
    assertEquals(big_decimal("-1.0"), big_decimal("-1") * p_float(1.0))
    assertEquals(big_decimal("1.0"), big_decimal("-1") * p_float(-1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("-1") * p_float(23.0))
    assertEquals(big_decimal("-23.123"), big_decimal("-1") * p_float(23.123))
    assertEquals(big_decimal("32.0"), big_decimal("-1") * p_float(-32.0))
    assertEquals(big_decimal("32.456"), big_decimal("-1") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.NaN_))
    assertEquals(big_decimal("-3.4028235E+38"), big_decimal("-1") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.4E-45"), big_decimal("-1") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("23") * p_float(0.0))
    assertEquals(big_decimal("23.0"), big_decimal("23") * p_float(1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("23") * p_float(-1.0))
    assertEquals(big_decimal("529.0"), big_decimal("23") * p_float(23.0))
    assertEquals(big_decimal("531.829"), big_decimal("23") * p_float(23.123))
    assertEquals(big_decimal("-736.0"), big_decimal("23") * p_float(-32.0))
    assertEquals(big_decimal("-746.488"), big_decimal("23") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.NaN_))
    assertEquals(big_decimal("7.82649405E+39"), big_decimal("23") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("3.22E-44"), big_decimal("23") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("23.123") * p_float(0.0))
    assertEquals(big_decimal("23.1230"), big_decimal("23.123") * p_float(1.0))
    assertEquals(big_decimal("-23.1230"), big_decimal("23.123") * p_float(-1.0))
    assertEquals(big_decimal("531.8290"), big_decimal("23.123") * p_float(23.0))
    assertEquals(big_decimal("534.673129"), big_decimal("23.123") * p_float(23.123))
    assertEquals(big_decimal("-739.9360"), big_decimal("23.123") * p_float(-32.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("23.123") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.NaN_))
    assertEquals(big_decimal("7.86834877905E+39"), big_decimal("23.123") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("3.23722E-44"), big_decimal("23.123") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-32") * p_float(0.0))
    assertEquals(big_decimal("-32.0"), big_decimal("-32") * p_float(1.0))
    assertEquals(big_decimal("32.0"), big_decimal("-32") * p_float(-1.0))
    assertEquals(big_decimal("-736.0"), big_decimal("-32") * p_float(23.0))
    assertEquals(big_decimal("-739.936"), big_decimal("-32") * p_float(23.123))
    assertEquals(big_decimal("1024.0"), big_decimal("-32") * p_float(-32.0))
    assertEquals(big_decimal("1038.592"), big_decimal("-32") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.NaN_))
    assertEquals(big_decimal("-1.088903520E+40"), big_decimal("-32") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-4.48E-44"), big_decimal("-32") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("-32.456") * p_float(0.0))
    assertEquals(big_decimal("-32.4560"), big_decimal("-32.456") * p_float(1.0))
    assertEquals(big_decimal("32.4560"), big_decimal("-32.456") * p_float(-1.0))
    assertEquals(big_decimal("-746.4880"), big_decimal("-32.456") * p_float(23.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("-32.456") * p_float(23.123))
    assertEquals(big_decimal("1038.5920"), big_decimal("-32.456") * p_float(-32.0))
    assertEquals(big_decimal("1053.391936"), big_decimal("-32.456") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.NaN_))
    assertEquals(big_decimal("-1.104420395160E+40"), big_decimal("-32.456") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-4.54384E-44"), big_decimal("-32.456") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("123456789012345678901234567890.123456789") * p_float(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * p_float(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * p_float(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061472.8395061470"), big_decimal("123456789012345678901234567890.123456789") * p_float(23.0))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), big_decimal("123456789012345678901234567890.123456789") * p_float(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172483.9506172480"), big_decimal("123456789012345678901234567890.123456789") * p_float(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), big_decimal("123456789012345678901234567890.123456789") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(big_decimal("4.201016628857516662885751666288575166628437415E+67"), big_decimal("123456789012345678901234567890.123456789") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.728395046172839504617283950461728395046E-16"), big_decimal("123456789012345678901234567890.123456789") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("-123456789012345678901234567890.123456789") * p_float(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * p_float(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * p_float(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061472.8395061470"), big_decimal("-123456789012345678901234567890.123456789") * p_float(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), big_decimal("-123456789012345678901234567890.123456789") * p_float(23.123))
    assertEquals(big_decimal("3950617248395061724839506172483.9506172480"), big_decimal("-123456789012345678901234567890.123456789") * p_float(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), big_decimal("-123456789012345678901234567890.123456789") * p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(big_decimal("-4.201016628857516662885751666288575166628437415E+67"), big_decimal("-123456789012345678901234567890.123456789") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.728395046172839504617283950461728395046E-16"), big_decimal("-123456789012345678901234567890.123456789") * p_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_float(0.0)))
  }

  function testBigDecimalFloatMultiplication() {
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_float(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_float(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * b_float(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_float(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.NaN_))
    assertEquals(big_decimal("0E+31"), big_decimal("0") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E-46"), big_decimal("0") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("1") * b_float(0.0))
    assertEquals(big_decimal("1.0"), big_decimal("1") * b_float(1.0))
    assertEquals(big_decimal("-1.0"), big_decimal("1") * b_float(-1.0))
    assertEquals(big_decimal("23.0"), big_decimal("1") * b_float(23.0))
    assertEquals(big_decimal("23.123"), big_decimal("1") * b_float(23.123))
    assertEquals(big_decimal("-32.0"), big_decimal("1") * b_float(-32.0))
    assertEquals(big_decimal("-32.456"), big_decimal("1") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.NaN_))
    assertEquals(big_decimal("3.4028235E+38"), big_decimal("1") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.4E-45"), big_decimal("1") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-1") * b_float(0.0))
    assertEquals(big_decimal("-1.0"), big_decimal("-1") * b_float(1.0))
    assertEquals(big_decimal("1.0"), big_decimal("-1") * b_float(-1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("-1") * b_float(23.0))
    assertEquals(big_decimal("-23.123"), big_decimal("-1") * b_float(23.123))
    assertEquals(big_decimal("32.0"), big_decimal("-1") * b_float(-32.0))
    assertEquals(big_decimal("32.456"), big_decimal("-1") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.NaN_))
    assertEquals(big_decimal("-3.4028235E+38"), big_decimal("-1") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.4E-45"), big_decimal("-1") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("23") * b_float(0.0))
    assertEquals(big_decimal("23.0"), big_decimal("23") * b_float(1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("23") * b_float(-1.0))
    assertEquals(big_decimal("529.0"), big_decimal("23") * b_float(23.0))
    assertEquals(big_decimal("531.829"), big_decimal("23") * b_float(23.123))
    assertEquals(big_decimal("-736.0"), big_decimal("23") * b_float(-32.0))
    assertEquals(big_decimal("-746.488"), big_decimal("23") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.NaN_))
    assertEquals(big_decimal("7.82649405E+39"), big_decimal("23") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("3.22E-44"), big_decimal("23") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("23.123") * b_float(0.0))
    assertEquals(big_decimal("23.1230"), big_decimal("23.123") * b_float(1.0))
    assertEquals(big_decimal("-23.1230"), big_decimal("23.123") * b_float(-1.0))
    assertEquals(big_decimal("531.8290"), big_decimal("23.123") * b_float(23.0))
    assertEquals(big_decimal("534.673129"), big_decimal("23.123") * b_float(23.123))
    assertEquals(big_decimal("-739.9360"), big_decimal("23.123") * b_float(-32.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("23.123") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.NaN_))
    assertEquals(big_decimal("7.86834877905E+39"), big_decimal("23.123") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("3.23722E-44"), big_decimal("23.123") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-32") * b_float(0.0))
    assertEquals(big_decimal("-32.0"), big_decimal("-32") * b_float(1.0))
    assertEquals(big_decimal("32.0"), big_decimal("-32") * b_float(-1.0))
    assertEquals(big_decimal("-736.0"), big_decimal("-32") * b_float(23.0))
    assertEquals(big_decimal("-739.936"), big_decimal("-32") * b_float(23.123))
    assertEquals(big_decimal("1024.0"), big_decimal("-32") * b_float(-32.0))
    assertEquals(big_decimal("1038.592"), big_decimal("-32") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.NaN_))
    assertEquals(big_decimal("-1.088903520E+40"), big_decimal("-32") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-4.48E-44"), big_decimal("-32") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("-32.456") * b_float(0.0))
    assertEquals(big_decimal("-32.4560"), big_decimal("-32.456") * b_float(1.0))
    assertEquals(big_decimal("32.4560"), big_decimal("-32.456") * b_float(-1.0))
    assertEquals(big_decimal("-746.4880"), big_decimal("-32.456") * b_float(23.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("-32.456") * b_float(23.123))
    assertEquals(big_decimal("1038.5920"), big_decimal("-32.456") * b_float(-32.0))
    assertEquals(big_decimal("1053.391936"), big_decimal("-32.456") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.NaN_))
    assertEquals(big_decimal("-1.104420395160E+40"), big_decimal("-32.456") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-4.54384E-44"), big_decimal("-32.456") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("123456789012345678901234567890.123456789") * b_float(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * b_float(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * b_float(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061472.8395061470"), big_decimal("123456789012345678901234567890.123456789") * b_float(23.0))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), big_decimal("123456789012345678901234567890.123456789") * b_float(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172483.9506172480"), big_decimal("123456789012345678901234567890.123456789") * b_float(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), big_decimal("123456789012345678901234567890.123456789") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(big_decimal("4.201016628857516662885751666288575166628437415E+67"), big_decimal("123456789012345678901234567890.123456789") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.728395046172839504617283950461728395046E-16"), big_decimal("123456789012345678901234567890.123456789") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("-123456789012345678901234567890.123456789") * b_float(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * b_float(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * b_float(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061472.8395061470"), big_decimal("-123456789012345678901234567890.123456789") * b_float(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), big_decimal("-123456789012345678901234567890.123456789") * b_float(23.123))
    assertEquals(big_decimal("3950617248395061724839506172483.9506172480"), big_decimal("-123456789012345678901234567890.123456789") * b_float(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), big_decimal("-123456789012345678901234567890.123456789") * b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(big_decimal("-4.201016628857516662885751666288575166628437415E+67"), big_decimal("-123456789012345678901234567890.123456789") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.728395046172839504617283950461728395046E-16"), big_decimal("-123456789012345678901234567890.123456789") * b_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_float(0.0)))
  }

  function testBigDecimalPDoubleMultiplication() {
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_double(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_double(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * p_double(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("0") * p_double(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.NaN_))
    assertEquals(big_decimal("0E+292"), big_decimal("0") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E-325"), big_decimal("0") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("1") * p_double(0.0))
    assertEquals(big_decimal("1.0"), big_decimal("1") * p_double(1.0))
    assertEquals(big_decimal("-1.0"), big_decimal("1") * p_double(-1.0))
    assertEquals(big_decimal("23.0"), big_decimal("1") * p_double(23.0))
    assertEquals(big_decimal("23.123"), big_decimal("1") * p_double(23.123))
    assertEquals(big_decimal("-32.0"), big_decimal("1") * p_double(-32.0))
    assertEquals(big_decimal("-32.456"), big_decimal("1") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.NaN_))
    assertEquals(big_decimal("1.7976931348623157E+308"), big_decimal("1") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.9E-324"), big_decimal("1") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-1") * p_double(0.0))
    assertEquals(big_decimal("-1.0"), big_decimal("-1") * p_double(1.0))
    assertEquals(big_decimal("1.0"), big_decimal("-1") * p_double(-1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("-1") * p_double(23.0))
    assertEquals(big_decimal("-23.123"), big_decimal("-1") * p_double(23.123))
    assertEquals(big_decimal("32.0"), big_decimal("-1") * p_double(-32.0))
    assertEquals(big_decimal("32.456"), big_decimal("-1") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.NaN_))
    assertEquals(big_decimal("-1.7976931348623157E+308"), big_decimal("-1") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-4.9E-324"), big_decimal("-1") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("23") * p_double(0.0))
    assertEquals(big_decimal("23.0"), big_decimal("23") * p_double(1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("23") * p_double(-1.0))
    assertEquals(big_decimal("529.0"), big_decimal("23") * p_double(23.0))
    assertEquals(big_decimal("531.829"), big_decimal("23") * p_double(23.123))
    assertEquals(big_decimal("-736.0"), big_decimal("23") * p_double(-32.0))
    assertEquals(big_decimal("-746.488"), big_decimal("23") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.NaN_))
    assertEquals(big_decimal("4.13469421018332611E+309"), big_decimal("23") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("1.127E-322"), big_decimal("23") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("23.123") * p_double(0.0))
    assertEquals(big_decimal("23.1230"), big_decimal("23.123") * p_double(1.0))
    assertEquals(big_decimal("-23.1230"), big_decimal("23.123") * p_double(-1.0))
    assertEquals(big_decimal("531.8290"), big_decimal("23.123") * p_double(23.0))
    assertEquals(big_decimal("534.673129"), big_decimal("23.123") * p_double(23.123))
    assertEquals(big_decimal("-739.9360"), big_decimal("23.123") * p_double(-32.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("23.123") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.NaN_))
    assertEquals(big_decimal("4.15680583574213259311E+309"), big_decimal("23.123") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("1.133027E-322"), big_decimal("23.123") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-32") * p_double(0.0))
    assertEquals(big_decimal("-32.0"), big_decimal("-32") * p_double(1.0))
    assertEquals(big_decimal("32.0"), big_decimal("-32") * p_double(-1.0))
    assertEquals(big_decimal("-736.0"), big_decimal("-32") * p_double(23.0))
    assertEquals(big_decimal("-739.936"), big_decimal("-32") * p_double(23.123))
    assertEquals(big_decimal("1024.0"), big_decimal("-32") * p_double(-32.0))
    assertEquals(big_decimal("1038.592"), big_decimal("-32") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.NaN_))
    assertEquals(big_decimal("-5.75261803155941024E+309"), big_decimal("-32") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-1.568E-322"), big_decimal("-32") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("-32.456") * p_double(0.0))
    assertEquals(big_decimal("-32.4560"), big_decimal("-32.456") * p_double(1.0))
    assertEquals(big_decimal("32.4560"), big_decimal("-32.456") * p_double(-1.0))
    assertEquals(big_decimal("-746.4880"), big_decimal("-32.456") * p_double(23.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("-32.456") * p_double(23.123))
    assertEquals(big_decimal("1038.5920"), big_decimal("-32.456") * p_double(-32.0))
    assertEquals(big_decimal("1053.391936"), big_decimal("-32.456") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.NaN_))
    assertEquals(big_decimal("-5.83459283850913183592E+309"), big_decimal("-32.456") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-1.590344E-322"), big_decimal("-32.456") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("123456789012345678901234567890.123456789") * p_double(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * p_double(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * p_double(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061472.8395061470"), big_decimal("123456789012345678901234567890.123456789") * p_double(23.0))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), big_decimal("123456789012345678901234567890.123456789") * p_double(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172483.9506172480"), big_decimal("123456789012345678901234567890.123456789") * p_double(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), big_decimal("123456789012345678901234567890.123456789") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(big_decimal("2.219374220596391956322512195632251219563003184534262873E+337"), big_decimal("123456789012345678901234567890.123456789") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("6.049382661604938266160493826616049382661E-295"), big_decimal("123456789012345678901234567890.123456789") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("-123456789012345678901234567890.123456789") * p_double(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * p_double(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * p_double(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061472.8395061470"), big_decimal("-123456789012345678901234567890.123456789") * p_double(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), big_decimal("-123456789012345678901234567890.123456789") * p_double(23.123))
    assertEquals(big_decimal("3950617248395061724839506172483.9506172480"), big_decimal("-123456789012345678901234567890.123456789") * p_double(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), big_decimal("-123456789012345678901234567890.123456789") * p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(big_decimal("-2.219374220596391956322512195632251219563003184534262873E+337"), big_decimal("-123456789012345678901234567890.123456789") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.049382661604938266160493826616049382661E-295"), big_decimal("-123456789012345678901234567890.123456789") * p_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * p_double(0.0)))
  }

  function testBigDecimalDoubleMultiplication() {
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_double(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_double(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * b_double(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("0") * b_double(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("0") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.NaN_))
    assertEquals(big_decimal("0E+292"), big_decimal("0") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E-325"), big_decimal("0") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("1") * b_double(0.0))
    assertEquals(big_decimal("1.0"), big_decimal("1") * b_double(1.0))
    assertEquals(big_decimal("-1.0"), big_decimal("1") * b_double(-1.0))
    assertEquals(big_decimal("23.0"), big_decimal("1") * b_double(23.0))
    assertEquals(big_decimal("23.123"), big_decimal("1") * b_double(23.123))
    assertEquals(big_decimal("-32.0"), big_decimal("1") * b_double(-32.0))
    assertEquals(big_decimal("-32.456"), big_decimal("1") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.NaN_))
    assertEquals(big_decimal("1.7976931348623157E+308"), big_decimal("1") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.9E-324"), big_decimal("1") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-1") * b_double(0.0))
    assertEquals(big_decimal("-1.0"), big_decimal("-1") * b_double(1.0))
    assertEquals(big_decimal("1.0"), big_decimal("-1") * b_double(-1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("-1") * b_double(23.0))
    assertEquals(big_decimal("-23.123"), big_decimal("-1") * b_double(23.123))
    assertEquals(big_decimal("32.0"), big_decimal("-1") * b_double(-32.0))
    assertEquals(big_decimal("32.456"), big_decimal("-1") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.NaN_))
    assertEquals(big_decimal("-1.7976931348623157E+308"), big_decimal("-1") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-4.9E-324"), big_decimal("-1") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("23") * b_double(0.0))
    assertEquals(big_decimal("23.0"), big_decimal("23") * b_double(1.0))
    assertEquals(big_decimal("-23.0"), big_decimal("23") * b_double(-1.0))
    assertEquals(big_decimal("529.0"), big_decimal("23") * b_double(23.0))
    assertEquals(big_decimal("531.829"), big_decimal("23") * b_double(23.123))
    assertEquals(big_decimal("-736.0"), big_decimal("23") * b_double(-32.0))
    assertEquals(big_decimal("-746.488"), big_decimal("23") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.NaN_))
    assertEquals(big_decimal("4.13469421018332611E+309"), big_decimal("23") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("1.127E-322"), big_decimal("23") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("23.123") * b_double(0.0))
    assertEquals(big_decimal("23.1230"), big_decimal("23.123") * b_double(1.0))
    assertEquals(big_decimal("-23.1230"), big_decimal("23.123") * b_double(-1.0))
    assertEquals(big_decimal("531.8290"), big_decimal("23.123") * b_double(23.0))
    assertEquals(big_decimal("534.673129"), big_decimal("23.123") * b_double(23.123))
    assertEquals(big_decimal("-739.9360"), big_decimal("23.123") * b_double(-32.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("23.123") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.NaN_))
    assertEquals(big_decimal("4.15680583574213259311E+309"), big_decimal("23.123") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("1.133027E-322"), big_decimal("23.123") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_decimal("-32") * b_double(0.0))
    assertEquals(big_decimal("-32.0"), big_decimal("-32") * b_double(1.0))
    assertEquals(big_decimal("32.0"), big_decimal("-32") * b_double(-1.0))
    assertEquals(big_decimal("-736.0"), big_decimal("-32") * b_double(23.0))
    assertEquals(big_decimal("-739.936"), big_decimal("-32") * b_double(23.123))
    assertEquals(big_decimal("1024.0"), big_decimal("-32") * b_double(-32.0))
    assertEquals(big_decimal("1038.592"), big_decimal("-32") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.NaN_))
    assertEquals(big_decimal("-5.75261803155941024E+309"), big_decimal("-32") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-1.568E-322"), big_decimal("-32") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0000"), big_decimal("-32.456") * b_double(0.0))
    assertEquals(big_decimal("-32.4560"), big_decimal("-32.456") * b_double(1.0))
    assertEquals(big_decimal("32.4560"), big_decimal("-32.456") * b_double(-1.0))
    assertEquals(big_decimal("-746.4880"), big_decimal("-32.456") * b_double(23.0))
    assertEquals(big_decimal("-750.480088"), big_decimal("-32.456") * b_double(23.123))
    assertEquals(big_decimal("1038.5920"), big_decimal("-32.456") * b_double(-32.0))
    assertEquals(big_decimal("1053.391936"), big_decimal("-32.456") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.NaN_))
    assertEquals(big_decimal("-5.83459283850913183592E+309"), big_decimal("-32.456") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-1.590344E-322"), big_decimal("-32.456") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("123456789012345678901234567890.123456789") * b_double(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * b_double(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("123456789012345678901234567890.123456789") * b_double(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061472.8395061470"), big_decimal("123456789012345678901234567890.123456789") * b_double(23.0))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), big_decimal("123456789012345678901234567890.123456789") * b_double(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172483.9506172480"), big_decimal("123456789012345678901234567890.123456789") * b_double(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), big_decimal("123456789012345678901234567890.123456789") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(big_decimal("2.219374220596391956322512195632251219563003184534262873E+337"), big_decimal("123456789012345678901234567890.123456789") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("6.049382661604938266160493826616049382661E-295"), big_decimal("123456789012345678901234567890.123456789") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0E-10"), big_decimal("-123456789012345678901234567890.123456789") * b_double(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * b_double(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890"), big_decimal("-123456789012345678901234567890.123456789") * b_double(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061472.8395061470"), big_decimal("-123456789012345678901234567890.123456789") * b_double(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), big_decimal("-123456789012345678901234567890.123456789") * b_double(23.123))
    assertEquals(big_decimal("3950617248395061724839506172483.9506172480"), big_decimal("-123456789012345678901234567890.123456789") * b_double(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), big_decimal("-123456789012345678901234567890.123456789") * b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(big_decimal("-2.219374220596391956322512195632251219563003184534262873E+337"), big_decimal("-123456789012345678901234567890.123456789") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.049382661604938266160493826616049382661E-295"), big_decimal("-123456789012345678901234567890.123456789") * b_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * b_double(0.0)))
  }

  function testBigDecimalBigIntegerMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("-1"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("23"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("-32"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0"), big_decimal("1") * big_int("0"))
    assertEquals(big_decimal("1"), big_decimal("1") * big_int("1"))
    assertEquals(big_decimal("-1"), big_decimal("1") * big_int("-1"))
    assertEquals(big_decimal("23"), big_decimal("1") * big_int("23"))
    assertEquals(big_decimal("-32"), big_decimal("1") * big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_decimal("1") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567890"), big_decimal("1") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0"), big_decimal("-1") * big_int("0"))
    assertEquals(big_decimal("-1"), big_decimal("-1") * big_int("1"))
    assertEquals(big_decimal("1"), big_decimal("-1") * big_int("-1"))
    assertEquals(big_decimal("-23"), big_decimal("-1") * big_int("23"))
    assertEquals(big_decimal("32"), big_decimal("-1") * big_int("-32"))
    assertEquals(big_decimal("-123456789012345678901234567890"), big_decimal("-1") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_decimal("-1") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0"), big_decimal("23") * big_int("0"))
    assertEquals(big_decimal("23"), big_decimal("23") * big_int("1"))
    assertEquals(big_decimal("-23"), big_decimal("23") * big_int("-1"))
    assertEquals(big_decimal("529"), big_decimal("23") * big_int("23"))
    assertEquals(big_decimal("-736"), big_decimal("23") * big_int("-32"))
    assertEquals(big_decimal("2839506147283950614728395061470"), big_decimal("23") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-2839506147283950614728395061470"), big_decimal("23") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * big_int("0"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * big_int("1"))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * big_int("-1"))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * big_int("23"))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * big_int("-32"))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), big_decimal("23.123") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), big_decimal("23.123") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0"), big_decimal("-32") * big_int("0"))
    assertEquals(big_decimal("-32"), big_decimal("-32") * big_int("1"))
    assertEquals(big_decimal("32"), big_decimal("-32") * big_int("-1"))
    assertEquals(big_decimal("-736"), big_decimal("-32") * big_int("23"))
    assertEquals(big_decimal("1024"), big_decimal("-32") * big_int("-32"))
    assertEquals(big_decimal("-3950617248395061724839506172480"), big_decimal("-32") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("3950617248395061724839506172480"), big_decimal("-32") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * big_int("0"))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * big_int("1"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * big_int("-1"))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * big_int("23"))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * big_int("-32"))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), big_decimal("-32.456") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), big_decimal("-32.456") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * big_int("0"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * big_int("1"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * big_int("-1"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * big_int("23"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * big_int("-32"))
    assertEquals(big_decimal("15241578753238836750495351562551440366253619878750190519987.501905210"), big_decimal("123456789012345678901234567890.123456789") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-15241578753238836750495351562551440366253619878750190519987.501905210"), big_decimal("123456789012345678901234567890.123456789") * big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * big_int("0"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * big_int("1"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * big_int("-1"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * big_int("23"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * big_int("-32"))
    assertEquals(big_decimal("-15241578753238836750495351562551440366253619878750190519987.501905210"), big_decimal("-123456789012345678901234567890.123456789") * big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("15241578753238836750495351562551440366253619878750190519987.501905210"), big_decimal("-123456789012345678901234567890.123456789") * big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * big_int("0")))
  }

  function testBigDecimalBigDecimalMultiplication() {
    assertEquals(big_decimal("0"), big_decimal("0") * big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_decimal("-1"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_decimal("23"))
    assertEquals(big_decimal("0.000"), big_decimal("0") * big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_decimal("0") * big_decimal("-32"))
    assertEquals(big_decimal("0.000"), big_decimal("0") * big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), big_decimal("0") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), big_decimal("0") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_decimal("1") * big_decimal("0"))
    assertEquals(big_decimal("1"), big_decimal("1") * big_decimal("1"))
    assertEquals(big_decimal("-1"), big_decimal("1") * big_decimal("-1"))
    assertEquals(big_decimal("23"), big_decimal("1") * big_decimal("23"))
    assertEquals(big_decimal("23.123"), big_decimal("1") * big_decimal("23.123"))
    assertEquals(big_decimal("-32"), big_decimal("1") * big_decimal("-32"))
    assertEquals(big_decimal("-32.456"), big_decimal("1") * big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("1") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("1") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_decimal("-1") * big_decimal("0"))
    assertEquals(big_decimal("-1"), big_decimal("-1") * big_decimal("1"))
    assertEquals(big_decimal("1"), big_decimal("-1") * big_decimal("-1"))
    assertEquals(big_decimal("-23"), big_decimal("-1") * big_decimal("23"))
    assertEquals(big_decimal("-23.123"), big_decimal("-1") * big_decimal("23.123"))
    assertEquals(big_decimal("32"), big_decimal("-1") * big_decimal("-32"))
    assertEquals(big_decimal("32.456"), big_decimal("-1") * big_decimal("-32.456"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-1") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-1") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_decimal("23") * big_decimal("0"))
    assertEquals(big_decimal("23"), big_decimal("23") * big_decimal("1"))
    assertEquals(big_decimal("-23"), big_decimal("23") * big_decimal("-1"))
    assertEquals(big_decimal("529"), big_decimal("23") * big_decimal("23"))
    assertEquals(big_decimal("531.829"), big_decimal("23") * big_decimal("23.123"))
    assertEquals(big_decimal("-736"), big_decimal("23") * big_decimal("-32"))
    assertEquals(big_decimal("-746.488"), big_decimal("23") * big_decimal("-32.456"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("23") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("23") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.000"), big_decimal("23.123") * big_decimal("0"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") * big_decimal("1"))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") * big_decimal("-1"))
    assertEquals(big_decimal("531.829"), big_decimal("23.123") * big_decimal("23"))
    assertEquals(big_decimal("534.673129"), big_decimal("23.123") * big_decimal("23.123"))
    assertEquals(big_decimal("-739.936"), big_decimal("23.123") * big_decimal("-32"))
    assertEquals(big_decimal("-750.480088"), big_decimal("23.123") * big_decimal("-32.456"))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), big_decimal("23.123") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), big_decimal("23.123") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_decimal("-32") * big_decimal("0"))
    assertEquals(big_decimal("-32"), big_decimal("-32") * big_decimal("1"))
    assertEquals(big_decimal("32"), big_decimal("-32") * big_decimal("-1"))
    assertEquals(big_decimal("-736"), big_decimal("-32") * big_decimal("23"))
    assertEquals(big_decimal("-739.936"), big_decimal("-32") * big_decimal("23.123"))
    assertEquals(big_decimal("1024"), big_decimal("-32") * big_decimal("-32"))
    assertEquals(big_decimal("1038.592"), big_decimal("-32") * big_decimal("-32.456"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("-32") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-32") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0.000"), big_decimal("-32.456") * big_decimal("0"))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") * big_decimal("1"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") * big_decimal("-1"))
    assertEquals(big_decimal("-746.488"), big_decimal("-32.456") * big_decimal("23"))
    assertEquals(big_decimal("-750.480088"), big_decimal("-32.456") * big_decimal("23.123"))
    assertEquals(big_decimal("1038.592"), big_decimal("-32.456") * big_decimal("-32"))
    assertEquals(big_decimal("1053.391936"), big_decimal("-32.456") * big_decimal("-32.456"))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), big_decimal("-32.456") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), big_decimal("-32.456") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("0"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("1"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("-1"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("23"))
    assertEquals(big_decimal("2854691332332469133233246913323.324691332047"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("23.123"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("-32"))
    assertEquals(big_decimal("-4006913544184691354418469135441.846913543784"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("-32.456"))
    assertEquals(big_decimal("15241578753238836750495351562566681945005334557625361987875.019051998750190521"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-15241578753238836750495351562566681945005334557625361987875.019051998750190521"), big_decimal("123456789012345678901234567890.123456789") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("0"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("1"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("-1"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("23"))
    assertEquals(big_decimal("-2854691332332469133233246913323.324691332047"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("23.123"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("-32"))
    assertEquals(big_decimal("4006913544184691354418469135441.846913543784"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("-32.456"))
    assertEquals(big_decimal("-15241578753238836750495351562566681945005334557625361987875.019051998750190521"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("15241578753238836750495351562566681945005334557625361987875.019051998750190521"), big_decimal("-123456789012345678901234567890.123456789") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") * big_decimal("0")))
  }

}

