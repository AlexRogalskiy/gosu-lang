package gw.spec.core.expressions.arithmetic.remainder
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Remainder_FloatTest extends ArithmeticTestBase {

  function testFloatPByteRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_byte(0))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(1))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(-1))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(23))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(-32))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_byte(0))
    assertEquals(b_float(0.0), b_float(1.0) % p_byte(1))
    assertEquals(b_float(0.0), b_float(1.0) % p_byte(-1))
    assertEquals(b_float(1.0), b_float(1.0) % p_byte(23))
    assertEquals(b_float(1.0), b_float(1.0) % p_byte(-32))
    assertEquals(b_float(1.0), b_float(1.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_byte(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_byte(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_byte(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_byte(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_byte(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_byte(0))
    assertEquals(b_float(0.0), b_float(23.0) % p_byte(1))
    assertEquals(b_float(0.0), b_float(23.0) % p_byte(-1))
    assertEquals(b_float(0.0), b_float(23.0) % p_byte(23))
    assertEquals(b_float(23.0), b_float(23.0) % p_byte(-32))
    assertEquals(b_float(23.0), b_float(23.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_byte(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_byte(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_byte(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_byte(23))
    assertEquals(b_float(23.123), b_float(23.123) % p_byte(-32))
    assertEquals(b_float(23.123), b_float(23.123) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_byte(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_byte(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_byte(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % p_byte(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_byte(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_byte(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_byte(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_byte(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % p_byte(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_byte(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_byte(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_byte(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_byte(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % p_byte(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_byte(-32))
    assertEquals(b_float(67.0), b_float(Float.MAX_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_byte(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(Byte.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % p_byte(0)))
  }

  function testFloatByteRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_byte(0))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(1))
    assertEquals(b_float(0.0), b_float(0.0) % p_byte(-1))
    assertEquals(b_float(0.0), b_float(0.0) % b_byte(23))
    assertEquals(b_float(0.0), b_float(0.0) % b_byte(-32))
    assertEquals(b_float(0.0), b_float(0.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_byte(0))
    assertEquals(b_float(0.0), b_float(1.0) % p_byte(1))
    assertEquals(b_float(0.0), b_float(1.0) % p_byte(-1))
    assertEquals(b_float(1.0), b_float(1.0) % b_byte(23))
    assertEquals(b_float(1.0), b_float(1.0) % b_byte(-32))
    assertEquals(b_float(1.0), b_float(1.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_byte(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_byte(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_byte(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_byte(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_byte(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_byte(0))
    assertEquals(b_float(0.0), b_float(23.0) % p_byte(1))
    assertEquals(b_float(0.0), b_float(23.0) % p_byte(-1))
    assertEquals(b_float(0.0), b_float(23.0) % b_byte(23))
    assertEquals(b_float(23.0), b_float(23.0) % b_byte(-32))
    assertEquals(b_float(23.0), b_float(23.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_byte(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_byte(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_byte(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_byte(23))
    assertEquals(b_float(23.123), b_float(23.123) % b_byte(-32))
    assertEquals(b_float(23.123), b_float(23.123) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_byte(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_byte(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_byte(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % b_byte(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_byte(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_byte(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_byte(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_byte(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % b_byte(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_byte(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_byte(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_byte(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_byte(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % b_byte(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_byte(-32))
    assertEquals(b_float(67.0), b_float(Float.MAX_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_byte(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_byte(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_byte(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_byte(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_byte(Byte.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % b_byte(0)))
  }

  function testFloatPShortRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_short(0))
    assertEquals(b_float(0.0), b_float(0.0) % p_short(1))
    assertEquals(b_float(0.0), b_float(0.0) % p_short(-1))
    assertEquals(b_float(0.0), b_float(0.0) % p_short(23))
    assertEquals(b_float(0.0), b_float(0.0) % p_short(-32))
    assertEquals(b_float(0.0), b_float(0.0) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_short(0))
    assertEquals(b_float(0.0), b_float(1.0) % p_short(1))
    assertEquals(b_float(0.0), b_float(1.0) % p_short(-1))
    assertEquals(b_float(1.0), b_float(1.0) % p_short(23))
    assertEquals(b_float(1.0), b_float(1.0) % p_short(-32))
    assertEquals(b_float(1.0), b_float(1.0) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_short(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_short(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_short(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_short(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_short(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_short(0))
    assertEquals(b_float(0.0), b_float(23.0) % p_short(1))
    assertEquals(b_float(0.0), b_float(23.0) % p_short(-1))
    assertEquals(b_float(0.0), b_float(23.0) % p_short(23))
    assertEquals(b_float(23.0), b_float(23.0) % p_short(-32))
    assertEquals(b_float(23.0), b_float(23.0) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_short(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_short(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_short(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_short(23))
    assertEquals(b_float(23.123), b_float(23.123) % p_short(-32))
    assertEquals(b_float(23.123), b_float(23.123) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_short(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_short(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_short(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % p_short(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_short(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_short(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_short(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_short(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % p_short(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_short(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_short(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_short(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_short(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % p_short(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_short(-32))
    assertEquals(b_float(16639.0), b_float(Float.MAX_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_short(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_short(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_short(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_short(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_short(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_short(Short.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % p_short(0)))
  }

  function testFloatShortRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_short(0))
    assertEquals(b_float(0.0), b_float(0.0) % b_short(1))
    assertEquals(b_float(0.0), b_float(0.0) % b_short(-1))
    assertEquals(b_float(0.0), b_float(0.0) % b_short(23))
    assertEquals(b_float(0.0), b_float(0.0) % b_short(-32))
    assertEquals(b_float(0.0), b_float(0.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_short(0))
    assertEquals(b_float(0.0), b_float(1.0) % b_short(1))
    assertEquals(b_float(0.0), b_float(1.0) % b_short(-1))
    assertEquals(b_float(1.0), b_float(1.0) % b_short(23))
    assertEquals(b_float(1.0), b_float(1.0) % b_short(-32))
    assertEquals(b_float(1.0), b_float(1.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_short(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_short(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_short(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_short(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_short(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_short(0))
    assertEquals(b_float(0.0), b_float(23.0) % b_short(1))
    assertEquals(b_float(0.0), b_float(23.0) % b_short(-1))
    assertEquals(b_float(0.0), b_float(23.0) % b_short(23))
    assertEquals(b_float(23.0), b_float(23.0) % b_short(-32))
    assertEquals(b_float(23.0), b_float(23.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_short(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_short(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_short(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_short(23))
    assertEquals(b_float(23.123), b_float(23.123) % b_short(-32))
    assertEquals(b_float(23.123), b_float(23.123) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_short(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_short(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_short(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % b_short(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_short(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_short(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_short(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_short(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % b_short(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_short(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_short(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_short(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_short(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % b_short(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_short(-32))
    assertEquals(b_float(16639.0), b_float(Float.MAX_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_short(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_short(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_short(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_short(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_short(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_short(Short.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % b_short(0)))
  }

  function testFloatPCharRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_char(0))
    assertEquals(b_float(0.0), b_float(0.0) % p_char(1))
    assertEquals(b_float(0.0), b_float(0.0) % p_char(23))
    assertEquals(b_float(0.0), b_float(0.0) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_char(0))
    assertEquals(b_float(0.0), b_float(1.0) % p_char(1))
    assertEquals(b_float(1.0), b_float(1.0) % p_char(23))
    assertEquals(b_float(1.0), b_float(1.0) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_char(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_char(1))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_char(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_char(0))
    assertEquals(b_float(0.0), b_float(23.0) % p_char(1))
    assertEquals(b_float(0.0), b_float(23.0) % p_char(23))
    assertEquals(b_float(23.0), b_float(23.0) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_char(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_char(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_char(23))
    assertEquals(b_float(23.123), b_float(23.123) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_char(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_char(1))
    assertEquals(b_float(-9.0), b_float(-32.0) % p_char(23))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_char(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_char(1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % p_char(23))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_char(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_char(1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % p_char(23))
    assertEquals(b_float(65280.0), b_float(Float.MAX_VALUE) % p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_char(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_char(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_char(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_char(Character.MAX_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % p_char(0)))
  }

  function testFloatCharacterRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_char(0))
    assertEquals(b_float(0.0), b_float(0.0) % b_char(1))
    assertEquals(b_float(0.0), b_float(0.0) % b_char(23))
    assertEquals(b_float(0.0), b_float(0.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_char(0))
    assertEquals(b_float(0.0), b_float(1.0) % b_char(1))
    assertEquals(b_float(1.0), b_float(1.0) % b_char(23))
    assertEquals(b_float(1.0), b_float(1.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_char(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_char(1))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_char(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_char(0))
    assertEquals(b_float(0.0), b_float(23.0) % b_char(1))
    assertEquals(b_float(0.0), b_float(23.0) % b_char(23))
    assertEquals(b_float(23.0), b_float(23.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_char(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_char(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_char(23))
    assertEquals(b_float(23.123), b_float(23.123) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_char(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_char(1))
    assertEquals(b_float(-9.0), b_float(-32.0) % b_char(23))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_char(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_char(1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % b_char(23))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_char(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_char(1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % b_char(23))
    assertEquals(b_float(65280.0), b_float(Float.MAX_VALUE) % b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_char(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_char(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_char(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_char(Character.MAX_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % b_char(0)))
  }

  function testFloatPIntRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_int(0))
    assertEquals(b_float(0.0), b_float(0.0) % p_int(1))
    assertEquals(b_float(0.0), b_float(0.0) % p_int(-1))
    assertEquals(b_float(0.0), b_float(0.0) % p_int(23))
    assertEquals(b_float(0.0), b_float(0.0) % p_int(-32))
    assertEquals(b_float(0.0), b_float(0.0) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_int(0))
    assertEquals(b_float(0.0), b_float(1.0) % p_int(1))
    assertEquals(b_float(0.0), b_float(1.0) % p_int(-1))
    assertEquals(b_float(1.0), b_float(1.0) % p_int(23))
    assertEquals(b_float(1.0), b_float(1.0) % p_int(-32))
    assertEquals(b_float(1.0), b_float(1.0) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_int(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_int(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_int(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_int(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_int(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_int(0))
    assertEquals(b_float(0.0), b_float(23.0) % p_int(1))
    assertEquals(b_float(0.0), b_float(23.0) % p_int(-1))
    assertEquals(b_float(0.0), b_float(23.0) % p_int(23))
    assertEquals(b_float(23.0), b_float(23.0) % p_int(-32))
    assertEquals(b_float(23.0), b_float(23.0) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_int(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_int(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_int(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_int(23))
    assertEquals(b_float(23.123), b_float(23.123) % p_int(-32))
    assertEquals(b_float(23.123), b_float(23.123) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_int(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_int(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_int(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % p_int(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_int(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_int(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_int(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_int(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % p_int(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_int(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_int(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_int(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_int(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % p_int(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_int(-32))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_int(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_int(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_int(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_int(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_int(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_int(Integer.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % p_int(0)))
  }

  function testFloatIntegerRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_int(0))
    assertEquals(b_float(0.0), b_float(0.0) % b_int(1))
    assertEquals(b_float(0.0), b_float(0.0) % b_int(-1))
    assertEquals(b_float(0.0), b_float(0.0) % b_int(23))
    assertEquals(b_float(0.0), b_float(0.0) % b_int(-32))
    assertEquals(b_float(0.0), b_float(0.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_int(0))
    assertEquals(b_float(0.0), b_float(1.0) % b_int(1))
    assertEquals(b_float(0.0), b_float(1.0) % b_int(-1))
    assertEquals(b_float(1.0), b_float(1.0) % b_int(23))
    assertEquals(b_float(1.0), b_float(1.0) % b_int(-32))
    assertEquals(b_float(1.0), b_float(1.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_int(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_int(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_int(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_int(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_int(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_int(0))
    assertEquals(b_float(0.0), b_float(23.0) % b_int(1))
    assertEquals(b_float(0.0), b_float(23.0) % b_int(-1))
    assertEquals(b_float(0.0), b_float(23.0) % b_int(23))
    assertEquals(b_float(23.0), b_float(23.0) % b_int(-32))
    assertEquals(b_float(23.0), b_float(23.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_int(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_int(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_int(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_int(23))
    assertEquals(b_float(23.123), b_float(23.123) % b_int(-32))
    assertEquals(b_float(23.123), b_float(23.123) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_int(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_int(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_int(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % b_int(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_int(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_int(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_int(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_int(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % b_int(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_int(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_int(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_int(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_int(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % b_int(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_int(-32))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_int(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_int(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_int(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_int(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_int(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_int(Integer.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % b_int(0)))
  }

  function testFloatPLongRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_long(0))
    assertEquals(b_float(0.0), b_float(0.0) % p_long(1))
    assertEquals(b_float(0.0), b_float(0.0) % p_long(-1))
    assertEquals(b_float(0.0), b_float(0.0) % p_long(23))
    assertEquals(b_float(0.0), b_float(0.0) % p_long(-32))
    assertEquals(b_float(0.0), b_float(0.0) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_long(0))
    assertEquals(b_float(0.0), b_float(1.0) % p_long(1))
    assertEquals(b_float(0.0), b_float(1.0) % p_long(-1))
    assertEquals(b_float(1.0), b_float(1.0) % p_long(23))
    assertEquals(b_float(1.0), b_float(1.0) % p_long(-32))
    assertEquals(b_float(1.0), b_float(1.0) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_long(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_long(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_long(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_long(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_long(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_long(0))
    assertEquals(b_float(0.0), b_float(23.0) % p_long(1))
    assertEquals(b_float(0.0), b_float(23.0) % p_long(-1))
    assertEquals(b_float(0.0), b_float(23.0) % p_long(23))
    assertEquals(b_float(23.0), b_float(23.0) % p_long(-32))
    assertEquals(b_float(23.0), b_float(23.0) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_long(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_long(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_long(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_long(23))
    assertEquals(b_float(23.123), b_float(23.123) % p_long(-32))
    assertEquals(b_float(23.123), b_float(23.123) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_long(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_long(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_long(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % p_long(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_long(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_long(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_long(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_long(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % p_long(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_long(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_long(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_long(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_long(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % p_long(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_long(-32))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_long(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_long(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_long(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_long(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_long(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_long(Long.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % p_long(0)))
  }

  function testFloatLongRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_long(0))
    assertEquals(b_float(0.0), b_float(0.0) % b_long(1))
    assertEquals(b_float(0.0), b_float(0.0) % b_long(-1))
    assertEquals(b_float(0.0), b_float(0.0) % b_long(23))
    assertEquals(b_float(0.0), b_float(0.0) % b_long(-32))
    assertEquals(b_float(0.0), b_float(0.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_long(0))
    assertEquals(b_float(0.0), b_float(1.0) % b_long(1))
    assertEquals(b_float(0.0), b_float(1.0) % b_long(-1))
    assertEquals(b_float(1.0), b_float(1.0) % b_long(23))
    assertEquals(b_float(1.0), b_float(1.0) % b_long(-32))
    assertEquals(b_float(1.0), b_float(1.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(1.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_long(0))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_long(1))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_long(-1))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_long(23))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_long(-32))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_long(0))
    assertEquals(b_float(0.0), b_float(23.0) % b_long(1))
    assertEquals(b_float(0.0), b_float(23.0) % b_long(-1))
    assertEquals(b_float(0.0), b_float(23.0) % b_long(23))
    assertEquals(b_float(23.0), b_float(23.0) % b_long(-32))
    assertEquals(b_float(23.0), b_float(23.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(23.0), b_float(23.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_long(0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_long(1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_long(-1))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_long(23))
    assertEquals(b_float(23.123), b_float(23.123) % b_long(-32))
    assertEquals(b_float(23.123), b_float(23.123) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(23.123), b_float(23.123) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_long(0))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_long(1))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_long(-1))
    assertEquals(b_float(-9.0), b_float(-32.0) % b_long(23))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_long(-32))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_long(0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_long(1))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_long(-1))
    assertEquals(b_float(-9.456001), b_float(-32.456) % b_long(23))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_long(-32))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_long(0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_long(1))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_long(-1))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % b_long(23))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_long(-32))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_long(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_long(1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_long(-1))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_long(23))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_long(-32))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_long(Long.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % b_long(0)))
  }

  function testFloatPFloatRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_float(0.0))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(1.0))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(-1.0))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(23.0))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(23.123))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(-32.0))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(-32.456))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) % p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_float(0.0))
    assertEquals(b_float(0.0), b_float(1.0) % p_float(1.0))
    assertEquals(b_float(0.0), b_float(1.0) % p_float(-1.0))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(23.0))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(23.123))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(-32.0))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(-32.456))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(1.0) % p_float(Float.NaN_))
    assertEquals(b_float(1.0), b_float(1.0) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(1.0) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_float(0.0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_float(1.0))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_float(-1.0))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(23.0))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(23.123))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(-32.0))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(-32.456))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-1.0) % p_float(Float.NaN_))
    assertEquals(b_float(-1.0), b_float(-1.0) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(-1.0) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_float(0.0))
    assertEquals(b_float(0.0), b_float(23.0) % p_float(1.0))
    assertEquals(b_float(0.0), b_float(23.0) % p_float(-1.0))
    assertEquals(b_float(0.0), b_float(23.0) % p_float(23.0))
    assertEquals(b_float(23.0), b_float(23.0) % p_float(23.123))
    assertEquals(b_float(23.0), b_float(23.0) % p_float(-32.0))
    assertEquals(b_float(23.0), b_float(23.0) % p_float(-32.456))
    assertEquals(b_float(23.0), b_float(23.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.0), b_float(23.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.0) % p_float(Float.NaN_))
    assertEquals(b_float(23.0), b_float(23.0) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(23.0) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_float(0.0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_float(1.0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_float(-1.0))
    assertEquals(b_float(0.12299919), b_float(23.123) % p_float(23.0))
    assertEquals(b_float(0.0), b_float(23.123) % p_float(23.123))
    assertEquals(b_float(23.123), b_float(23.123) % p_float(-32.0))
    assertEquals(b_float(23.123), b_float(23.123) % p_float(-32.456))
    assertEquals(b_float(23.123), b_float(23.123) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.123), b_float(23.123) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.123) % p_float(Float.NaN_))
    assertEquals(b_float(23.123), b_float(23.123) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(23.123) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_float(0.0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_float(1.0))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_float(-1.0))
    assertEquals(b_float(-9.0), b_float(-32.0) % p_float(23.0))
    assertEquals(b_float(-8.877001), b_float(-32.0) % p_float(23.123))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_float(-32.0))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_float(-32.456))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.0) % p_float(Float.NaN_))
    assertEquals(b_float(-32.0), b_float(-32.0) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(-32.0) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_float(0.0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_float(1.0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_float(-1.0))
    assertEquals(b_float(-9.456001), b_float(-32.456) % p_float(23.0))
    assertEquals(b_float(-9.333002), b_float(-32.456) % p_float(23.123))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % p_float(-32.0))
    assertEquals(b_float(-0.0), b_float(-32.456) % p_float(-32.456))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.456) % p_float(Float.NaN_))
    assertEquals(b_float(-32.456), b_float(-32.456) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(-32.456) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_float(0.0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_float(1.0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_float(-1.0))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % p_float(23.0))
    assertEquals(b_float(22.169586), b_float(Float.MAX_VALUE) % p_float(23.123))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_float(-32.0))
    assertEquals(b_float(14.246368), b_float(Float.MAX_VALUE) % p_float(-32.456))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_float(0.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(1.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(-1.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(23.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(23.123))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(-32.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(-32.456))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % p_float(0.0)))
  }

  function testFloatFloatRemainder() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_float(0.0))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(1.0))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(-1.0))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(23.0))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(23.123))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(-32.0))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(-32.456))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) % b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_float(0.0))
    assertEquals(b_float(0.0), b_float(1.0) % b_float(1.0))
    assertEquals(b_float(0.0), b_float(1.0) % b_float(-1.0))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(23.0))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(23.123))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(-32.0))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(-32.456))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(1.0) % b_float(Float.NaN_))
    assertEquals(b_float(1.0), b_float(1.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(1.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_float(0.0))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_float(1.0))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_float(-1.0))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(23.0))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(23.123))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(-32.0))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(-32.456))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-1.0) % b_float(Float.NaN_))
    assertEquals(b_float(-1.0), b_float(-1.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(-1.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_float(0.0))
    assertEquals(b_float(0.0), b_float(23.0) % b_float(1.0))
    assertEquals(b_float(0.0), b_float(23.0) % b_float(-1.0))
    assertEquals(b_float(0.0), b_float(23.0) % b_float(23.0))
    assertEquals(b_float(23.0), b_float(23.0) % b_float(23.123))
    assertEquals(b_float(23.0), b_float(23.0) % b_float(-32.0))
    assertEquals(b_float(23.0), b_float(23.0) % b_float(-32.456))
    assertEquals(b_float(23.0), b_float(23.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.0), b_float(23.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.0) % b_float(Float.NaN_))
    assertEquals(b_float(23.0), b_float(23.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(23.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_float(0.0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_float(1.0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_float(-1.0))
    assertEquals(b_float(0.12299919), b_float(23.123) % b_float(23.0))
    assertEquals(b_float(0.0), b_float(23.123) % b_float(23.123))
    assertEquals(b_float(23.123), b_float(23.123) % b_float(-32.0))
    assertEquals(b_float(23.123), b_float(23.123) % b_float(-32.456))
    assertEquals(b_float(23.123), b_float(23.123) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.123), b_float(23.123) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.123) % b_float(Float.NaN_))
    assertEquals(b_float(23.123), b_float(23.123) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(23.123) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_float(0.0))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_float(1.0))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_float(-1.0))
    assertEquals(b_float(-9.0), b_float(-32.0) % b_float(23.0))
    assertEquals(b_float(-8.877001), b_float(-32.0) % b_float(23.123))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_float(-32.0))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_float(-32.456))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.0) % b_float(Float.NaN_))
    assertEquals(b_float(-32.0), b_float(-32.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(-32.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_float(0.0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_float(1.0))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_float(-1.0))
    assertEquals(b_float(-9.456001), b_float(-32.456) % b_float(23.0))
    assertEquals(b_float(-9.333002), b_float(-32.456) % b_float(23.123))
    assertEquals(b_float(-0.45600128), b_float(-32.456) % b_float(-32.0))
    assertEquals(b_float(-0.0), b_float(-32.456) % b_float(-32.456))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.456) % b_float(Float.NaN_))
    assertEquals(b_float(-32.456), b_float(-32.456) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(-32.456) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_float(0.0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_float(1.0))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_float(-1.0))
    assertEquals(b_float(4.0), b_float(Float.MAX_VALUE) % b_float(23.0))
    assertEquals(b_float(22.169586), b_float(Float.MAX_VALUE) % b_float(23.123))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_float(-32.0))
    assertEquals(b_float(14.246368), b_float(Float.MAX_VALUE) % b_float(-32.456))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) % b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_float(0.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(1.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(23.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(23.123))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(-32.456))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) % b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) % b_float(0.0)))
  }

  function testFloatPDoubleRemainder() {
    assertEquals(b_double(Double.NaN_), b_float(0.0) % p_double(0.0))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(1.0))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(-1.0))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(23.0))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(23.123))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(-32.0))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(-32.456))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) % p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(0.0) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(1.0) % p_double(0.0))
    assertEquals(b_double(0.0), b_float(1.0) % p_double(1.0))
    assertEquals(b_double(0.0), b_float(1.0) % p_double(-1.0))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(23.0))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(23.123))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(-32.0))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(-32.456))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(1.0) % p_double(Double.NaN_))
    assertEquals(b_double(1.0), b_float(1.0) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(1.0) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(-1.0) % p_double(0.0))
    assertEquals(b_double(-0.0), b_float(-1.0) % p_double(1.0))
    assertEquals(b_double(-0.0), b_float(-1.0) % p_double(-1.0))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(23.0))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(23.123))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(-32.0))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(-32.456))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-1.0) % p_double(Double.NaN_))
    assertEquals(b_double(-1.0), b_float(-1.0) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_float(-1.0) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(23.0) % p_double(0.0))
    assertEquals(b_double(0.0), b_float(23.0) % p_double(1.0))
    assertEquals(b_double(0.0), b_float(23.0) % p_double(-1.0))
    assertEquals(b_double(0.0), b_float(23.0) % p_double(23.0))
    assertEquals(b_double(23.0), b_float(23.0) % p_double(23.123))
    assertEquals(b_double(23.0), b_float(23.0) % p_double(-32.0))
    assertEquals(b_double(23.0), b_float(23.0) % p_double(-32.456))
    assertEquals(b_double(23.0), b_float(23.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), b_float(23.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.0) % p_double(Double.NaN_))
    assertEquals(b_double(23.0), b_float(23.0) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(23.0) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(23.123) % p_double(0.0))
    assertEquals(b_double(0.12299919128417969), b_float(23.123) % p_double(1.0))
    assertEquals(b_double(0.12299919128417969), b_float(23.123) % p_double(-1.0))
    assertEquals(b_double(0.12299919128417969), b_float(23.123) % p_double(23.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % p_double(23.123))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % p_double(-32.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % p_double(-32.456))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.123) % p_double(Double.NaN_))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(23.123) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(-32.0) % p_double(0.0))
    assertEquals(b_double(-0.0), b_float(-32.0) % p_double(1.0))
    assertEquals(b_double(-0.0), b_float(-32.0) % p_double(-1.0))
    assertEquals(b_double(-9.0), b_float(-32.0) % p_double(23.0))
    assertEquals(b_double(-8.876999999999999), b_float(-32.0) % p_double(23.123))
    assertEquals(b_double(-0.0), b_float(-32.0) % p_double(-32.0))
    assertEquals(b_double(-32.0), b_float(-32.0) % p_double(-32.456))
    assertEquals(b_double(-32.0), b_float(-32.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), b_float(-32.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.0) % p_double(Double.NaN_))
    assertEquals(b_double(-32.0), b_float(-32.0) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_float(-32.0) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(-32.456) % p_double(0.0))
    assertEquals(b_double(-0.45600128173828125), b_float(-32.456) % p_double(1.0))
    assertEquals(b_double(-0.45600128173828125), b_float(-32.456) % p_double(-1.0))
    assertEquals(b_double(-9.456001281738281), b_float(-32.456) % p_double(23.0))
    assertEquals(b_double(-9.33300128173828), b_float(-32.456) % p_double(23.123))
    assertEquals(b_double(-0.45600128173828125), b_float(-32.456) % p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-1.2817382781804554E-6")), b_float(-32.456) % p_double(-32.456))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.456) % p_double(Double.NaN_))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_float(-32.456) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) % p_double(0.0))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % p_double(1.0))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % p_double(-1.0))
    assertEquals(b_double(4.0), b_float(Float.MAX_VALUE) % p_double(23.0))
    assertEquals(b_double(0.22775320917606479), b_float(Float.MAX_VALUE) % p_double(23.123))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % p_double(-32.0))
    assertEquals(b_double(21.286465159817567), b_float(Float.MAX_VALUE) % p_double(-32.456))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) % p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) % p_double(0.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(1.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(23.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(23.123))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(-32.456))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) % p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_float(0.0) % p_double(0.0)))
  }

  function testFloatDoubleRemainder() {
    assertEquals(b_double(Double.NaN_), b_float(0.0) % b_double(0.0))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(1.0))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(-1.0))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(23.0))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(23.123))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(-32.0))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(-32.456))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) % b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(0.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(1.0) % b_double(0.0))
    assertEquals(b_double(0.0), b_float(1.0) % b_double(1.0))
    assertEquals(b_double(0.0), b_float(1.0) % b_double(-1.0))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(23.0))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(23.123))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(-32.0))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(-32.456))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(1.0) % b_double(Double.NaN_))
    assertEquals(b_double(1.0), b_float(1.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(1.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(-1.0) % b_double(0.0))
    assertEquals(b_double(-0.0), b_float(-1.0) % b_double(1.0))
    assertEquals(b_double(-0.0), b_float(-1.0) % b_double(-1.0))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(23.0))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(23.123))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(-32.0))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(-32.456))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-1.0) % b_double(Double.NaN_))
    assertEquals(b_double(-1.0), b_float(-1.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_float(-1.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(23.0) % b_double(0.0))
    assertEquals(b_double(0.0), b_float(23.0) % b_double(1.0))
    assertEquals(b_double(0.0), b_float(23.0) % b_double(-1.0))
    assertEquals(b_double(0.0), b_float(23.0) % b_double(23.0))
    assertEquals(b_double(23.0), b_float(23.0) % b_double(23.123))
    assertEquals(b_double(23.0), b_float(23.0) % b_double(-32.0))
    assertEquals(b_double(23.0), b_float(23.0) % b_double(-32.456))
    assertEquals(b_double(23.0), b_float(23.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), b_float(23.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.0) % b_double(Double.NaN_))
    assertEquals(b_double(23.0), b_float(23.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(23.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(23.123) % b_double(0.0))
    assertEquals(b_double(0.12299919128417969), b_float(23.123) % b_double(1.0))
    assertEquals(b_double(0.12299919128417969), b_float(23.123) % b_double(-1.0))
    assertEquals(b_double(0.12299919128417969), b_float(23.123) % b_double(23.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % b_double(23.123))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % b_double(-32.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % b_double(-32.456))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.123) % b_double(Double.NaN_))
    assertEquals(b_double(23.12299919128418), b_float(23.123) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(23.123) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(-32.0) % b_double(0.0))
    assertEquals(b_double(-0.0), b_float(-32.0) % b_double(1.0))
    assertEquals(b_double(-0.0), b_float(-32.0) % b_double(-1.0))
    assertEquals(b_double(-9.0), b_float(-32.0) % b_double(23.0))
    assertEquals(b_double(-8.876999999999999), b_float(-32.0) % b_double(23.123))
    assertEquals(b_double(-0.0), b_float(-32.0) % b_double(-32.0))
    assertEquals(b_double(-32.0), b_float(-32.0) % b_double(-32.456))
    assertEquals(b_double(-32.0), b_float(-32.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), b_float(-32.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.0) % b_double(Double.NaN_))
    assertEquals(b_double(-32.0), b_float(-32.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_float(-32.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(-32.456) % b_double(0.0))
    assertEquals(b_double(-0.45600128173828125), b_float(-32.456) % b_double(1.0))
    assertEquals(b_double(-0.45600128173828125), b_float(-32.456) % b_double(-1.0))
    assertEquals(b_double(-9.456001281738281), b_float(-32.456) % b_double(23.0))
    assertEquals(b_double(-9.33300128173828), b_float(-32.456) % b_double(23.123))
    assertEquals(b_double(-0.45600128173828125), b_float(-32.456) % b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-1.2817382781804554E-6")), b_float(-32.456) % b_double(-32.456))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.456) % b_double(Double.NaN_))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_float(-32.456) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) % b_double(0.0))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % b_double(1.0))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % b_double(-1.0))
    assertEquals(b_double(4.0), b_float(Float.MAX_VALUE) % b_double(23.0))
    assertEquals(b_double(0.22775320917606479), b_float(Float.MAX_VALUE) % b_double(23.123))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % b_double(-32.0))
    assertEquals(b_double(21.286465159817567), b_float(Float.MAX_VALUE) % b_double(-32.456))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) % b_double(0.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(1.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(23.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(23.123))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(-32.456))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_float(0.0) % b_double(0.0)))
  }

  function testFloatBigIntegerRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> b_float(0.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_int("-1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_int("23"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_int("-32"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(1.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(1.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(1.0) % big_int("-1"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_int("23"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_int("-32"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-1.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(-1.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(-1.0) % big_int("-1"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_int("23"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_int("-32"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(23.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(23.0) % big_int("-1"))
    assertEquals(big_decimal("0.0"), b_float(23.0) % big_int("23"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_int("-32"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.123) % big_int("0"))
    assertEquals(big_decimal("0.123"), b_float(23.123) % big_int("1"))
    assertEquals(big_decimal("0.123"), b_float(23.123) % big_int("-1"))
    assertEquals(big_decimal("0.123"), b_float(23.123) % big_int("23"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_int("-32"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(-32.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(-32.0) % big_int("-1"))
    assertEquals(big_decimal("9.0"), b_float(-32.0) % big_int("23"))
    assertEquals(big_decimal("0.0"), b_float(-32.0) % big_int("-32"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.456) % big_int("0"))
    assertEquals(big_decimal("0.456"), b_float(-32.456) % big_int("1"))
    assertEquals(big_decimal("0.456"), b_float(-32.456) % big_int("-1"))
    assertEquals(big_decimal("9.456"), b_float(-32.456) % big_int("23"))
    assertEquals(big_decimal("0.456"), b_float(-32.456) % big_int("-32"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) % big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MAX_VALUE) % big_int("0"))
    assertEquals(big_decimal("0E+31"), b_float(Float.MAX_VALUE) % big_int("1"))
    assertEquals(big_decimal("0E+31"), b_float(Float.MAX_VALUE) % big_int("-1"))
    assertThrowsArithmeticException("Division impossible", \ -> b_float(Float.MAX_VALUE) % big_int("23"))
    assertEquals(big_decimal("0E+26"), b_float(Float.MAX_VALUE) % big_int("-32"))
    assertEquals(big_decimal("99578214009957821401336064490"), b_float(Float.MAX_VALUE) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("99578214009957821401336064490"), b_float(Float.MAX_VALUE) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MIN_VALUE) % big_int("0"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_int("1"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_int("-1"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_int("23"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_int("-32"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(b_float(0.0) % big_int("0")))
  }

  function testFloatBigDecimalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> b_float(0.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("-1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("23"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("-32"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0.0"), b_float(0.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(1.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(1.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(1.0) % big_decimal("-1"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_decimal("23"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_decimal("23.123"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_decimal("-32"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.0"), b_float(1.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-1.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(-1.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(-1.0) % big_decimal("-1"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_decimal("23"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_decimal("23.123"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_decimal("-32"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(23.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(23.0) % big_decimal("-1"))
    assertEquals(big_decimal("0.0"), b_float(23.0) % big_decimal("23"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_decimal("23.123"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_decimal("-32"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23.0"), b_float(23.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.123) % big_decimal("0"))
    assertEquals(big_decimal("0.123"), b_float(23.123) % big_decimal("1"))
    assertEquals(big_decimal("0.123"), b_float(23.123) % big_decimal("-1"))
    assertEquals(big_decimal("0.123"), b_float(23.123) % big_decimal("23"))
    assertEquals(big_decimal("0.000"), b_float(23.123) % big_decimal("23.123"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_decimal("-32"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_decimal("-32.456"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23.123"), b_float(23.123) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(-32.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(-32.0) % big_decimal("-1"))
    assertEquals(big_decimal("9.0"), b_float(-32.0) % big_decimal("23"))
    assertEquals(big_decimal("8.877"), b_float(-32.0) % big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), b_float(-32.0) % big_decimal("-32"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.456) % big_decimal("0"))
    assertEquals(big_decimal("0.456"), b_float(-32.456) % big_decimal("1"))
    assertEquals(big_decimal("0.456"), b_float(-32.456) % big_decimal("-1"))
    assertEquals(big_decimal("9.456"), b_float(-32.456) % big_decimal("23"))
    assertEquals(big_decimal("9.333"), b_float(-32.456) % big_decimal("23.123"))
    assertEquals(big_decimal("0.456"), b_float(-32.456) % big_decimal("-32"))
    assertEquals(big_decimal("0.000"), b_float(-32.456) % big_decimal("-32.456"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) % big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MAX_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("0E+31"), b_float(Float.MAX_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("0E+31"), b_float(Float.MAX_VALUE) % big_decimal("-1"))
    assertThrowsArithmeticException("Division impossible", \ -> b_float(Float.MAX_VALUE) % big_decimal("23"))
    assertThrowsArithmeticException("Division impossible", \ -> b_float(Float.MAX_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("0E+26"), b_float(Float.MAX_VALUE) % big_decimal("-32"))
    assertThrowsArithmeticException("Division impossible", \ -> b_float(Float.MAX_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("99578214009957821400995782140.133606449"), b_float(Float.MAX_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("99578214009957821400995782140.133606449"), b_float(Float.MAX_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MIN_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("-1"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("23"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("-32"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_float(0.0) % big_decimal("0")))
  }

}

