package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_ShortTest extends ArithmeticTestBase {

  function testShortPByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / p_byte(0))
    assertEquals(b_int(0), b_short(0) / p_byte(1))
    assertEquals(b_int(0), b_short(0) / p_byte(-1))
    assertEquals(b_int(0), b_short(0) / p_byte(23))
    assertEquals(b_int(0), b_short(0) / p_byte(-32))
    assertEquals(b_int(0), b_short(0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(0) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / p_byte(0))
    assertEquals(b_int(1), b_short(1) / p_byte(1))
    assertEquals(b_int(-1), b_short(1) / p_byte(-1))
    assertEquals(b_int(0), b_short(1) / p_byte(23))
    assertEquals(b_int(0), b_short(1) / p_byte(-32))
    assertEquals(b_int(0), b_short(1) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / p_byte(0))
    assertEquals(b_int(-1), b_short(-1) / p_byte(1))
    assertEquals(b_int(1), b_short(-1) / p_byte(-1))
    assertEquals(b_int(0), b_short(-1) / p_byte(23))
    assertEquals(b_int(0), b_short(-1) / p_byte(-32))
    assertEquals(b_int(0), b_short(-1) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(-1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / p_byte(0))
    assertEquals(b_int(23), b_short(23) / p_byte(1))
    assertEquals(b_int(-23), b_short(23) / p_byte(-1))
    assertEquals(b_int(1), b_short(23) / p_byte(23))
    assertEquals(b_int(0), b_short(23) / p_byte(-32))
    assertEquals(b_int(0), b_short(23) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(23) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / p_byte(0))
    assertEquals(b_int(-32), b_short(-32) / p_byte(1))
    assertEquals(b_int(32), b_short(-32) / p_byte(-1))
    assertEquals(b_int(-1), b_short(-32) / p_byte(23))
    assertEquals(b_int(1), b_short(-32) / p_byte(-32))
    assertEquals(b_int(0), b_short(-32) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(-32) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / p_byte(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / p_byte(1))
    assertEquals(b_int(-32767), b_short(Short.MAX_VALUE) / p_byte(-1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / p_byte(23))
    assertEquals(b_int(-1023), b_short(Short.MAX_VALUE) / p_byte(-32))
    assertEquals(b_int(258), b_short(Short.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-255), b_short(Short.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / p_byte(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / p_byte(1))
    assertEquals(b_int(32768), b_short(Short.MIN_VALUE) / p_byte(-1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / p_byte(23))
    assertEquals(b_int(1024), b_short(Short.MIN_VALUE) / p_byte(-32))
    assertEquals(b_int(-258), b_short(Short.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(256), b_short(Short.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / p_byte(0)))
  }

  function testShortByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / b_byte(0))
    assertEquals(b_int(0), b_short(0) / p_byte(1))
    assertEquals(b_int(0), b_short(0) / p_byte(-1))
    assertEquals(b_int(0), b_short(0) / b_byte(23))
    assertEquals(b_int(0), b_short(0) / b_byte(-32))
    assertEquals(b_int(0), b_short(0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(0) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / b_byte(0))
    assertEquals(b_int(1), b_short(1) / p_byte(1))
    assertEquals(b_int(-1), b_short(1) / p_byte(-1))
    assertEquals(b_int(0), b_short(1) / b_byte(23))
    assertEquals(b_int(0), b_short(1) / b_byte(-32))
    assertEquals(b_int(0), b_short(1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / b_byte(0))
    assertEquals(b_int(-1), b_short(-1) / p_byte(1))
    assertEquals(b_int(1), b_short(-1) / p_byte(-1))
    assertEquals(b_int(0), b_short(-1) / b_byte(23))
    assertEquals(b_int(0), b_short(-1) / b_byte(-32))
    assertEquals(b_int(0), b_short(-1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(-1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / b_byte(0))
    assertEquals(b_int(23), b_short(23) / p_byte(1))
    assertEquals(b_int(-23), b_short(23) / p_byte(-1))
    assertEquals(b_int(1), b_short(23) / b_byte(23))
    assertEquals(b_int(0), b_short(23) / b_byte(-32))
    assertEquals(b_int(0), b_short(23) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(23) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / b_byte(0))
    assertEquals(b_int(-32), b_short(-32) / p_byte(1))
    assertEquals(b_int(32), b_short(-32) / p_byte(-1))
    assertEquals(b_int(-1), b_short(-32) / b_byte(23))
    assertEquals(b_int(1), b_short(-32) / b_byte(-32))
    assertEquals(b_int(0), b_short(-32) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_short(-32) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / b_byte(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / p_byte(1))
    assertEquals(b_int(-32767), b_short(Short.MAX_VALUE) / p_byte(-1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / b_byte(23))
    assertEquals(b_int(-1023), b_short(Short.MAX_VALUE) / b_byte(-32))
    assertEquals(b_int(258), b_short(Short.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-255), b_short(Short.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / b_byte(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / p_byte(1))
    assertEquals(b_int(32768), b_short(Short.MIN_VALUE) / p_byte(-1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / b_byte(23))
    assertEquals(b_int(1024), b_short(Short.MIN_VALUE) / b_byte(-32))
    assertEquals(b_int(-258), b_short(Short.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(256), b_short(Short.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / b_byte(0)))
  }

  function testShortPShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / p_short(0))
    assertEquals(b_int(0), b_short(0) / p_short(1))
    assertEquals(b_int(0), b_short(0) / p_short(-1))
    assertEquals(b_int(0), b_short(0) / p_short(23))
    assertEquals(b_int(0), b_short(0) / p_short(-32))
    assertEquals(b_int(0), b_short(0) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(0) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / p_short(0))
    assertEquals(b_int(1), b_short(1) / p_short(1))
    assertEquals(b_int(-1), b_short(1) / p_short(-1))
    assertEquals(b_int(0), b_short(1) / p_short(23))
    assertEquals(b_int(0), b_short(1) / p_short(-32))
    assertEquals(b_int(0), b_short(1) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / p_short(0))
    assertEquals(b_int(-1), b_short(-1) / p_short(1))
    assertEquals(b_int(1), b_short(-1) / p_short(-1))
    assertEquals(b_int(0), b_short(-1) / p_short(23))
    assertEquals(b_int(0), b_short(-1) / p_short(-32))
    assertEquals(b_int(0), b_short(-1) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(-1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / p_short(0))
    assertEquals(b_int(23), b_short(23) / p_short(1))
    assertEquals(b_int(-23), b_short(23) / p_short(-1))
    assertEquals(b_int(1), b_short(23) / p_short(23))
    assertEquals(b_int(0), b_short(23) / p_short(-32))
    assertEquals(b_int(0), b_short(23) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(23) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / p_short(0))
    assertEquals(b_int(-32), b_short(-32) / p_short(1))
    assertEquals(b_int(32), b_short(-32) / p_short(-1))
    assertEquals(b_int(-1), b_short(-32) / p_short(23))
    assertEquals(b_int(1), b_short(-32) / p_short(-32))
    assertEquals(b_int(0), b_short(-32) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(-32) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / p_short(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / p_short(1))
    assertEquals(b_int(-32767), b_short(Short.MAX_VALUE) / p_short(-1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / p_short(23))
    assertEquals(b_int(-1023), b_short(Short.MAX_VALUE) / p_short(-32))
    assertEquals(b_int(1), b_short(Short.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / p_short(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / p_short(1))
    assertEquals(b_int(32768), b_short(Short.MIN_VALUE) / p_short(-1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / p_short(23))
    assertEquals(b_int(1024), b_short(Short.MIN_VALUE) / p_short(-32))
    assertEquals(b_int(-1), b_short(Short.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(1), b_short(Short.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / p_short(0)))
  }

  function testShortShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / b_short(0))
    assertEquals(b_int(0), b_short(0) / b_short(1))
    assertEquals(b_int(0), b_short(0) / b_short(-1))
    assertEquals(b_int(0), b_short(0) / b_short(23))
    assertEquals(b_int(0), b_short(0) / b_short(-32))
    assertEquals(b_int(0), b_short(0) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(0) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / b_short(0))
    assertEquals(b_int(1), b_short(1) / b_short(1))
    assertEquals(b_int(-1), b_short(1) / b_short(-1))
    assertEquals(b_int(0), b_short(1) / b_short(23))
    assertEquals(b_int(0), b_short(1) / b_short(-32))
    assertEquals(b_int(0), b_short(1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / b_short(0))
    assertEquals(b_int(-1), b_short(-1) / b_short(1))
    assertEquals(b_int(1), b_short(-1) / b_short(-1))
    assertEquals(b_int(0), b_short(-1) / b_short(23))
    assertEquals(b_int(0), b_short(-1) / b_short(-32))
    assertEquals(b_int(0), b_short(-1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(-1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / b_short(0))
    assertEquals(b_int(23), b_short(23) / b_short(1))
    assertEquals(b_int(-23), b_short(23) / b_short(-1))
    assertEquals(b_int(1), b_short(23) / b_short(23))
    assertEquals(b_int(0), b_short(23) / b_short(-32))
    assertEquals(b_int(0), b_short(23) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(23) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / b_short(0))
    assertEquals(b_int(-32), b_short(-32) / b_short(1))
    assertEquals(b_int(32), b_short(-32) / b_short(-1))
    assertEquals(b_int(-1), b_short(-32) / b_short(23))
    assertEquals(b_int(1), b_short(-32) / b_short(-32))
    assertEquals(b_int(0), b_short(-32) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(-32) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / b_short(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / b_short(1))
    assertEquals(b_int(-32767), b_short(Short.MAX_VALUE) / b_short(-1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / b_short(23))
    assertEquals(b_int(-1023), b_short(Short.MAX_VALUE) / b_short(-32))
    assertEquals(b_int(1), b_short(Short.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / b_short(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / b_short(1))
    assertEquals(b_int(32768), b_short(Short.MIN_VALUE) / b_short(-1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / b_short(23))
    assertEquals(b_int(1024), b_short(Short.MIN_VALUE) / b_short(-32))
    assertEquals(b_int(-1), b_short(Short.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(1), b_short(Short.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / b_short(0)))
  }

  function testShortPCharDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / p_char(0))
    assertEquals(b_int(0), b_short(0) / p_char(1))
    assertEquals(b_int(0), b_short(0) / p_char(23))
    assertEquals(b_int(0), b_short(0) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / p_char(0))
    assertEquals(b_int(1), b_short(1) / p_char(1))
    assertEquals(b_int(0), b_short(1) / p_char(23))
    assertEquals(b_int(0), b_short(1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / p_char(0))
    assertEquals(b_int(-1), b_short(-1) / p_char(1))
    assertEquals(b_int(0), b_short(-1) / p_char(23))
    assertEquals(b_int(0), b_short(-1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / p_char(0))
    assertEquals(b_int(23), b_short(23) / p_char(1))
    assertEquals(b_int(1), b_short(23) / p_char(23))
    assertEquals(b_int(0), b_short(23) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / p_char(0))
    assertEquals(b_int(-32), b_short(-32) / p_char(1))
    assertEquals(b_int(-1), b_short(-32) / p_char(23))
    assertEquals(b_int(0), b_short(-32) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / p_char(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / p_char(1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / p_char(23))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / p_char(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / p_char(1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / p_char(23))
    assertEquals(b_int(0), b_short(Short.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / p_char(0)))
  }

  function testShortCharacterDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / b_char(0))
    assertEquals(b_int(0), b_short(0) / b_char(1))
    assertEquals(b_int(0), b_short(0) / b_char(23))
    assertEquals(b_int(0), b_short(0) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / b_char(0))
    assertEquals(b_int(1), b_short(1) / b_char(1))
    assertEquals(b_int(0), b_short(1) / b_char(23))
    assertEquals(b_int(0), b_short(1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / b_char(0))
    assertEquals(b_int(-1), b_short(-1) / b_char(1))
    assertEquals(b_int(0), b_short(-1) / b_char(23))
    assertEquals(b_int(0), b_short(-1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / b_char(0))
    assertEquals(b_int(23), b_short(23) / b_char(1))
    assertEquals(b_int(1), b_short(23) / b_char(23))
    assertEquals(b_int(0), b_short(23) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / b_char(0))
    assertEquals(b_int(-32), b_short(-32) / b_char(1))
    assertEquals(b_int(-1), b_short(-32) / b_char(23))
    assertEquals(b_int(0), b_short(-32) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / b_char(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / b_char(1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / b_char(23))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / b_char(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / b_char(1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / b_char(23))
    assertEquals(b_int(0), b_short(Short.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / b_char(0)))
  }

  function testShortPIntDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / p_int(0))
    assertEquals(b_int(0), b_short(0) / p_int(1))
    assertEquals(b_int(0), b_short(0) / p_int(-1))
    assertEquals(b_int(0), b_short(0) / p_int(23))
    assertEquals(b_int(0), b_short(0) / p_int(-32))
    assertEquals(b_int(0), b_short(0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(0) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / p_int(0))
    assertEquals(b_int(1), b_short(1) / p_int(1))
    assertEquals(b_int(-1), b_short(1) / p_int(-1))
    assertEquals(b_int(0), b_short(1) / p_int(23))
    assertEquals(b_int(0), b_short(1) / p_int(-32))
    assertEquals(b_int(0), b_short(1) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / p_int(0))
    assertEquals(b_int(-1), b_short(-1) / p_int(1))
    assertEquals(b_int(1), b_short(-1) / p_int(-1))
    assertEquals(b_int(0), b_short(-1) / p_int(23))
    assertEquals(b_int(0), b_short(-1) / p_int(-32))
    assertEquals(b_int(0), b_short(-1) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(-1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / p_int(0))
    assertEquals(b_int(23), b_short(23) / p_int(1))
    assertEquals(b_int(-23), b_short(23) / p_int(-1))
    assertEquals(b_int(1), b_short(23) / p_int(23))
    assertEquals(b_int(0), b_short(23) / p_int(-32))
    assertEquals(b_int(0), b_short(23) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(23) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / p_int(0))
    assertEquals(b_int(-32), b_short(-32) / p_int(1))
    assertEquals(b_int(32), b_short(-32) / p_int(-1))
    assertEquals(b_int(-1), b_short(-32) / p_int(23))
    assertEquals(b_int(1), b_short(-32) / p_int(-32))
    assertEquals(b_int(0), b_short(-32) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(-32) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / p_int(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / p_int(1))
    assertEquals(b_int(-32767), b_short(Short.MAX_VALUE) / p_int(-1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / p_int(23))
    assertEquals(b_int(-1023), b_short(Short.MAX_VALUE) / p_int(-32))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / p_int(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / p_int(1))
    assertEquals(b_int(32768), b_short(Short.MIN_VALUE) / p_int(-1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / p_int(23))
    assertEquals(b_int(1024), b_short(Short.MIN_VALUE) / p_int(-32))
    assertEquals(b_int(0), b_short(Short.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(Short.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / p_int(0)))
  }

  function testShortIntegerDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / b_int(0))
    assertEquals(b_int(0), b_short(0) / b_int(1))
    assertEquals(b_int(0), b_short(0) / b_int(-1))
    assertEquals(b_int(0), b_short(0) / b_int(23))
    assertEquals(b_int(0), b_short(0) / b_int(-32))
    assertEquals(b_int(0), b_short(0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(0) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / b_int(0))
    assertEquals(b_int(1), b_short(1) / b_int(1))
    assertEquals(b_int(-1), b_short(1) / b_int(-1))
    assertEquals(b_int(0), b_short(1) / b_int(23))
    assertEquals(b_int(0), b_short(1) / b_int(-32))
    assertEquals(b_int(0), b_short(1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / b_int(0))
    assertEquals(b_int(-1), b_short(-1) / b_int(1))
    assertEquals(b_int(1), b_short(-1) / b_int(-1))
    assertEquals(b_int(0), b_short(-1) / b_int(23))
    assertEquals(b_int(0), b_short(-1) / b_int(-32))
    assertEquals(b_int(0), b_short(-1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(-1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / b_int(0))
    assertEquals(b_int(23), b_short(23) / b_int(1))
    assertEquals(b_int(-23), b_short(23) / b_int(-1))
    assertEquals(b_int(1), b_short(23) / b_int(23))
    assertEquals(b_int(0), b_short(23) / b_int(-32))
    assertEquals(b_int(0), b_short(23) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(23) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / b_int(0))
    assertEquals(b_int(-32), b_short(-32) / b_int(1))
    assertEquals(b_int(32), b_short(-32) / b_int(-1))
    assertEquals(b_int(-1), b_short(-32) / b_int(23))
    assertEquals(b_int(1), b_short(-32) / b_int(-32))
    assertEquals(b_int(0), b_short(-32) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(-32) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / b_int(0))
    assertEquals(b_int(32767), b_short(Short.MAX_VALUE) / b_int(1))
    assertEquals(b_int(-32767), b_short(Short.MAX_VALUE) / b_int(-1))
    assertEquals(b_int(1424), b_short(Short.MAX_VALUE) / b_int(23))
    assertEquals(b_int(-1023), b_short(Short.MAX_VALUE) / b_int(-32))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(Short.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / b_int(0))
    assertEquals(b_int(-32768), b_short(Short.MIN_VALUE) / b_int(1))
    assertEquals(b_int(32768), b_short(Short.MIN_VALUE) / b_int(-1))
    assertEquals(b_int(-1424), b_short(Short.MIN_VALUE) / b_int(23))
    assertEquals(b_int(1024), b_short(Short.MIN_VALUE) / b_int(-32))
    assertEquals(b_int(0), b_short(Short.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_short(Short.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_short(0) / b_int(0)))
  }

  function testShortPLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / p_long(0))
    assertEquals(b_long(0), b_short(0) / p_long(1))
    assertEquals(b_long(0), b_short(0) / p_long(-1))
    assertEquals(b_long(0), b_short(0) / p_long(23))
    assertEquals(b_long(0), b_short(0) / p_long(-32))
    assertEquals(b_long(0), b_short(0) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(0) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / p_long(0))
    assertEquals(b_long(1), b_short(1) / p_long(1))
    assertEquals(b_long(-1), b_short(1) / p_long(-1))
    assertEquals(b_long(0), b_short(1) / p_long(23))
    assertEquals(b_long(0), b_short(1) / p_long(-32))
    assertEquals(b_long(0), b_short(1) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / p_long(0))
    assertEquals(b_long(-1), b_short(-1) / p_long(1))
    assertEquals(b_long(1), b_short(-1) / p_long(-1))
    assertEquals(b_long(0), b_short(-1) / p_long(23))
    assertEquals(b_long(0), b_short(-1) / p_long(-32))
    assertEquals(b_long(0), b_short(-1) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(-1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / p_long(0))
    assertEquals(b_long(23), b_short(23) / p_long(1))
    assertEquals(b_long(-23), b_short(23) / p_long(-1))
    assertEquals(b_long(1), b_short(23) / p_long(23))
    assertEquals(b_long(0), b_short(23) / p_long(-32))
    assertEquals(b_long(0), b_short(23) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(23) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / p_long(0))
    assertEquals(b_long(-32), b_short(-32) / p_long(1))
    assertEquals(b_long(32), b_short(-32) / p_long(-1))
    assertEquals(b_long(-1), b_short(-32) / p_long(23))
    assertEquals(b_long(1), b_short(-32) / p_long(-32))
    assertEquals(b_long(0), b_short(-32) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(-32) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / p_long(0))
    assertEquals(b_long(32767), b_short(Short.MAX_VALUE) / p_long(1))
    assertEquals(b_long(-32767), b_short(Short.MAX_VALUE) / p_long(-1))
    assertEquals(b_long(1424), b_short(Short.MAX_VALUE) / p_long(23))
    assertEquals(b_long(-1023), b_short(Short.MAX_VALUE) / p_long(-32))
    assertEquals(b_long(0), b_short(Short.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(Short.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / p_long(0))
    assertEquals(b_long(-32768), b_short(Short.MIN_VALUE) / p_long(1))
    assertEquals(b_long(32768), b_short(Short.MIN_VALUE) / p_long(-1))
    assertEquals(b_long(-1424), b_short(Short.MIN_VALUE) / p_long(23))
    assertEquals(b_long(1024), b_short(Short.MIN_VALUE) / p_long(-32))
    assertEquals(b_long(0), b_short(Short.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(Short.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_short(0) / p_long(0)))
  }

  function testShortLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_short(0) / b_long(0))
    assertEquals(b_long(0), b_short(0) / b_long(1))
    assertEquals(b_long(0), b_short(0) / b_long(-1))
    assertEquals(b_long(0), b_short(0) / b_long(23))
    assertEquals(b_long(0), b_short(0) / b_long(-32))
    assertEquals(b_long(0), b_short(0) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(0) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(1) / b_long(0))
    assertEquals(b_long(1), b_short(1) / b_long(1))
    assertEquals(b_long(-1), b_short(1) / b_long(-1))
    assertEquals(b_long(0), b_short(1) / b_long(23))
    assertEquals(b_long(0), b_short(1) / b_long(-32))
    assertEquals(b_long(0), b_short(1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-1) / b_long(0))
    assertEquals(b_long(-1), b_short(-1) / b_long(1))
    assertEquals(b_long(1), b_short(-1) / b_long(-1))
    assertEquals(b_long(0), b_short(-1) / b_long(23))
    assertEquals(b_long(0), b_short(-1) / b_long(-32))
    assertEquals(b_long(0), b_short(-1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(-1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(23) / b_long(0))
    assertEquals(b_long(23), b_short(23) / b_long(1))
    assertEquals(b_long(-23), b_short(23) / b_long(-1))
    assertEquals(b_long(1), b_short(23) / b_long(23))
    assertEquals(b_long(0), b_short(23) / b_long(-32))
    assertEquals(b_long(0), b_short(23) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(23) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(-32) / b_long(0))
    assertEquals(b_long(-32), b_short(-32) / b_long(1))
    assertEquals(b_long(32), b_short(-32) / b_long(-1))
    assertEquals(b_long(-1), b_short(-32) / b_long(23))
    assertEquals(b_long(1), b_short(-32) / b_long(-32))
    assertEquals(b_long(0), b_short(-32) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(-32) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MAX_VALUE) / b_long(0))
    assertEquals(b_long(32767), b_short(Short.MAX_VALUE) / b_long(1))
    assertEquals(b_long(-32767), b_short(Short.MAX_VALUE) / b_long(-1))
    assertEquals(b_long(1424), b_short(Short.MAX_VALUE) / b_long(23))
    assertEquals(b_long(-1023), b_short(Short.MAX_VALUE) / b_long(-32))
    assertEquals(b_long(0), b_short(Short.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(Short.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_short(Short.MIN_VALUE) / b_long(0))
    assertEquals(b_long(-32768), b_short(Short.MIN_VALUE) / b_long(1))
    assertEquals(b_long(32768), b_short(Short.MIN_VALUE) / b_long(-1))
    assertEquals(b_long(-1424), b_short(Short.MIN_VALUE) / b_long(23))
    assertEquals(b_long(1024), b_short(Short.MIN_VALUE) / b_long(-32))
    assertEquals(b_long(0), b_short(Short.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_short(Short.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_short(0) / b_long(0)))
  }

  function testShortPFloatDivision() {
    assertEquals(b_float(Float.NaN_), b_short(0) / p_float(0.0))
    assertEquals(b_float(0.0), b_short(0) / p_float(1.0))
    assertEquals(b_float(-0.0), b_short(0) / p_float(-1.0))
    assertEquals(b_float(0.0), b_short(0) / p_float(23.0))
    assertEquals(b_float(0.0), b_short(0) / p_float(23.123))
    assertEquals(b_float(-0.0), b_short(0) / p_float(-32.0))
    assertEquals(b_float(-0.0), b_short(0) / p_float(-32.456))
    assertEquals(b_float(0.0), b_short(0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(0) / p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_short(0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_short(0) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(1) / p_float(0.0))
    assertEquals(b_float(1.0), b_short(1) / p_float(1.0))
    assertEquals(b_float(-1.0), b_short(1) / p_float(-1.0))
    assertEquals(b_float(0.04347826), b_short(1) / p_float(23.0))
    assertEquals(b_float(0.043246984), b_short(1) / p_float(23.123))
    assertEquals(b_float(-0.03125), b_short(1) / p_float(-32.0))
    assertEquals(b_float(-0.030810943), b_short(1) / p_float(-32.456))
    assertEquals(b_float(0.0), b_short(1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(1) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), b_short(1) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(1) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-1) / p_float(0.0))
    assertEquals(b_float(-1.0), b_short(-1) / p_float(1.0))
    assertEquals(b_float(1.0), b_short(-1) / p_float(-1.0))
    assertEquals(b_float(-0.04347826), b_short(-1) / p_float(23.0))
    assertEquals(b_float(-0.043246984), b_short(-1) / p_float(23.123))
    assertEquals(b_float(0.03125), b_short(-1) / p_float(-32.0))
    assertEquals(b_float(0.030810943), b_short(-1) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_short(-1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_short(-1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(-1) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), b_short(-1) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-1) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(23) / p_float(0.0))
    assertEquals(b_float(23.0), b_short(23) / p_float(1.0))
    assertEquals(b_float(-23.0), b_short(23) / p_float(-1.0))
    assertEquals(b_float(1.0), b_short(23) / p_float(23.0))
    assertEquals(b_float(0.99468064), b_short(23) / p_float(23.123))
    assertEquals(b_float(-0.71875), b_short(23) / p_float(-32.0))
    assertEquals(b_float(-0.70865166), b_short(23) / p_float(-32.456))
    assertEquals(b_float(0.0), b_short(23) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(23) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(23) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), b_short(23) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(23) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-32) / p_float(0.0))
    assertEquals(b_float(-32.0), b_short(-32) / p_float(1.0))
    assertEquals(b_float(32.0), b_short(-32) / p_float(-1.0))
    assertEquals(b_float(-1.3913044), b_short(-32) / p_float(23.0))
    assertEquals(b_float(-1.3839035), b_short(-32) / p_float(23.123))
    assertEquals(b_float(1.0), b_short(-32) / p_float(-32.0))
    assertEquals(b_float(0.9859502), b_short(-32) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_short(-32) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_short(-32) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(-32) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), b_short(-32) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-32) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / p_float(0.0))
    assertEquals(b_float(32767.0), b_short(Short.MAX_VALUE) / p_float(1.0))
    assertEquals(b_float(-32767.0), b_short(Short.MAX_VALUE) / p_float(-1.0))
    assertEquals(b_float(1424.6522), b_short(Short.MAX_VALUE) / p_float(23.0))
    assertEquals(b_float(1417.074), b_short(Short.MAX_VALUE) / p_float(23.123))
    assertEquals(b_float(-1023.96875), b_short(Short.MAX_VALUE) / p_float(-32.0))
    assertEquals(b_float(-1009.58215), b_short(Short.MAX_VALUE) / p_float(-32.456))
    assertEquals(b_float(0.0), b_short(Short.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(Short.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(Short.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("9.6293564E-35")), b_short(Short.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / p_float(0.0))
    assertEquals(b_float(-32768.0), b_short(Short.MIN_VALUE) / p_float(1.0))
    assertEquals(b_float(32768.0), b_short(Short.MIN_VALUE) / p_float(-1.0))
    assertEquals(b_float(-1424.6957), b_short(Short.MIN_VALUE) / p_float(23.0))
    assertEquals(b_float(-1417.1172), b_short(Short.MIN_VALUE) / p_float(23.123))
    assertEquals(b_float(1024.0), b_short(Short.MIN_VALUE) / p_float(-32.0))
    assertEquals(b_float(1009.613), b_short(Short.MIN_VALUE) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_short(Short.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_short(Short.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(Short.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.629651E-35")), b_short(Short.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_short(0) / p_float(0.0)))
  }

  function testShortFloatDivision() {
    assertEquals(b_float(Float.NaN_), b_short(0) / b_float(0.0))
    assertEquals(b_float(0.0), b_short(0) / b_float(1.0))
    assertEquals(b_float(-0.0), b_short(0) / b_float(-1.0))
    assertEquals(b_float(0.0), b_short(0) / b_float(23.0))
    assertEquals(b_float(0.0), b_short(0) / b_float(23.123))
    assertEquals(b_float(-0.0), b_short(0) / b_float(-32.0))
    assertEquals(b_float(-0.0), b_short(0) / b_float(-32.456))
    assertEquals(b_float(0.0), b_short(0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(0) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_short(0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_short(0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(1) / b_float(0.0))
    assertEquals(b_float(1.0), b_short(1) / b_float(1.0))
    assertEquals(b_float(-1.0), b_short(1) / b_float(-1.0))
    assertEquals(b_float(0.04347826), b_short(1) / b_float(23.0))
    assertEquals(b_float(0.043246984), b_short(1) / b_float(23.123))
    assertEquals(b_float(-0.03125), b_short(1) / b_float(-32.0))
    assertEquals(b_float(-0.030810943), b_short(1) / b_float(-32.456))
    assertEquals(b_float(0.0), b_short(1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), b_short(1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-1) / b_float(0.0))
    assertEquals(b_float(-1.0), b_short(-1) / b_float(1.0))
    assertEquals(b_float(1.0), b_short(-1) / b_float(-1.0))
    assertEquals(b_float(-0.04347826), b_short(-1) / b_float(23.0))
    assertEquals(b_float(-0.043246984), b_short(-1) / b_float(23.123))
    assertEquals(b_float(0.03125), b_short(-1) / b_float(-32.0))
    assertEquals(b_float(0.030810943), b_short(-1) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_short(-1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_short(-1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(-1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), b_short(-1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(23) / b_float(0.0))
    assertEquals(b_float(23.0), b_short(23) / b_float(1.0))
    assertEquals(b_float(-23.0), b_short(23) / b_float(-1.0))
    assertEquals(b_float(1.0), b_short(23) / b_float(23.0))
    assertEquals(b_float(0.99468064), b_short(23) / b_float(23.123))
    assertEquals(b_float(-0.71875), b_short(23) / b_float(-32.0))
    assertEquals(b_float(-0.70865166), b_short(23) / b_float(-32.456))
    assertEquals(b_float(0.0), b_short(23) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(23) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(23) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), b_short(23) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(23) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-32) / b_float(0.0))
    assertEquals(b_float(-32.0), b_short(-32) / b_float(1.0))
    assertEquals(b_float(32.0), b_short(-32) / b_float(-1.0))
    assertEquals(b_float(-1.3913044), b_short(-32) / b_float(23.0))
    assertEquals(b_float(-1.3839035), b_short(-32) / b_float(23.123))
    assertEquals(b_float(1.0), b_short(-32) / b_float(-32.0))
    assertEquals(b_float(0.9859502), b_short(-32) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_short(-32) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_short(-32) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(-32) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), b_short(-32) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(-32) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / b_float(0.0))
    assertEquals(b_float(32767.0), b_short(Short.MAX_VALUE) / b_float(1.0))
    assertEquals(b_float(-32767.0), b_short(Short.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_float(1424.6522), b_short(Short.MAX_VALUE) / b_float(23.0))
    assertEquals(b_float(1417.074), b_short(Short.MAX_VALUE) / b_float(23.123))
    assertEquals(b_float(-1023.96875), b_short(Short.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_float(-1009.58215), b_short(Short.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), b_short(Short.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_short(Short.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(Short.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("9.6293564E-35")), b_short(Short.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / b_float(0.0))
    assertEquals(b_float(-32768.0), b_short(Short.MIN_VALUE) / b_float(1.0))
    assertEquals(b_float(32768.0), b_short(Short.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_float(-1424.6957), b_short(Short.MIN_VALUE) / b_float(23.0))
    assertEquals(b_float(-1417.1172), b_short(Short.MIN_VALUE) / b_float(23.123))
    assertEquals(b_float(1024.0), b_short(Short.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_float(1009.613), b_short(Short.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_short(Short.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_short(Short.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_short(Short.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.629651E-35")), b_short(Short.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_short(0) / b_float(0.0)))
  }

  function testShortPDoubleDivision() {
    assertEquals(b_double(Double.NaN_), b_short(0) / p_double(0.0))
    assertEquals(b_double(0.0), b_short(0) / p_double(1.0))
    assertEquals(b_double(-0.0), b_short(0) / p_double(-1.0))
    assertEquals(b_double(0.0), b_short(0) / p_double(23.0))
    assertEquals(b_double(0.0), b_short(0) / p_double(23.123))
    assertEquals(b_double(-0.0), b_short(0) / p_double(-32.0))
    assertEquals(b_double(-0.0), b_short(0) / p_double(-32.456))
    assertEquals(b_double(0.0), b_short(0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(0) / p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_short(0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_short(0) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(1) / p_double(0.0))
    assertEquals(b_double(1.0), b_short(1) / p_double(1.0))
    assertEquals(b_double(-1.0), b_short(1) / p_double(-1.0))
    assertEquals(b_double(0.043478260869565216), b_short(1) / p_double(23.0))
    assertEquals(b_double(0.043246983522899275), b_short(1) / p_double(23.123))
    assertEquals(b_double(-0.03125), b_short(1) / p_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), b_short(1) / p_double(-32.456))
    assertEquals(b_double(0.0), b_short(1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(1) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), b_short(1) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(1) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-1) / p_double(0.0))
    assertEquals(b_double(-1.0), b_short(-1) / p_double(1.0))
    assertEquals(b_double(1.0), b_short(-1) / p_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), b_short(-1) / p_double(23.0))
    assertEquals(b_double(-0.043246983522899275), b_short(-1) / p_double(23.123))
    assertEquals(b_double(0.03125), b_short(-1) / p_double(-32.0))
    assertEquals(b_double(0.03081094404732561), b_short(-1) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_short(-1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_short(-1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(-1) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), b_short(-1) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-1) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(23) / p_double(0.0))
    assertEquals(b_double(23.0), b_short(23) / p_double(1.0))
    assertEquals(b_double(-23.0), b_short(23) / p_double(-1.0))
    assertEquals(b_double(1.0), b_short(23) / p_double(23.0))
    assertEquals(b_double(0.9946806210266833), b_short(23) / p_double(23.123))
    assertEquals(b_double(-0.71875), b_short(23) / p_double(-32.0))
    assertEquals(b_double(-0.708651713088489), b_short(23) / p_double(-32.456))
    assertEquals(b_double(0.0), b_short(23) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(23) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(23) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), b_short(23) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(23) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-32) / p_double(0.0))
    assertEquals(b_double(-32.0), b_short(-32) / p_double(1.0))
    assertEquals(b_double(32.0), b_short(-32) / p_double(-1.0))
    assertEquals(b_double(-1.391304347826087), b_short(-32) / p_double(23.0))
    assertEquals(b_double(-1.3839034727327768), b_short(-32) / p_double(23.123))
    assertEquals(b_double(1.0), b_short(-32) / p_double(-32.0))
    assertEquals(b_double(0.9859502095144195), b_short(-32) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_short(-32) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_short(-32) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(-32) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), b_short(-32) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-32) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / p_double(0.0))
    assertEquals(b_double(32767.0), b_short(Short.MAX_VALUE) / p_double(1.0))
    assertEquals(b_double(-32767.0), b_short(Short.MAX_VALUE) / p_double(-1.0))
    assertEquals(b_double(1424.6521739130435), b_short(Short.MAX_VALUE) / p_double(23.0))
    assertEquals(b_double(1417.0739090948405), b_short(Short.MAX_VALUE) / p_double(23.123))
    assertEquals(b_double(-1023.96875), b_short(Short.MAX_VALUE) / p_double(-32.0))
    assertEquals(b_double(-1009.5822035987181), b_short(Short.MAX_VALUE) / p_double(-32.456))
    assertEquals(b_double(0.0), b_short(Short.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(Short.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(Short.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.8227248780426369E-304")), b_short(Short.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / p_double(0.0))
    assertEquals(b_double(-32768.0), b_short(Short.MIN_VALUE) / p_double(1.0))
    assertEquals(b_double(32768.0), b_short(Short.MIN_VALUE) / p_double(-1.0))
    assertEquals(b_double(-1424.695652173913), b_short(Short.MIN_VALUE) / p_double(23.0))
    assertEquals(b_double(-1417.1171560783635), b_short(Short.MIN_VALUE) / p_double(23.123))
    assertEquals(b_double(1024.0), b_short(Short.MIN_VALUE) / p_double(-32.0))
    assertEquals(b_double(1009.6130145427655), b_short(Short.MIN_VALUE) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_short(Short.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_short(Short.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(Short.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.8227805048890998E-304")), b_short(Short.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_short(0) / p_double(0.0)))
  }

  function testShortDoubleDivision() {
    assertEquals(b_double(Double.NaN_), b_short(0) / b_double(0.0))
    assertEquals(b_double(0.0), b_short(0) / b_double(1.0))
    assertEquals(b_double(-0.0), b_short(0) / b_double(-1.0))
    assertEquals(b_double(0.0), b_short(0) / b_double(23.0))
    assertEquals(b_double(0.0), b_short(0) / b_double(23.123))
    assertEquals(b_double(-0.0), b_short(0) / b_double(-32.0))
    assertEquals(b_double(-0.0), b_short(0) / b_double(-32.456))
    assertEquals(b_double(0.0), b_short(0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_short(0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_short(0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(1) / b_double(0.0))
    assertEquals(b_double(1.0), b_short(1) / b_double(1.0))
    assertEquals(b_double(-1.0), b_short(1) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), b_short(1) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), b_short(1) / b_double(23.123))
    assertEquals(b_double(-0.03125), b_short(1) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), b_short(1) / b_double(-32.456))
    assertEquals(b_double(0.0), b_short(1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), b_short(1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-1) / b_double(0.0))
    assertEquals(b_double(-1.0), b_short(-1) / b_double(1.0))
    assertEquals(b_double(1.0), b_short(-1) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), b_short(-1) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), b_short(-1) / b_double(23.123))
    assertEquals(b_double(0.03125), b_short(-1) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), b_short(-1) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_short(-1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_short(-1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(-1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), b_short(-1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(23) / b_double(0.0))
    assertEquals(b_double(23.0), b_short(23) / b_double(1.0))
    assertEquals(b_double(-23.0), b_short(23) / b_double(-1.0))
    assertEquals(b_double(1.0), b_short(23) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), b_short(23) / b_double(23.123))
    assertEquals(b_double(-0.71875), b_short(23) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), b_short(23) / b_double(-32.456))
    assertEquals(b_double(0.0), b_short(23) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(23) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(23) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), b_short(23) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(23) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-32) / b_double(0.0))
    assertEquals(b_double(-32.0), b_short(-32) / b_double(1.0))
    assertEquals(b_double(32.0), b_short(-32) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), b_short(-32) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), b_short(-32) / b_double(23.123))
    assertEquals(b_double(1.0), b_short(-32) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), b_short(-32) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_short(-32) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_short(-32) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(-32) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), b_short(-32) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(-32) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(32767.0), b_short(Short.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(-32767.0), b_short(Short.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(1424.6521739130435), b_short(Short.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(1417.0739090948405), b_short(Short.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(-1023.96875), b_short(Short.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(-1009.5822035987181), b_short(Short.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), b_short(Short.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_short(Short.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(Short.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.8227248780426369E-304")), b_short(Short.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_short(Short.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(-32768.0), b_short(Short.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(32768.0), b_short(Short.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(-1424.695652173913), b_short(Short.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(-1417.1171560783635), b_short(Short.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(1024.0), b_short(Short.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(1009.6130145427655), b_short(Short.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_short(Short.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_short(Short.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_short(Short.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.8227805048890998E-304")), b_short(Short.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_short(Short.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_short(0) / b_double(0.0)))
  }

  function testShortBigIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(0) / big_int("0"))
    assertEquals(big_int("0"), b_short(0) / big_int("1"))
    assertEquals(big_int("0"), b_short(0) / big_int("-1"))
    assertEquals(big_int("0"), b_short(0) / big_int("23"))
    assertEquals(big_int("0"), b_short(0) / big_int("-32"))
    assertEquals(big_int("0"), b_short(0) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(1) / big_int("0"))
    assertEquals(big_int("1"), b_short(1) / big_int("1"))
    assertEquals(big_int("-1"), b_short(1) / big_int("-1"))
    assertEquals(big_int("0"), b_short(1) / big_int("23"))
    assertEquals(big_int("0"), b_short(1) / big_int("-32"))
    assertEquals(big_int("0"), b_short(1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(-1) / big_int("0"))
    assertEquals(big_int("-1"), b_short(-1) / big_int("1"))
    assertEquals(big_int("1"), b_short(-1) / big_int("-1"))
    assertEquals(big_int("0"), b_short(-1) / big_int("23"))
    assertEquals(big_int("0"), b_short(-1) / big_int("-32"))
    assertEquals(big_int("0"), b_short(-1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(-1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(23) / big_int("0"))
    assertEquals(big_int("23"), b_short(23) / big_int("1"))
    assertEquals(big_int("-23"), b_short(23) / big_int("-1"))
    assertEquals(big_int("1"), b_short(23) / big_int("23"))
    assertEquals(big_int("0"), b_short(23) / big_int("-32"))
    assertEquals(big_int("0"), b_short(23) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(23) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(-32) / big_int("0"))
    assertEquals(big_int("-32"), b_short(-32) / big_int("1"))
    assertEquals(big_int("32"), b_short(-32) / big_int("-1"))
    assertEquals(big_int("-1"), b_short(-32) / big_int("23"))
    assertEquals(big_int("1"), b_short(-32) / big_int("-32"))
    assertEquals(big_int("0"), b_short(-32) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(-32) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(Short.MAX_VALUE) / big_int("0"))
    assertEquals(big_int("32767"), b_short(Short.MAX_VALUE) / big_int("1"))
    assertEquals(big_int("-32767"), b_short(Short.MAX_VALUE) / big_int("-1"))
    assertEquals(big_int("1424"), b_short(Short.MAX_VALUE) / big_int("23"))
    assertEquals(big_int("-1023"), b_short(Short.MAX_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), b_short(Short.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(Short.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_short(Short.MIN_VALUE) / big_int("0"))
    assertEquals(big_int("-32768"), b_short(Short.MIN_VALUE) / big_int("1"))
    assertEquals(big_int("32768"), b_short(Short.MIN_VALUE) / big_int("-1"))
    assertEquals(big_int("-1424"), b_short(Short.MIN_VALUE) / big_int("23"))
    assertEquals(big_int("1024"), b_short(Short.MIN_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), b_short(Short.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_short(Short.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(b_short(0) / big_int("0")))
  }

  function testShortBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> b_short(0) / big_decimal("0"))
    assertEquals(big_decimal("0"), b_short(0) / big_decimal("1"))
    assertEquals(big_decimal("0"), b_short(0) / big_decimal("-1"))
    assertEquals(big_decimal("0"), b_short(0) / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), b_short(0) / big_decimal("23.123"))
    assertEquals(big_decimal("0"), b_short(0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), b_short(0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), b_short(0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), b_short(0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_short(1) / big_decimal("0"))
    assertEquals(big_decimal("1"), b_short(1) / big_decimal("1"))
    assertEquals(big_decimal("-1"), b_short(1) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), b_short(1) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), b_short(1) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), b_short(1) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), b_short(1) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), b_short(1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), b_short(1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_short(-1) / big_decimal("0"))
    assertEquals(big_decimal("-1"), b_short(-1) / big_decimal("1"))
    assertEquals(big_decimal("1"), b_short(-1) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), b_short(-1) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), b_short(-1) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), b_short(-1) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), b_short(-1) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), b_short(-1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), b_short(-1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_short(23) / big_decimal("0"))
    assertEquals(big_decimal("23"), b_short(23) / big_decimal("1"))
    assertEquals(big_decimal("-23"), b_short(23) / big_decimal("-1"))
    assertEquals(big_decimal("1"), b_short(23) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), b_short(23) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), b_short(23) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), b_short(23) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), b_short(23) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), b_short(23) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_short(-32) / big_decimal("0"))
    assertEquals(big_decimal("-32"), b_short(-32) / big_decimal("1"))
    assertEquals(big_decimal("32"), b_short(-32) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), b_short(-32) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), b_short(-32) / big_decimal("23.123"))
    assertEquals(big_decimal("1"), b_short(-32) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), b_short(-32) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), b_short(-32) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), b_short(-32) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_short(Short.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("32767"), b_short(Short.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-32767"), b_short(Short.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("1424.652173913043478260869565217391"), b_short(Short.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("1417.073909094840634865718116161398"), b_short(Short.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-1023.96875"), b_short(Short.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-1009.582203598718264727631254621642"), b_short(Short.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("2.654127023887143217373003278094330E-25"), b_short(Short.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2.654127023887143217373003278094330E-25"), b_short(Short.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_short(Short.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("-32768"), b_short(Short.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("32768"), b_short(Short.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("-1424.695652173913043478260869565217"), b_short(Short.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("-1417.117156078363534143493491328980"), b_short(Short.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("1024"), b_short(Short.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("1009.613014542765590337687946758689"), b_short(Short.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.654208023887872217379637178154698E-25"), b_short(Short.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.654208023887872217379637178154698E-25"), b_short(Short.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_short(0) / big_decimal("0")))
  }

}

