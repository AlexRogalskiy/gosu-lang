package gw.spec.core.expressions.arithmetic.multiplication
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Multiplication_IntegerTest extends ArithmeticTestBase {

  function testIntegerPByteMultiplication() {
    assertEquals(b_int(0), b_int(0) !* p_byte(0))
    assertEquals(b_int(0), b_int(0) !* p_byte(1))
    assertEquals(b_int(0), b_int(0) !* p_byte(-1))
    assertEquals(b_int(0), b_int(0) !* p_byte(23))
    assertEquals(b_int(0), b_int(0) !* p_byte(-32))
    assertEquals(b_int(0), b_int(0) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) !* p_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(1) !* p_byte(0))
    assertEquals(b_int(1), b_int(1) !* p_byte(1))
    assertEquals(b_int(-1), b_int(1) !* p_byte(-1))
    assertEquals(b_int(23), b_int(1) !* p_byte(23))
    assertEquals(b_int(-32), b_int(1) !* p_byte(-32))
    assertEquals(b_int(127), b_int(1) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-128), b_int(1) !* p_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(-1) !* p_byte(0))
    assertEquals(b_int(-1), b_int(-1) !* p_byte(1))
    assertEquals(b_int(1), b_int(-1) !* p_byte(-1))
    assertEquals(b_int(-23), b_int(-1) !* p_byte(23))
    assertEquals(b_int(32), b_int(-1) !* p_byte(-32))
    assertEquals(b_int(-127), b_int(-1) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(128), b_int(-1) !* p_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(23) !* p_byte(0))
    assertEquals(b_int(23), b_int(23) !* p_byte(1))
    assertEquals(b_int(-23), b_int(23) !* p_byte(-1))
    assertEquals(b_int(529), b_int(23) !* p_byte(23))
    assertEquals(b_int(-736), b_int(23) !* p_byte(-32))
    assertEquals(b_int(2921), b_int(23) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-2944), b_int(23) !* p_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(-32) !* p_byte(0))
    assertEquals(b_int(-32), b_int(-32) !* p_byte(1))
    assertEquals(b_int(32), b_int(-32) !* p_byte(-1))
    assertEquals(b_int(-736), b_int(-32) !* p_byte(23))
    assertEquals(b_int(1024), b_int(-32) !* p_byte(-32))
    assertEquals(b_int(-4064), b_int(-32) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(4096), b_int(-32) !* p_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* p_byte(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* p_byte(1))
    assertEquals(b_int(-2147483647), b_int(Integer.MAX_VALUE) !* p_byte(-1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* p_byte(23))
    assertEquals(b_int(32), b_int(Integer.MAX_VALUE) !* p_byte(-32))
    assertEquals(b_int(2147483521), b_int(Integer.MAX_VALUE) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(128), b_int(Integer.MAX_VALUE) !* p_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_byte(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_byte(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_byte(-1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_byte(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_byte(-32))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* p_byte(0)))
  }

  function testIntegerByteMultiplication() {
    assertEquals(b_int(0), b_int(0) !* b_byte(0))
    assertEquals(b_int(0), b_int(0) !* p_byte(1))
    assertEquals(b_int(0), b_int(0) !* p_byte(-1))
    assertEquals(b_int(0), b_int(0) !* b_byte(23))
    assertEquals(b_int(0), b_int(0) !* b_byte(-32))
    assertEquals(b_int(0), b_int(0) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(1) !* b_byte(0))
    assertEquals(b_int(1), b_int(1) !* p_byte(1))
    assertEquals(b_int(-1), b_int(1) !* p_byte(-1))
    assertEquals(b_int(23), b_int(1) !* b_byte(23))
    assertEquals(b_int(-32), b_int(1) !* b_byte(-32))
    assertEquals(b_int(127), b_int(1) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-128), b_int(1) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(-1) !* b_byte(0))
    assertEquals(b_int(-1), b_int(-1) !* p_byte(1))
    assertEquals(b_int(1), b_int(-1) !* p_byte(-1))
    assertEquals(b_int(-23), b_int(-1) !* b_byte(23))
    assertEquals(b_int(32), b_int(-1) !* b_byte(-32))
    assertEquals(b_int(-127), b_int(-1) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(128), b_int(-1) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(23) !* b_byte(0))
    assertEquals(b_int(23), b_int(23) !* p_byte(1))
    assertEquals(b_int(-23), b_int(23) !* p_byte(-1))
    assertEquals(b_int(529), b_int(23) !* b_byte(23))
    assertEquals(b_int(-736), b_int(23) !* b_byte(-32))
    assertEquals(b_int(2921), b_int(23) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-2944), b_int(23) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(-32) !* b_byte(0))
    assertEquals(b_int(-32), b_int(-32) !* p_byte(1))
    assertEquals(b_int(32), b_int(-32) !* p_byte(-1))
    assertEquals(b_int(-736), b_int(-32) !* b_byte(23))
    assertEquals(b_int(1024), b_int(-32) !* b_byte(-32))
    assertEquals(b_int(-4064), b_int(-32) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(4096), b_int(-32) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* b_byte(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* p_byte(1))
    assertEquals(b_int(-2147483647), b_int(Integer.MAX_VALUE) !* p_byte(-1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* b_byte(23))
    assertEquals(b_int(32), b_int(Integer.MAX_VALUE) !* b_byte(-32))
    assertEquals(b_int(2147483521), b_int(Integer.MAX_VALUE) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(128), b_int(Integer.MAX_VALUE) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_byte(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_byte(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_byte(-1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_byte(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_byte(-32))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* b_byte(0)))
  }

  function testIntegerPShortMultiplication() {
    assertEquals(b_int(0), b_int(0) !* p_short(0))
    assertEquals(b_int(0), b_int(0) !* p_short(1))
    assertEquals(b_int(0), b_int(0) !* p_short(-1))
    assertEquals(b_int(0), b_int(0) !* p_short(23))
    assertEquals(b_int(0), b_int(0) !* p_short(-32))
    assertEquals(b_int(0), b_int(0) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) !* p_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(1) !* p_short(0))
    assertEquals(b_int(1), b_int(1) !* p_short(1))
    assertEquals(b_int(-1), b_int(1) !* p_short(-1))
    assertEquals(b_int(23), b_int(1) !* p_short(23))
    assertEquals(b_int(-32), b_int(1) !* p_short(-32))
    assertEquals(b_int(32767), b_int(1) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(-32768), b_int(1) !* p_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(-1) !* p_short(0))
    assertEquals(b_int(-1), b_int(-1) !* p_short(1))
    assertEquals(b_int(1), b_int(-1) !* p_short(-1))
    assertEquals(b_int(-23), b_int(-1) !* p_short(23))
    assertEquals(b_int(32), b_int(-1) !* p_short(-32))
    assertEquals(b_int(-32767), b_int(-1) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(32768), b_int(-1) !* p_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(23) !* p_short(0))
    assertEquals(b_int(23), b_int(23) !* p_short(1))
    assertEquals(b_int(-23), b_int(23) !* p_short(-1))
    assertEquals(b_int(529), b_int(23) !* p_short(23))
    assertEquals(b_int(-736), b_int(23) !* p_short(-32))
    assertEquals(b_int(753641), b_int(23) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(-753664), b_int(23) !* p_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(-32) !* p_short(0))
    assertEquals(b_int(-32), b_int(-32) !* p_short(1))
    assertEquals(b_int(32), b_int(-32) !* p_short(-1))
    assertEquals(b_int(-736), b_int(-32) !* p_short(23))
    assertEquals(b_int(1024), b_int(-32) !* p_short(-32))
    assertEquals(b_int(-1048544), b_int(-32) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(1048576), b_int(-32) !* p_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* p_short(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* p_short(1))
    assertEquals(b_int(-2147483647), b_int(Integer.MAX_VALUE) !* p_short(-1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* p_short(23))
    assertEquals(b_int(32), b_int(Integer.MAX_VALUE) !* p_short(-32))
    assertEquals(b_int(2147450881), b_int(Integer.MAX_VALUE) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(32768), b_int(Integer.MAX_VALUE) !* p_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_short(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_short(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_short(-1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_short(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_short(-32))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* p_short(0)))
  }

  function testIntegerShortMultiplication() {
    assertEquals(b_int(0), b_int(0) !* b_short(0))
    assertEquals(b_int(0), b_int(0) !* b_short(1))
    assertEquals(b_int(0), b_int(0) !* b_short(-1))
    assertEquals(b_int(0), b_int(0) !* b_short(23))
    assertEquals(b_int(0), b_int(0) !* b_short(-32))
    assertEquals(b_int(0), b_int(0) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(1) !* b_short(0))
    assertEquals(b_int(1), b_int(1) !* b_short(1))
    assertEquals(b_int(-1), b_int(1) !* b_short(-1))
    assertEquals(b_int(23), b_int(1) !* b_short(23))
    assertEquals(b_int(-32), b_int(1) !* b_short(-32))
    assertEquals(b_int(32767), b_int(1) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(-32768), b_int(1) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(-1) !* b_short(0))
    assertEquals(b_int(-1), b_int(-1) !* b_short(1))
    assertEquals(b_int(1), b_int(-1) !* b_short(-1))
    assertEquals(b_int(-23), b_int(-1) !* b_short(23))
    assertEquals(b_int(32), b_int(-1) !* b_short(-32))
    assertEquals(b_int(-32767), b_int(-1) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(32768), b_int(-1) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(23) !* b_short(0))
    assertEquals(b_int(23), b_int(23) !* b_short(1))
    assertEquals(b_int(-23), b_int(23) !* b_short(-1))
    assertEquals(b_int(529), b_int(23) !* b_short(23))
    assertEquals(b_int(-736), b_int(23) !* b_short(-32))
    assertEquals(b_int(753641), b_int(23) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(-753664), b_int(23) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(-32) !* b_short(0))
    assertEquals(b_int(-32), b_int(-32) !* b_short(1))
    assertEquals(b_int(32), b_int(-32) !* b_short(-1))
    assertEquals(b_int(-736), b_int(-32) !* b_short(23))
    assertEquals(b_int(1024), b_int(-32) !* b_short(-32))
    assertEquals(b_int(-1048544), b_int(-32) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(1048576), b_int(-32) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* b_short(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* b_short(1))
    assertEquals(b_int(-2147483647), b_int(Integer.MAX_VALUE) !* b_short(-1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* b_short(23))
    assertEquals(b_int(32), b_int(Integer.MAX_VALUE) !* b_short(-32))
    assertEquals(b_int(2147450881), b_int(Integer.MAX_VALUE) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(32768), b_int(Integer.MAX_VALUE) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_short(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_short(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_short(-1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_short(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_short(-32))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* b_short(0)))
  }

  function testIntegerPCharMultiplication() {
    assertEquals(b_int(0), b_int(0) !* p_char(0))
    assertEquals(b_int(0), b_int(0) !* p_char(1))
    assertEquals(b_int(0), b_int(0) !* p_char(23))
    assertEquals(b_int(0), b_int(0) !* p_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(1) !* p_char(0))
    assertEquals(b_int(1), b_int(1) !* p_char(1))
    assertEquals(b_int(23), b_int(1) !* p_char(23))
    assertEquals(b_int(65535), b_int(1) !* p_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(-1) !* p_char(0))
    assertEquals(b_int(-1), b_int(-1) !* p_char(1))
    assertEquals(b_int(-23), b_int(-1) !* p_char(23))
    assertEquals(b_int(-65535), b_int(-1) !* p_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(23) !* p_char(0))
    assertEquals(b_int(23), b_int(23) !* p_char(1))
    assertEquals(b_int(529), b_int(23) !* p_char(23))
    assertEquals(b_int(1507305), b_int(23) !* p_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(-32) !* p_char(0))
    assertEquals(b_int(-32), b_int(-32) !* p_char(1))
    assertEquals(b_int(-736), b_int(-32) !* p_char(23))
    assertEquals(b_int(-2097120), b_int(-32) !* p_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* p_char(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* p_char(1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* p_char(23))
    assertEquals(b_int(2147418113), b_int(Integer.MAX_VALUE) !* p_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_char(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_char(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_char(23))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* p_char(0)))
  }

  function testIntegerCharacterMultiplication() {
    assertEquals(b_int(0), b_int(0) !* b_char(0))
    assertEquals(b_int(0), b_int(0) !* b_char(1))
    assertEquals(b_int(0), b_int(0) !* b_char(23))
    assertEquals(b_int(0), b_int(0) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(1) !* b_char(0))
    assertEquals(b_int(1), b_int(1) !* b_char(1))
    assertEquals(b_int(23), b_int(1) !* b_char(23))
    assertEquals(b_int(65535), b_int(1) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(-1) !* b_char(0))
    assertEquals(b_int(-1), b_int(-1) !* b_char(1))
    assertEquals(b_int(-23), b_int(-1) !* b_char(23))
    assertEquals(b_int(-65535), b_int(-1) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(23) !* b_char(0))
    assertEquals(b_int(23), b_int(23) !* b_char(1))
    assertEquals(b_int(529), b_int(23) !* b_char(23))
    assertEquals(b_int(1507305), b_int(23) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(-32) !* b_char(0))
    assertEquals(b_int(-32), b_int(-32) !* b_char(1))
    assertEquals(b_int(-736), b_int(-32) !* b_char(23))
    assertEquals(b_int(-2097120), b_int(-32) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* b_char(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* b_char(1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* b_char(23))
    assertEquals(b_int(2147418113), b_int(Integer.MAX_VALUE) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_char(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_char(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_char(23))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* b_char(0)))
  }

  function testIntegerPIntMultiplication() {
    assertEquals(b_int(0), b_int(0) !* p_int(0))
    assertEquals(b_int(0), b_int(0) !* p_int(1))
    assertEquals(b_int(0), b_int(0) !* p_int(-1))
    assertEquals(b_int(0), b_int(0) !* p_int(23))
    assertEquals(b_int(0), b_int(0) !* p_int(-32))
    assertEquals(b_int(0), b_int(0) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) !* p_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(1) !* p_int(0))
    assertEquals(b_int(1), b_int(1) !* p_int(1))
    assertEquals(b_int(-1), b_int(1) !* p_int(-1))
    assertEquals(b_int(23), b_int(1) !* p_int(23))
    assertEquals(b_int(-32), b_int(1) !* p_int(-32))
    assertEquals(b_int(2147483647), b_int(1) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(1) !* p_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(-1) !* p_int(0))
    assertEquals(b_int(-1), b_int(-1) !* p_int(1))
    assertEquals(b_int(1), b_int(-1) !* p_int(-1))
    assertEquals(b_int(-23), b_int(-1) !* p_int(23))
    assertEquals(b_int(32), b_int(-1) !* p_int(-32))
    assertEquals(b_int(-2147483647), b_int(-1) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(-1) !* p_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(23) !* p_int(0))
    assertEquals(b_int(23), b_int(23) !* p_int(1))
    assertEquals(b_int(-23), b_int(23) !* p_int(-1))
    assertEquals(b_int(529), b_int(23) !* p_int(23))
    assertEquals(b_int(-736), b_int(23) !* p_int(-32))
    assertEquals(b_int(2147483625), b_int(23) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(23) !* p_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(-32) !* p_int(0))
    assertEquals(b_int(-32), b_int(-32) !* p_int(1))
    assertEquals(b_int(32), b_int(-32) !* p_int(-1))
    assertEquals(b_int(-736), b_int(-32) !* p_int(23))
    assertEquals(b_int(1024), b_int(-32) !* p_int(-32))
    assertEquals(b_int(32), b_int(-32) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(-32) !* p_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* p_int(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* p_int(1))
    assertEquals(b_int(-2147483647), b_int(Integer.MAX_VALUE) !* p_int(-1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* p_int(23))
    assertEquals(b_int(32), b_int(Integer.MAX_VALUE) !* p_int(-32))
    assertEquals(b_int(1), b_int(Integer.MAX_VALUE) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(Integer.MAX_VALUE) !* p_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_int(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_int(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_int(-1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_int(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_int(-32))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* p_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* p_int(0)))
  }

  function testIntegerIntegerMultiplication() {
    assertEquals(b_int(0), b_int(0) !* b_int(0))
    assertEquals(b_int(0), b_int(0) !* b_int(1))
    assertEquals(b_int(0), b_int(0) !* b_int(-1))
    assertEquals(b_int(0), b_int(0) !* b_int(23))
    assertEquals(b_int(0), b_int(0) !* b_int(-32))
    assertEquals(b_int(0), b_int(0) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(1) !* b_int(0))
    assertEquals(b_int(1), b_int(1) !* b_int(1))
    assertEquals(b_int(-1), b_int(1) !* b_int(-1))
    assertEquals(b_int(23), b_int(1) !* b_int(23))
    assertEquals(b_int(-32), b_int(1) !* b_int(-32))
    assertEquals(b_int(2147483647), b_int(1) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(1) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(-1) !* b_int(0))
    assertEquals(b_int(-1), b_int(-1) !* b_int(1))
    assertEquals(b_int(1), b_int(-1) !* b_int(-1))
    assertEquals(b_int(-23), b_int(-1) !* b_int(23))
    assertEquals(b_int(32), b_int(-1) !* b_int(-32))
    assertEquals(b_int(-2147483647), b_int(-1) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(-1) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(23) !* b_int(0))
    assertEquals(b_int(23), b_int(23) !* b_int(1))
    assertEquals(b_int(-23), b_int(23) !* b_int(-1))
    assertEquals(b_int(529), b_int(23) !* b_int(23))
    assertEquals(b_int(-736), b_int(23) !* b_int(-32))
    assertEquals(b_int(2147483625), b_int(23) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(23) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(-32) !* b_int(0))
    assertEquals(b_int(-32), b_int(-32) !* b_int(1))
    assertEquals(b_int(32), b_int(-32) !* b_int(-1))
    assertEquals(b_int(-736), b_int(-32) !* b_int(23))
    assertEquals(b_int(1024), b_int(-32) !* b_int(-32))
    assertEquals(b_int(32), b_int(-32) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(-32) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) !* b_int(0))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) !* b_int(1))
    assertEquals(b_int(-2147483647), b_int(Integer.MAX_VALUE) !* b_int(-1))
    assertEquals(b_int(2147483625), b_int(Integer.MAX_VALUE) !* b_int(23))
    assertEquals(b_int(32), b_int(Integer.MAX_VALUE) !* b_int(-32))
    assertEquals(b_int(1), b_int(Integer.MAX_VALUE) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), b_int(Integer.MAX_VALUE) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_int(0))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_int(1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_int(-1))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_int(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_int(-32))
    assertEquals(b_int(-2147483648), b_int(Integer.MIN_VALUE) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) !* b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) !* b_int(0)))
  }

  function testIntegerPLongMultiplication() {
    assertEquals(b_long(0), b_int(0) !* p_long(0))
    assertEquals(b_long(0), b_int(0) !* p_long(1))
    assertEquals(b_long(0), b_int(0) !* p_long(-1))
    assertEquals(b_long(0), b_int(0) !* p_long(23))
    assertEquals(b_long(0), b_int(0) !* p_long(-32))
    assertEquals(b_long(0), b_int(0) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(0) !* p_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(1) !* p_long(0))
    assertEquals(b_long(1), b_int(1) !* p_long(1))
    assertEquals(b_long(-1), b_int(1) !* p_long(-1))
    assertEquals(b_long(23), b_int(1) !* p_long(23))
    assertEquals(b_long(-32), b_int(1) !* p_long(-32))
    assertEquals(b_long(9223372036854775807), b_int(1) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(1) !* p_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(-1) !* p_long(0))
    assertEquals(b_long(-1), b_int(-1) !* p_long(1))
    assertEquals(b_long(1), b_int(-1) !* p_long(-1))
    assertEquals(b_long(-23), b_int(-1) !* p_long(23))
    assertEquals(b_long(32), b_int(-1) !* p_long(-32))
    assertEquals(b_long(-9223372036854775807), b_int(-1) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(-1) !* p_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(23) !* p_long(0))
    assertEquals(b_long(23), b_int(23) !* p_long(1))
    assertEquals(b_long(-23), b_int(23) !* p_long(-1))
    assertEquals(b_long(529), b_int(23) !* p_long(23))
    assertEquals(b_long(-736), b_int(23) !* p_long(-32))
    assertEquals(b_long(9223372036854775785), b_int(23) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(23) !* p_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(-32) !* p_long(0))
    assertEquals(b_long(-32), b_int(-32) !* p_long(1))
    assertEquals(b_long(32), b_int(-32) !* p_long(-1))
    assertEquals(b_long(-736), b_int(-32) !* p_long(23))
    assertEquals(b_long(1024), b_int(-32) !* p_long(-32))
    assertEquals(b_long(32), b_int(-32) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(-32) !* p_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(Integer.MAX_VALUE) !* p_long(0))
    assertEquals(b_long(2147483647), b_int(Integer.MAX_VALUE) !* p_long(1))
    assertEquals(b_long(-2147483647), b_int(Integer.MAX_VALUE) !* p_long(-1))
    assertEquals(b_long(49392123881), b_int(Integer.MAX_VALUE) !* p_long(23))
    assertEquals(b_long(-68719476704), b_int(Integer.MAX_VALUE) !* p_long(-32))
    assertEquals(b_long(9223372034707292161), b_int(Integer.MAX_VALUE) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(Integer.MAX_VALUE) !* p_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) !* p_long(0))
    assertEquals(b_long(-2147483648), b_int(Integer.MIN_VALUE) !* p_long(1))
    assertEquals(b_long(2147483648), b_int(Integer.MIN_VALUE) !* p_long(-1))
    assertEquals(b_long(-49392123904), b_int(Integer.MIN_VALUE) !* p_long(23))
    assertEquals(b_long(68719476736), b_int(Integer.MIN_VALUE) !* p_long(-32))
    assertEquals(b_long(2147483648), b_int(Integer.MIN_VALUE) !* p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) !* p_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_int(0) !* p_long(0)))
  }

  function testIntegerLongMultiplication() {
    assertEquals(b_long(0), b_int(0) !* b_long(0))
    assertEquals(b_long(0), b_int(0) !* b_long(1))
    assertEquals(b_long(0), b_int(0) !* b_long(-1))
    assertEquals(b_long(0), b_int(0) !* b_long(23))
    assertEquals(b_long(0), b_int(0) !* b_long(-32))
    assertEquals(b_long(0), b_int(0) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(0) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(1) !* b_long(0))
    assertEquals(b_long(1), b_int(1) !* b_long(1))
    assertEquals(b_long(-1), b_int(1) !* b_long(-1))
    assertEquals(b_long(23), b_int(1) !* b_long(23))
    assertEquals(b_long(-32), b_int(1) !* b_long(-32))
    assertEquals(b_long(9223372036854775807), b_int(1) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(1) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(-1) !* b_long(0))
    assertEquals(b_long(-1), b_int(-1) !* b_long(1))
    assertEquals(b_long(1), b_int(-1) !* b_long(-1))
    assertEquals(b_long(-23), b_int(-1) !* b_long(23))
    assertEquals(b_long(32), b_int(-1) !* b_long(-32))
    assertEquals(b_long(-9223372036854775807), b_int(-1) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(-1) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(23) !* b_long(0))
    assertEquals(b_long(23), b_int(23) !* b_long(1))
    assertEquals(b_long(-23), b_int(23) !* b_long(-1))
    assertEquals(b_long(529), b_int(23) !* b_long(23))
    assertEquals(b_long(-736), b_int(23) !* b_long(-32))
    assertEquals(b_long(9223372036854775785), b_int(23) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(23) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(-32) !* b_long(0))
    assertEquals(b_long(-32), b_int(-32) !* b_long(1))
    assertEquals(b_long(32), b_int(-32) !* b_long(-1))
    assertEquals(b_long(-736), b_int(-32) !* b_long(23))
    assertEquals(b_long(1024), b_int(-32) !* b_long(-32))
    assertEquals(b_long(32), b_int(-32) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(-32) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(Integer.MAX_VALUE) !* b_long(0))
    assertEquals(b_long(2147483647), b_int(Integer.MAX_VALUE) !* b_long(1))
    assertEquals(b_long(-2147483647), b_int(Integer.MAX_VALUE) !* b_long(-1))
    assertEquals(b_long(49392123881), b_int(Integer.MAX_VALUE) !* b_long(23))
    assertEquals(b_long(-68719476704), b_int(Integer.MAX_VALUE) !* b_long(-32))
    assertEquals(b_long(9223372034707292161), b_int(Integer.MAX_VALUE) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), b_int(Integer.MAX_VALUE) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) !* b_long(0))
    assertEquals(b_long(-2147483648), b_int(Integer.MIN_VALUE) !* b_long(1))
    assertEquals(b_long(2147483648), b_int(Integer.MIN_VALUE) !* b_long(-1))
    assertEquals(b_long(-49392123904), b_int(Integer.MIN_VALUE) !* b_long(23))
    assertEquals(b_long(68719476736), b_int(Integer.MIN_VALUE) !* b_long(-32))
    assertEquals(b_long(2147483648), b_int(Integer.MIN_VALUE) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) !* b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_int(0) !* b_long(0)))
  }

  function testIntegerPFloatMultiplication() {
    assertEquals(b_float(0.0), b_int(0) * p_float(0.0))
    assertEquals(b_float(0.0), b_int(0) * p_float(1.0))
    assertEquals(b_float(-0.0), b_int(0) * p_float(-1.0))
    assertEquals(b_float(0.0), b_int(0) * p_float(23.0))
    assertEquals(b_float(0.0), b_int(0) * p_float(23.123))
    assertEquals(b_float(-0.0), b_int(0) * p_float(-32.0))
    assertEquals(b_float(-0.0), b_int(0) * p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_int(0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(0) * p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_int(0) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(0) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_int(1) * p_float(0.0))
    assertEquals(b_float(1.0), b_int(1) * p_float(1.0))
    assertEquals(b_float(-1.0), b_int(1) * p_float(-1.0))
    assertEquals(b_float(23.0), b_int(1) * p_float(23.0))
    assertEquals(b_float(23.123), b_int(1) * p_float(23.123))
    assertEquals(b_float(-32.0), b_int(1) * p_float(-32.0))
    assertEquals(b_float(-32.456), b_int(1) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(1) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(1) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(1) * p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_int(1) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_int(1) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_int(-1) * p_float(0.0))
    assertEquals(b_float(-1.0), b_int(-1) * p_float(1.0))
    assertEquals(b_float(1.0), b_int(-1) * p_float(-1.0))
    assertEquals(b_float(-23.0), b_int(-1) * p_float(23.0))
    assertEquals(b_float(-23.123), b_int(-1) * p_float(23.123))
    assertEquals(b_float(32.0), b_int(-1) * p_float(-32.0))
    assertEquals(b_float(32.456), b_int(-1) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(-1) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(-1) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-1) * p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_int(-1) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_int(-1) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_int(23) * p_float(0.0))
    assertEquals(b_float(23.0), b_int(23) * p_float(1.0))
    assertEquals(b_float(-23.0), b_int(23) * p_float(-1.0))
    assertEquals(b_float(529.0), b_int(23) * p_float(23.0))
    assertEquals(b_float(531.829), b_int(23) * p_float(23.123))
    assertEquals(b_float(-736.0), b_int(23) * p_float(-32.0))
    assertEquals(b_float(-746.48804), b_int(23) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(23) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(23) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(23) * p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(23) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_int(23) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_int(-32) * p_float(0.0))
    assertEquals(b_float(-32.0), b_int(-32) * p_float(1.0))
    assertEquals(b_float(32.0), b_int(-32) * p_float(-1.0))
    assertEquals(b_float(-736.0), b_int(-32) * p_float(23.0))
    assertEquals(b_float(-739.936), b_int(-32) * p_float(23.123))
    assertEquals(b_float(1024.0), b_int(-32) * p_float(-32.0))
    assertEquals(b_float(1038.592), b_int(-32) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(-32) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(-32) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-32) * p_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(-32) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_int(-32) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) * p_float(0.0))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) * p_float(1.0))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MAX_VALUE) * p_float(-1.0))
    assertEquals(b_float(Float.parseFloat("4.9392124E10")), b_int(Integer.MAX_VALUE) * p_float(23.0))
    assertEquals(b_float(Float.parseFloat("4.9656263E10")), b_int(Integer.MAX_VALUE) * p_float(23.123))
    assertEquals(b_float(Float.parseFloat("-6.8719477E10")), b_int(Integer.MAX_VALUE) * p_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-6.9698732E10")), b_int(Integer.MAX_VALUE) * p_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(Integer.MAX_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MAX_VALUE) * p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.0092655E-36")), b_int(Integer.MAX_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) * p_float(0.0))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) * p_float(1.0))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MIN_VALUE) * p_float(-1.0))
    assertEquals(b_float(Float.parseFloat("-4.9392124E10")), b_int(Integer.MIN_VALUE) * p_float(23.0))
    assertEquals(b_float(Float.parseFloat("-4.9656263E10")), b_int(Integer.MIN_VALUE) * p_float(23.123))
    assertEquals(b_float(Float.parseFloat("6.8719477E10")), b_int(Integer.MIN_VALUE) * p_float(-32.0))
    assertEquals(b_float(Float.parseFloat("6.9698732E10")), b_int(Integer.MIN_VALUE) * p_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(Integer.MIN_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MIN_VALUE) * p_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.0092655E-36")), b_int(Integer.MIN_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_int(0) * p_float(0.0)))
  }

  function testIntegerFloatMultiplication() {
    assertEquals(b_float(0.0), b_int(0) * b_float(0.0))
    assertEquals(b_float(0.0), b_int(0) * b_float(1.0))
    assertEquals(b_float(-0.0), b_int(0) * b_float(-1.0))
    assertEquals(b_float(0.0), b_int(0) * b_float(23.0))
    assertEquals(b_float(0.0), b_int(0) * b_float(23.123))
    assertEquals(b_float(-0.0), b_int(0) * b_float(-32.0))
    assertEquals(b_float(-0.0), b_int(0) * b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_int(0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(0) * b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_int(0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_int(1) * b_float(0.0))
    assertEquals(b_float(1.0), b_int(1) * b_float(1.0))
    assertEquals(b_float(-1.0), b_int(1) * b_float(-1.0))
    assertEquals(b_float(23.0), b_int(1) * b_float(23.0))
    assertEquals(b_float(23.123), b_int(1) * b_float(23.123))
    assertEquals(b_float(-32.0), b_int(1) * b_float(-32.0))
    assertEquals(b_float(-32.456), b_int(1) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(1) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(1) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(1) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_int(1) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_int(1) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_int(-1) * b_float(0.0))
    assertEquals(b_float(-1.0), b_int(-1) * b_float(1.0))
    assertEquals(b_float(1.0), b_int(-1) * b_float(-1.0))
    assertEquals(b_float(-23.0), b_int(-1) * b_float(23.0))
    assertEquals(b_float(-23.123), b_int(-1) * b_float(23.123))
    assertEquals(b_float(32.0), b_int(-1) * b_float(-32.0))
    assertEquals(b_float(32.456), b_int(-1) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(-1) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(-1) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-1) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_int(-1) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_int(-1) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_int(23) * b_float(0.0))
    assertEquals(b_float(23.0), b_int(23) * b_float(1.0))
    assertEquals(b_float(-23.0), b_int(23) * b_float(-1.0))
    assertEquals(b_float(529.0), b_int(23) * b_float(23.0))
    assertEquals(b_float(531.829), b_int(23) * b_float(23.123))
    assertEquals(b_float(-736.0), b_int(23) * b_float(-32.0))
    assertEquals(b_float(-746.48804), b_int(23) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(23) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(23) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(23) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(23) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), b_int(23) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_int(-32) * b_float(0.0))
    assertEquals(b_float(-32.0), b_int(-32) * b_float(1.0))
    assertEquals(b_float(32.0), b_int(-32) * b_float(-1.0))
    assertEquals(b_float(-736.0), b_int(-32) * b_float(23.0))
    assertEquals(b_float(-739.936), b_int(-32) * b_float(23.123))
    assertEquals(b_float(1024.0), b_int(-32) * b_float(-32.0))
    assertEquals(b_float(1038.592), b_int(-32) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(-32) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(-32) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-32) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(-32) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), b_int(-32) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) * b_float(0.0))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) * b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MAX_VALUE) * b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("4.9392124E10")), b_int(Integer.MAX_VALUE) * b_float(23.0))
    assertEquals(b_float(Float.parseFloat("4.9656263E10")), b_int(Integer.MAX_VALUE) * b_float(23.123))
    assertEquals(b_float(Float.parseFloat("-6.8719477E10")), b_int(Integer.MAX_VALUE) * b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-6.9698732E10")), b_int(Integer.MAX_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(Integer.MAX_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MAX_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.0092655E-36")), b_int(Integer.MAX_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) * b_float(0.0))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) * b_float(1.0))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MIN_VALUE) * b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("-4.9392124E10")), b_int(Integer.MIN_VALUE) * b_float(23.0))
    assertEquals(b_float(Float.parseFloat("-4.9656263E10")), b_int(Integer.MIN_VALUE) * b_float(23.123))
    assertEquals(b_float(Float.parseFloat("6.8719477E10")), b_int(Integer.MIN_VALUE) * b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("6.9698732E10")), b_int(Integer.MIN_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_int(Integer.MIN_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MIN_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.0092655E-36")), b_int(Integer.MIN_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_int(0) * b_float(0.0)))
  }

  function testIntegerPDoubleMultiplication() {
    assertEquals(b_double(0.0), b_int(0) * p_double(0.0))
    assertEquals(b_double(0.0), b_int(0) * p_double(1.0))
    assertEquals(b_double(-0.0), b_int(0) * p_double(-1.0))
    assertEquals(b_double(0.0), b_int(0) * p_double(23.0))
    assertEquals(b_double(0.0), b_int(0) * p_double(23.123))
    assertEquals(b_double(-0.0), b_int(0) * p_double(-32.0))
    assertEquals(b_double(-0.0), b_int(0) * p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_int(0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(0) * p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_int(0) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(0) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_int(1) * p_double(0.0))
    assertEquals(b_double(1.0), b_int(1) * p_double(1.0))
    assertEquals(b_double(-1.0), b_int(1) * p_double(-1.0))
    assertEquals(b_double(23.0), b_int(1) * p_double(23.0))
    assertEquals(b_double(23.123), b_int(1) * p_double(23.123))
    assertEquals(b_double(-32.0), b_int(1) * p_double(-32.0))
    assertEquals(b_double(-32.456), b_int(1) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(1) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(1) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(1) * p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_int(1) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), b_int(1) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_int(-1) * p_double(0.0))
    assertEquals(b_double(-1.0), b_int(-1) * p_double(1.0))
    assertEquals(b_double(1.0), b_int(-1) * p_double(-1.0))
    assertEquals(b_double(-23.0), b_int(-1) * p_double(23.0))
    assertEquals(b_double(-23.123), b_int(-1) * p_double(23.123))
    assertEquals(b_double(32.0), b_int(-1) * p_double(-32.0))
    assertEquals(b_double(32.456), b_int(-1) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(-1) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(-1) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-1) * p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), b_int(-1) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), b_int(-1) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_int(23) * p_double(0.0))
    assertEquals(b_double(23.0), b_int(23) * p_double(1.0))
    assertEquals(b_double(-23.0), b_int(23) * p_double(-1.0))
    assertEquals(b_double(529.0), b_int(23) * p_double(23.0))
    assertEquals(b_double(531.8290000000001), b_int(23) * p_double(23.123))
    assertEquals(b_double(-736.0), b_int(23) * p_double(-32.0))
    assertEquals(b_double(-746.488), b_int(23) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(23) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(23) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(23) * p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(23) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), b_int(23) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_int(-32) * p_double(0.0))
    assertEquals(b_double(-32.0), b_int(-32) * p_double(1.0))
    assertEquals(b_double(32.0), b_int(-32) * p_double(-1.0))
    assertEquals(b_double(-736.0), b_int(-32) * p_double(23.0))
    assertEquals(b_double(-739.936), b_int(-32) * p_double(23.123))
    assertEquals(b_double(1024.0), b_int(-32) * p_double(-32.0))
    assertEquals(b_double(1038.592), b_int(-32) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(-32) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(-32) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-32) * p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(-32) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), b_int(-32) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) * p_double(0.0))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) * p_double(1.0))
    assertEquals(b_double(Double.parseDouble("-2.147483647E9")), b_int(Integer.MAX_VALUE) * p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("4.9392123881E10")), b_int(Integer.MAX_VALUE) * p_double(23.0))
    assertEquals(b_double(Double.parseDouble("4.9656264369581E10")), b_int(Integer.MAX_VALUE) * p_double(23.123))
    assertEquals(b_double(Double.parseDouble("-6.8719476704E10")), b_int(Integer.MAX_VALUE) * p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-6.969872924703201E10")), b_int(Integer.MAX_VALUE) * p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(Integer.MAX_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MAX_VALUE) * p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.060997895E-314")), b_int(Integer.MAX_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) * p_double(0.0))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) * p_double(1.0))
    assertEquals(b_double(Double.parseDouble("2.147483648E9")), b_int(Integer.MIN_VALUE) * p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("-4.9392123904E10")), b_int(Integer.MIN_VALUE) * p_double(23.0))
    assertEquals(b_double(Double.parseDouble("-4.9656264392704E10")), b_int(Integer.MIN_VALUE) * p_double(23.123))
    assertEquals(b_double(Double.parseDouble("6.8719476736E10")), b_int(Integer.MIN_VALUE) * p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("6.9698729279488E10")), b_int(Integer.MIN_VALUE) * p_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(Integer.MIN_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MIN_VALUE) * p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.0609978955E-314")), b_int(Integer.MIN_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_int(0) * p_double(0.0)))
  }

  function testIntegerDoubleMultiplication() {
    assertEquals(b_double(0.0), b_int(0) * b_double(0.0))
    assertEquals(b_double(0.0), b_int(0) * b_double(1.0))
    assertEquals(b_double(-0.0), b_int(0) * b_double(-1.0))
    assertEquals(b_double(0.0), b_int(0) * b_double(23.0))
    assertEquals(b_double(0.0), b_int(0) * b_double(23.123))
    assertEquals(b_double(-0.0), b_int(0) * b_double(-32.0))
    assertEquals(b_double(-0.0), b_int(0) * b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_int(0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(0) * b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_int(0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_int(1) * b_double(0.0))
    assertEquals(b_double(1.0), b_int(1) * b_double(1.0))
    assertEquals(b_double(-1.0), b_int(1) * b_double(-1.0))
    assertEquals(b_double(23.0), b_int(1) * b_double(23.0))
    assertEquals(b_double(23.123), b_int(1) * b_double(23.123))
    assertEquals(b_double(-32.0), b_int(1) * b_double(-32.0))
    assertEquals(b_double(-32.456), b_int(1) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(1) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(1) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(1) * b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_int(1) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), b_int(1) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_int(-1) * b_double(0.0))
    assertEquals(b_double(-1.0), b_int(-1) * b_double(1.0))
    assertEquals(b_double(1.0), b_int(-1) * b_double(-1.0))
    assertEquals(b_double(-23.0), b_int(-1) * b_double(23.0))
    assertEquals(b_double(-23.123), b_int(-1) * b_double(23.123))
    assertEquals(b_double(32.0), b_int(-1) * b_double(-32.0))
    assertEquals(b_double(32.456), b_int(-1) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(-1) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(-1) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-1) * b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), b_int(-1) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), b_int(-1) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_int(23) * b_double(0.0))
    assertEquals(b_double(23.0), b_int(23) * b_double(1.0))
    assertEquals(b_double(-23.0), b_int(23) * b_double(-1.0))
    assertEquals(b_double(529.0), b_int(23) * b_double(23.0))
    assertEquals(b_double(531.8290000000001), b_int(23) * b_double(23.123))
    assertEquals(b_double(-736.0), b_int(23) * b_double(-32.0))
    assertEquals(b_double(-746.488), b_int(23) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(23) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(23) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(23) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(23) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), b_int(23) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_int(-32) * b_double(0.0))
    assertEquals(b_double(-32.0), b_int(-32) * b_double(1.0))
    assertEquals(b_double(32.0), b_int(-32) * b_double(-1.0))
    assertEquals(b_double(-736.0), b_int(-32) * b_double(23.0))
    assertEquals(b_double(-739.936), b_int(-32) * b_double(23.123))
    assertEquals(b_double(1024.0), b_int(-32) * b_double(-32.0))
    assertEquals(b_double(1038.592), b_int(-32) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(-32) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(-32) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-32) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(-32) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), b_int(-32) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) * b_double(0.0))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) * b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-2.147483647E9")), b_int(Integer.MAX_VALUE) * b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("4.9392123881E10")), b_int(Integer.MAX_VALUE) * b_double(23.0))
    assertEquals(b_double(Double.parseDouble("4.9656264369581E10")), b_int(Integer.MAX_VALUE) * b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-6.8719476704E10")), b_int(Integer.MAX_VALUE) * b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-6.969872924703201E10")), b_int(Integer.MAX_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(Integer.MAX_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MAX_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(Integer.MAX_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.060997895E-314")), b_int(Integer.MAX_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) * b_double(0.0))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) * b_double(1.0))
    assertEquals(b_double(Double.parseDouble("2.147483648E9")), b_int(Integer.MIN_VALUE) * b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("-4.9392123904E10")), b_int(Integer.MIN_VALUE) * b_double(23.0))
    assertEquals(b_double(Double.parseDouble("-4.9656264392704E10")), b_int(Integer.MIN_VALUE) * b_double(23.123))
    assertEquals(b_double(Double.parseDouble("6.8719476736E10")), b_int(Integer.MIN_VALUE) * b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("6.9698729279488E10")), b_int(Integer.MIN_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_int(Integer.MIN_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MIN_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_int(Integer.MIN_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.0609978955E-314")), b_int(Integer.MIN_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_int(0) * b_double(0.0)))
  }

  function testIntegerBigIntegerMultiplication() {
    assertEquals(big_int("0"), b_int(0) * big_int("0"))
    assertEquals(big_int("0"), b_int(0) * big_int("1"))
    assertEquals(big_int("0"), b_int(0) * big_int("-1"))
    assertEquals(big_int("0"), b_int(0) * big_int("23"))
    assertEquals(big_int("0"), b_int(0) * big_int("-32"))
    assertEquals(big_int("0"), b_int(0) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_int(0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), b_int(1) * big_int("0"))
    assertEquals(big_int("1"), b_int(1) * big_int("1"))
    assertEquals(big_int("-1"), b_int(1) * big_int("-1"))
    assertEquals(big_int("23"), b_int(1) * big_int("23"))
    assertEquals(big_int("-32"), b_int(1) * big_int("-32"))
    assertEquals(big_int("123456789012345678901234567890"), b_int(1) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-123456789012345678901234567890"), b_int(1) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), b_int(-1) * big_int("0"))
    assertEquals(big_int("-1"), b_int(-1) * big_int("1"))
    assertEquals(big_int("1"), b_int(-1) * big_int("-1"))
    assertEquals(big_int("-23"), b_int(-1) * big_int("23"))
    assertEquals(big_int("32"), b_int(-1) * big_int("-32"))
    assertEquals(big_int("-123456789012345678901234567890"), b_int(-1) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("123456789012345678901234567890"), b_int(-1) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), b_int(23) * big_int("0"))
    assertEquals(big_int("23"), b_int(23) * big_int("1"))
    assertEquals(big_int("-23"), b_int(23) * big_int("-1"))
    assertEquals(big_int("529"), b_int(23) * big_int("23"))
    assertEquals(big_int("-736"), b_int(23) * big_int("-32"))
    assertEquals(big_int("2839506147283950614728395061470"), b_int(23) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-2839506147283950614728395061470"), b_int(23) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), b_int(-32) * big_int("0"))
    assertEquals(big_int("-32"), b_int(-32) * big_int("1"))
    assertEquals(big_int("32"), b_int(-32) * big_int("-1"))
    assertEquals(big_int("-736"), b_int(-32) * big_int("23"))
    assertEquals(big_int("1024"), b_int(-32) * big_int("-32"))
    assertEquals(big_int("-3950617248395061724839506172480"), b_int(-32) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("3950617248395061724839506172480"), b_int(-32) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), b_int(Integer.MAX_VALUE) * big_int("0"))
    assertEquals(big_int("2147483647"), b_int(Integer.MAX_VALUE) * big_int("1"))
    assertEquals(big_int("-2147483647"), b_int(Integer.MAX_VALUE) * big_int("-1"))
    assertEquals(big_int("49392123881"), b_int(Integer.MAX_VALUE) * big_int("23"))
    assertEquals(big_int("-68719476704"), b_int(Integer.MAX_VALUE) * big_int("-32"))
    assertEquals(big_int("265121435515141626551514162654886294830"), b_int(Integer.MAX_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-265121435515141626551514162654886294830"), b_int(Integer.MAX_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), b_int(Integer.MIN_VALUE) * big_int("0"))
    assertEquals(big_int("-2147483648"), b_int(Integer.MIN_VALUE) * big_int("1"))
    assertEquals(big_int("2147483648"), b_int(Integer.MIN_VALUE) * big_int("-1"))
    assertEquals(big_int("-49392123904"), b_int(Integer.MIN_VALUE) * big_int("23"))
    assertEquals(big_int("68719476736"), b_int(Integer.MIN_VALUE) * big_int("-32"))
    assertEquals(big_int("-265121435638598415563859841556120862720"), b_int(Integer.MIN_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("265121435638598415563859841556120862720"), b_int(Integer.MIN_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(b_int(0) * big_int("0")))
  }

  function testIntegerBigDecimalMultiplication() {
    assertEquals(big_decimal("0"), b_int(0) * big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(0) * big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(0) * big_decimal("-1"))
    assertEquals(big_decimal("0"), b_int(0) * big_decimal("23"))
    assertEquals(big_decimal("0.000"), b_int(0) * big_decimal("23.123"))
    assertEquals(big_decimal("0"), b_int(0) * big_decimal("-32"))
    assertEquals(big_decimal("0.000"), b_int(0) * big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), b_int(0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), b_int(0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), b_int(1) * big_decimal("0"))
    assertEquals(big_decimal("1"), b_int(1) * big_decimal("1"))
    assertEquals(big_decimal("-1"), b_int(1) * big_decimal("-1"))
    assertEquals(big_decimal("23"), b_int(1) * big_decimal("23"))
    assertEquals(big_decimal("23.123"), b_int(1) * big_decimal("23.123"))
    assertEquals(big_decimal("-32"), b_int(1) * big_decimal("-32"))
    assertEquals(big_decimal("-32.456"), b_int(1) * big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), b_int(1) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), b_int(1) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), b_int(-1) * big_decimal("0"))
    assertEquals(big_decimal("-1"), b_int(-1) * big_decimal("1"))
    assertEquals(big_decimal("1"), b_int(-1) * big_decimal("-1"))
    assertEquals(big_decimal("-23"), b_int(-1) * big_decimal("23"))
    assertEquals(big_decimal("-23.123"), b_int(-1) * big_decimal("23.123"))
    assertEquals(big_decimal("32"), b_int(-1) * big_decimal("-32"))
    assertEquals(big_decimal("32.456"), b_int(-1) * big_decimal("-32.456"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), b_int(-1) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), b_int(-1) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), b_int(23) * big_decimal("0"))
    assertEquals(big_decimal("23"), b_int(23) * big_decimal("1"))
    assertEquals(big_decimal("-23"), b_int(23) * big_decimal("-1"))
    assertEquals(big_decimal("529"), b_int(23) * big_decimal("23"))
    assertEquals(big_decimal("531.829"), b_int(23) * big_decimal("23.123"))
    assertEquals(big_decimal("-736"), b_int(23) * big_decimal("-32"))
    assertEquals(big_decimal("-746.488"), b_int(23) * big_decimal("-32.456"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), b_int(23) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), b_int(23) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), b_int(-32) * big_decimal("0"))
    assertEquals(big_decimal("-32"), b_int(-32) * big_decimal("1"))
    assertEquals(big_decimal("32"), b_int(-32) * big_decimal("-1"))
    assertEquals(big_decimal("-736"), b_int(-32) * big_decimal("23"))
    assertEquals(big_decimal("-739.936"), b_int(-32) * big_decimal("23.123"))
    assertEquals(big_decimal("1024"), b_int(-32) * big_decimal("-32"))
    assertEquals(big_decimal("1038.592"), b_int(-32) * big_decimal("-32.456"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), b_int(-32) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), b_int(-32) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), b_int(Integer.MAX_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("2147483647"), b_int(Integer.MAX_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("-2147483647"), b_int(Integer.MAX_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("49392123881"), b_int(Integer.MAX_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("49656264369.581"), b_int(Integer.MAX_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("-68719476704"), b_int(Integer.MAX_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("-69698729247.032"), b_int(Integer.MAX_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("265121435515141626551514162655151416265.488629483"), b_int(Integer.MAX_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-265121435515141626551514162655151416265.488629483"), b_int(Integer.MAX_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), b_int(Integer.MIN_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("-2147483648"), b_int(Integer.MIN_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("2147483648"), b_int(Integer.MIN_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("-49392123904"), b_int(Integer.MIN_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("-49656264392.704"), b_int(Integer.MIN_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("68719476736"), b_int(Integer.MIN_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("69698729279.488"), b_int(Integer.MIN_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("-265121435638598415563859841556385984155.612086272"), b_int(Integer.MIN_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("265121435638598415563859841556385984155.612086272"), b_int(Integer.MIN_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_int(0) * big_decimal("0")))
  }

}

