package gw.spec.core.expressions.arithmetic.multiplication
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Multiplication_PShortTest extends ArithmeticTestBase {

  function testPShortPByteMultiplication() {
    assertEquals(p_int(0), p_short(0) * p_byte(0))
    assertEquals(p_int(0), p_short(0) * p_byte(1))
    assertEquals(p_int(0), p_short(0) * p_byte(-1))
    assertEquals(p_int(0), p_short(0) * p_byte(23))
    assertEquals(p_int(0), p_short(0) * p_byte(-32))
    assertEquals(p_int(0), p_short(0) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) * p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_short(1) * p_byte(0))
    assertEquals(p_int(1), p_short(1) * p_byte(1))
    assertEquals(p_int(-1), p_short(1) * p_byte(-1))
    assertEquals(p_int(23), p_short(1) * p_byte(23))
    assertEquals(p_int(-32), p_short(1) * p_byte(-32))
    assertEquals(p_int(127), p_short(1) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-128), p_short(1) * p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_short(-1) * p_byte(0))
    assertEquals(p_int(-1), p_short(-1) * p_byte(1))
    assertEquals(p_int(1), p_short(-1) * p_byte(-1))
    assertEquals(p_int(-23), p_short(-1) * p_byte(23))
    assertEquals(p_int(32), p_short(-1) * p_byte(-32))
    assertEquals(p_int(-127), p_short(-1) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(128), p_short(-1) * p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_short(23) * p_byte(0))
    assertEquals(p_int(23), p_short(23) * p_byte(1))
    assertEquals(p_int(-23), p_short(23) * p_byte(-1))
    assertEquals(p_int(529), p_short(23) * p_byte(23))
    assertEquals(p_int(-736), p_short(23) * p_byte(-32))
    assertEquals(p_int(2921), p_short(23) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-2944), p_short(23) * p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_short(-32) * p_byte(0))
    assertEquals(p_int(-32), p_short(-32) * p_byte(1))
    assertEquals(p_int(32), p_short(-32) * p_byte(-1))
    assertEquals(p_int(-736), p_short(-32) * p_byte(23))
    assertEquals(p_int(1024), p_short(-32) * p_byte(-32))
    assertEquals(p_int(-4064), p_short(-32) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(4096), p_short(-32) * p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_short(Short.MAX_VALUE) * p_byte(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) * p_byte(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) * p_byte(-1))
    assertEquals(p_int(753641), p_short(Short.MAX_VALUE) * p_byte(23))
    assertEquals(p_int(-1048544), p_short(Short.MAX_VALUE) * p_byte(-32))
    assertEquals(p_int(4161409), p_short(Short.MAX_VALUE) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-4194176), p_short(Short.MAX_VALUE) * p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_short(Short.MIN_VALUE) * p_byte(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) * p_byte(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) * p_byte(-1))
    assertEquals(p_int(-753664), p_short(Short.MIN_VALUE) * p_byte(23))
    assertEquals(p_int(1048576), p_short(Short.MIN_VALUE) * p_byte(-32))
    assertEquals(p_int(-4161536), p_short(Short.MIN_VALUE) * p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(4194304), p_short(Short.MIN_VALUE) * p_byte(Byte.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) * p_byte(0)))
  }

  function testPShortByteMultiplication() {
    assertEquals(b_int(0), p_short(0) * b_byte(0))
    assertEquals(p_int(0), p_short(0) * p_byte(1))
    assertEquals(p_int(0), p_short(0) * p_byte(-1))
    assertEquals(b_int(0), p_short(0) * b_byte(23))
    assertEquals(b_int(0), p_short(0) * b_byte(-32))
    assertEquals(b_int(0), p_short(0) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_short(1) * b_byte(0))
    assertEquals(p_int(1), p_short(1) * p_byte(1))
    assertEquals(p_int(-1), p_short(1) * p_byte(-1))
    assertEquals(b_int(23), p_short(1) * b_byte(23))
    assertEquals(b_int(-32), p_short(1) * b_byte(-32))
    assertEquals(b_int(127), p_short(1) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-128), p_short(1) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_short(-1) * b_byte(0))
    assertEquals(p_int(-1), p_short(-1) * p_byte(1))
    assertEquals(p_int(1), p_short(-1) * p_byte(-1))
    assertEquals(b_int(-23), p_short(-1) * b_byte(23))
    assertEquals(b_int(32), p_short(-1) * b_byte(-32))
    assertEquals(b_int(-127), p_short(-1) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(128), p_short(-1) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_short(23) * b_byte(0))
    assertEquals(p_int(23), p_short(23) * p_byte(1))
    assertEquals(p_int(-23), p_short(23) * p_byte(-1))
    assertEquals(b_int(529), p_short(23) * b_byte(23))
    assertEquals(b_int(-736), p_short(23) * b_byte(-32))
    assertEquals(b_int(2921), p_short(23) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-2944), p_short(23) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_short(-32) * b_byte(0))
    assertEquals(p_int(-32), p_short(-32) * p_byte(1))
    assertEquals(p_int(32), p_short(-32) * p_byte(-1))
    assertEquals(b_int(-736), p_short(-32) * b_byte(23))
    assertEquals(b_int(1024), p_short(-32) * b_byte(-32))
    assertEquals(b_int(-4064), p_short(-32) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(4096), p_short(-32) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_short(Short.MAX_VALUE) * b_byte(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) * p_byte(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) * p_byte(-1))
    assertEquals(b_int(753641), p_short(Short.MAX_VALUE) * b_byte(23))
    assertEquals(b_int(-1048544), p_short(Short.MAX_VALUE) * b_byte(-32))
    assertEquals(b_int(4161409), p_short(Short.MAX_VALUE) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-4194176), p_short(Short.MAX_VALUE) * b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_short(Short.MIN_VALUE) * b_byte(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) * p_byte(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) * p_byte(-1))
    assertEquals(b_int(-753664), p_short(Short.MIN_VALUE) * b_byte(23))
    assertEquals(b_int(1048576), p_short(Short.MIN_VALUE) * b_byte(-32))
    assertEquals(b_int(-4161536), p_short(Short.MIN_VALUE) * b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(4194304), p_short(Short.MIN_VALUE) * b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) * b_byte(0)))
  }

  function testPShortPShortMultiplication() {
    assertEquals(p_int(0), p_short(0) * p_short(0))
    assertEquals(p_int(0), p_short(0) * p_short(1))
    assertEquals(p_int(0), p_short(0) * p_short(-1))
    assertEquals(p_int(0), p_short(0) * p_short(23))
    assertEquals(p_int(0), p_short(0) * p_short(-32))
    assertEquals(p_int(0), p_short(0) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) * p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_short(1) * p_short(0))
    assertEquals(p_int(1), p_short(1) * p_short(1))
    assertEquals(p_int(-1), p_short(1) * p_short(-1))
    assertEquals(p_int(23), p_short(1) * p_short(23))
    assertEquals(p_int(-32), p_short(1) * p_short(-32))
    assertEquals(p_int(32767), p_short(1) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(-32768), p_short(1) * p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_short(-1) * p_short(0))
    assertEquals(p_int(-1), p_short(-1) * p_short(1))
    assertEquals(p_int(1), p_short(-1) * p_short(-1))
    assertEquals(p_int(-23), p_short(-1) * p_short(23))
    assertEquals(p_int(32), p_short(-1) * p_short(-32))
    assertEquals(p_int(-32767), p_short(-1) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(32768), p_short(-1) * p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_short(23) * p_short(0))
    assertEquals(p_int(23), p_short(23) * p_short(1))
    assertEquals(p_int(-23), p_short(23) * p_short(-1))
    assertEquals(p_int(529), p_short(23) * p_short(23))
    assertEquals(p_int(-736), p_short(23) * p_short(-32))
    assertEquals(p_int(753641), p_short(23) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(-753664), p_short(23) * p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_short(-32) * p_short(0))
    assertEquals(p_int(-32), p_short(-32) * p_short(1))
    assertEquals(p_int(32), p_short(-32) * p_short(-1))
    assertEquals(p_int(-736), p_short(-32) * p_short(23))
    assertEquals(p_int(1024), p_short(-32) * p_short(-32))
    assertEquals(p_int(-1048544), p_short(-32) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(1048576), p_short(-32) * p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_short(Short.MAX_VALUE) * p_short(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) * p_short(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) * p_short(-1))
    assertEquals(p_int(753641), p_short(Short.MAX_VALUE) * p_short(23))
    assertEquals(p_int(-1048544), p_short(Short.MAX_VALUE) * p_short(-32))
    assertEquals(p_int(1073676289), p_short(Short.MAX_VALUE) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(-1073709056), p_short(Short.MAX_VALUE) * p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_short(Short.MIN_VALUE) * p_short(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) * p_short(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) * p_short(-1))
    assertEquals(p_int(-753664), p_short(Short.MIN_VALUE) * p_short(23))
    assertEquals(p_int(1048576), p_short(Short.MIN_VALUE) * p_short(-32))
    assertEquals(p_int(-1073709056), p_short(Short.MIN_VALUE) * p_short(Short.MAX_VALUE))
    assertEquals(p_int(1073741824), p_short(Short.MIN_VALUE) * p_short(Short.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) * p_short(0)))
  }

  function testPShortShortMultiplication() {
    assertEquals(b_int(0), p_short(0) * b_short(0))
    assertEquals(b_int(0), p_short(0) * b_short(1))
    assertEquals(b_int(0), p_short(0) * b_short(-1))
    assertEquals(b_int(0), p_short(0) * b_short(23))
    assertEquals(b_int(0), p_short(0) * b_short(-32))
    assertEquals(b_int(0), p_short(0) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) * b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_short(1) * b_short(0))
    assertEquals(b_int(1), p_short(1) * b_short(1))
    assertEquals(b_int(-1), p_short(1) * b_short(-1))
    assertEquals(b_int(23), p_short(1) * b_short(23))
    assertEquals(b_int(-32), p_short(1) * b_short(-32))
    assertEquals(b_int(32767), p_short(1) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(-32768), p_short(1) * b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_short(-1) * b_short(0))
    assertEquals(b_int(-1), p_short(-1) * b_short(1))
    assertEquals(b_int(1), p_short(-1) * b_short(-1))
    assertEquals(b_int(-23), p_short(-1) * b_short(23))
    assertEquals(b_int(32), p_short(-1) * b_short(-32))
    assertEquals(b_int(-32767), p_short(-1) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(32768), p_short(-1) * b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_short(23) * b_short(0))
    assertEquals(b_int(23), p_short(23) * b_short(1))
    assertEquals(b_int(-23), p_short(23) * b_short(-1))
    assertEquals(b_int(529), p_short(23) * b_short(23))
    assertEquals(b_int(-736), p_short(23) * b_short(-32))
    assertEquals(b_int(753641), p_short(23) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(-753664), p_short(23) * b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_short(-32) * b_short(0))
    assertEquals(b_int(-32), p_short(-32) * b_short(1))
    assertEquals(b_int(32), p_short(-32) * b_short(-1))
    assertEquals(b_int(-736), p_short(-32) * b_short(23))
    assertEquals(b_int(1024), p_short(-32) * b_short(-32))
    assertEquals(b_int(-1048544), p_short(-32) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(1048576), p_short(-32) * b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_short(Short.MAX_VALUE) * b_short(0))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) * b_short(1))
    assertEquals(b_int(-32767), p_short(Short.MAX_VALUE) * b_short(-1))
    assertEquals(b_int(753641), p_short(Short.MAX_VALUE) * b_short(23))
    assertEquals(b_int(-1048544), p_short(Short.MAX_VALUE) * b_short(-32))
    assertEquals(b_int(1073676289), p_short(Short.MAX_VALUE) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(-1073709056), p_short(Short.MAX_VALUE) * b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_short(Short.MIN_VALUE) * b_short(0))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) * b_short(1))
    assertEquals(b_int(32768), p_short(Short.MIN_VALUE) * b_short(-1))
    assertEquals(b_int(-753664), p_short(Short.MIN_VALUE) * b_short(23))
    assertEquals(b_int(1048576), p_short(Short.MIN_VALUE) * b_short(-32))
    assertEquals(b_int(-1073709056), p_short(Short.MIN_VALUE) * b_short(Short.MAX_VALUE))
    assertEquals(b_int(1073741824), p_short(Short.MIN_VALUE) * b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) * b_short(0)))
  }

  function testPShortPCharMultiplication() {
    assertEquals(p_int(0), p_short(0) * p_char(0))
    assertEquals(p_int(0), p_short(0) * p_char(1))
    assertEquals(p_int(0), p_short(0) * p_char(23))
    assertEquals(p_int(0), p_short(0) * p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_short(1) * p_char(0))
    assertEquals(p_int(1), p_short(1) * p_char(1))
    assertEquals(p_int(23), p_short(1) * p_char(23))
    assertEquals(p_int(65535), p_short(1) * p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_short(-1) * p_char(0))
    assertEquals(p_int(-1), p_short(-1) * p_char(1))
    assertEquals(p_int(-23), p_short(-1) * p_char(23))
    assertEquals(p_int(-65535), p_short(-1) * p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_short(23) * p_char(0))
    assertEquals(p_int(23), p_short(23) * p_char(1))
    assertEquals(p_int(529), p_short(23) * p_char(23))
    assertEquals(p_int(1507305), p_short(23) * p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_short(-32) * p_char(0))
    assertEquals(p_int(-32), p_short(-32) * p_char(1))
    assertEquals(p_int(-736), p_short(-32) * p_char(23))
    assertEquals(p_int(-2097120), p_short(-32) * p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_short(Short.MAX_VALUE) * p_char(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) * p_char(1))
    assertEquals(p_int(753641), p_short(Short.MAX_VALUE) * p_char(23))
    assertEquals(p_int(2147385345), p_short(Short.MAX_VALUE) * p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_short(Short.MIN_VALUE) * p_char(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) * p_char(1))
    assertEquals(p_int(-753664), p_short(Short.MIN_VALUE) * p_char(23))
    assertEquals(p_int(-2147450880), p_short(Short.MIN_VALUE) * p_char(Character.MAX_VALUE))

    assertEquals(int, statictypeof(p_short(0) * p_char(0)))
  }

  function testPShortCharacterMultiplication() {
    assertEquals(b_int(0), p_short(0) * b_char(0))
    assertEquals(b_int(0), p_short(0) * b_char(1))
    assertEquals(b_int(0), p_short(0) * b_char(23))
    assertEquals(b_int(0), p_short(0) * b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_short(1) * b_char(0))
    assertEquals(b_int(1), p_short(1) * b_char(1))
    assertEquals(b_int(23), p_short(1) * b_char(23))
    assertEquals(b_int(65535), p_short(1) * b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_short(-1) * b_char(0))
    assertEquals(b_int(-1), p_short(-1) * b_char(1))
    assertEquals(b_int(-23), p_short(-1) * b_char(23))
    assertEquals(b_int(-65535), p_short(-1) * b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_short(23) * b_char(0))
    assertEquals(b_int(23), p_short(23) * b_char(1))
    assertEquals(b_int(529), p_short(23) * b_char(23))
    assertEquals(b_int(1507305), p_short(23) * b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_short(-32) * b_char(0))
    assertEquals(b_int(-32), p_short(-32) * b_char(1))
    assertEquals(b_int(-736), p_short(-32) * b_char(23))
    assertEquals(b_int(-2097120), p_short(-32) * b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_short(Short.MAX_VALUE) * b_char(0))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) * b_char(1))
    assertEquals(b_int(753641), p_short(Short.MAX_VALUE) * b_char(23))
    assertEquals(b_int(2147385345), p_short(Short.MAX_VALUE) * b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_short(Short.MIN_VALUE) * b_char(0))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) * b_char(1))
    assertEquals(b_int(-753664), p_short(Short.MIN_VALUE) * b_char(23))
    assertEquals(b_int(-2147450880), p_short(Short.MIN_VALUE) * b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) * b_char(0)))
  }

  function testPShortPIntMultiplication() {
    assertEquals(p_int(0), p_short(0) * p_int(0))
    assertEquals(p_int(0), p_short(0) * p_int(1))
    assertEquals(p_int(0), p_short(0) * p_int(-1))
    assertEquals(p_int(0), p_short(0) * p_int(23))
    assertEquals(p_int(0), p_short(0) * p_int(-32))
    assertEquals(p_int(0), p_short(0) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) * p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_short(1) * p_int(0))
    assertEquals(p_int(1), p_short(1) * p_int(1))
    assertEquals(p_int(-1), p_short(1) * p_int(-1))
    assertEquals(p_int(23), p_short(1) * p_int(23))
    assertEquals(p_int(-32), p_short(1) * p_int(-32))
    assertEquals(p_int(2147483647), p_short(1) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_short(1) * p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_short(-1) * p_int(0))
    assertEquals(p_int(-1), p_short(-1) * p_int(1))
    assertEquals(p_int(1), p_short(-1) * p_int(-1))
    assertEquals(p_int(-23), p_short(-1) * p_int(23))
    assertEquals(p_int(32), p_short(-1) * p_int(-32))
    assertEquals(p_int(-2147483647), p_short(-1) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_short(-1) * p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_short(23) * p_int(0))
    assertEquals(p_int(23), p_short(23) * p_int(1))
    assertEquals(p_int(-23), p_short(23) * p_int(-1))
    assertEquals(p_int(529), p_short(23) * p_int(23))
    assertEquals(p_int(-736), p_short(23) * p_int(-32))
    assertEquals(p_int(2147483625), p_short(23) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_short(23) * p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_short(-32) * p_int(0))
    assertEquals(p_int(-32), p_short(-32) * p_int(1))
    assertEquals(p_int(32), p_short(-32) * p_int(-1))
    assertEquals(p_int(-736), p_short(-32) * p_int(23))
    assertEquals(p_int(1024), p_short(-32) * p_int(-32))
    assertEquals(p_int(32), p_short(-32) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(-32) * p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_short(Short.MAX_VALUE) * p_int(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) * p_int(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) * p_int(-1))
    assertEquals(p_int(753641), p_short(Short.MAX_VALUE) * p_int(23))
    assertEquals(p_int(-1048544), p_short(Short.MAX_VALUE) * p_int(-32))
    assertEquals(p_int(2147450881), p_short(Short.MAX_VALUE) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_short(Short.MAX_VALUE) * p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_short(Short.MIN_VALUE) * p_int(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) * p_int(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) * p_int(-1))
    assertEquals(p_int(-753664), p_short(Short.MIN_VALUE) * p_int(23))
    assertEquals(p_int(1048576), p_short(Short.MIN_VALUE) * p_int(-32))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) * p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) * p_int(Integer.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) * p_int(0)))
  }

  function testPShortIntegerMultiplication() {
    assertEquals(b_int(0), p_short(0) * b_int(0))
    assertEquals(b_int(0), p_short(0) * b_int(1))
    assertEquals(b_int(0), p_short(0) * b_int(-1))
    assertEquals(b_int(0), p_short(0) * b_int(23))
    assertEquals(b_int(0), p_short(0) * b_int(-32))
    assertEquals(b_int(0), p_short(0) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) * b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_short(1) * b_int(0))
    assertEquals(b_int(1), p_short(1) * b_int(1))
    assertEquals(b_int(-1), p_short(1) * b_int(-1))
    assertEquals(b_int(23), p_short(1) * b_int(23))
    assertEquals(b_int(-32), p_short(1) * b_int(-32))
    assertEquals(b_int(2147483647), p_short(1) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_short(1) * b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_short(-1) * b_int(0))
    assertEquals(b_int(-1), p_short(-1) * b_int(1))
    assertEquals(b_int(1), p_short(-1) * b_int(-1))
    assertEquals(b_int(-23), p_short(-1) * b_int(23))
    assertEquals(b_int(32), p_short(-1) * b_int(-32))
    assertEquals(b_int(-2147483647), p_short(-1) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_short(-1) * b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_short(23) * b_int(0))
    assertEquals(b_int(23), p_short(23) * b_int(1))
    assertEquals(b_int(-23), p_short(23) * b_int(-1))
    assertEquals(b_int(529), p_short(23) * b_int(23))
    assertEquals(b_int(-736), p_short(23) * b_int(-32))
    assertEquals(b_int(2147483625), p_short(23) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_short(23) * b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_short(-32) * b_int(0))
    assertEquals(b_int(-32), p_short(-32) * b_int(1))
    assertEquals(b_int(32), p_short(-32) * b_int(-1))
    assertEquals(b_int(-736), p_short(-32) * b_int(23))
    assertEquals(b_int(1024), p_short(-32) * b_int(-32))
    assertEquals(b_int(32), p_short(-32) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(-32) * b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_short(Short.MAX_VALUE) * b_int(0))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) * b_int(1))
    assertEquals(b_int(-32767), p_short(Short.MAX_VALUE) * b_int(-1))
    assertEquals(b_int(753641), p_short(Short.MAX_VALUE) * b_int(23))
    assertEquals(b_int(-1048544), p_short(Short.MAX_VALUE) * b_int(-32))
    assertEquals(b_int(2147450881), p_short(Short.MAX_VALUE) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_short(Short.MAX_VALUE) * b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_short(Short.MIN_VALUE) * b_int(0))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) * b_int(1))
    assertEquals(b_int(32768), p_short(Short.MIN_VALUE) * b_int(-1))
    assertEquals(b_int(-753664), p_short(Short.MIN_VALUE) * b_int(23))
    assertEquals(b_int(1048576), p_short(Short.MIN_VALUE) * b_int(-32))
    assertEquals(b_int(32768), p_short(Short.MIN_VALUE) * b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) * b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) * b_int(0)))
  }

  function testPShortPLongMultiplication() {
    assertEquals(p_long(0), p_short(0) * p_long(0))
    assertEquals(p_long(0), p_short(0) * p_long(1))
    assertEquals(p_long(0), p_short(0) * p_long(-1))
    assertEquals(p_long(0), p_short(0) * p_long(23))
    assertEquals(p_long(0), p_short(0) * p_long(-32))
    assertEquals(p_long(0), p_short(0) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(0) * p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_short(1) * p_long(0))
    assertEquals(p_long(1), p_short(1) * p_long(1))
    assertEquals(p_long(-1), p_short(1) * p_long(-1))
    assertEquals(p_long(23), p_short(1) * p_long(23))
    assertEquals(p_long(-32), p_short(1) * p_long(-32))
    assertEquals(p_long(9223372036854775807), p_short(1) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_short(1) * p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_short(-1) * p_long(0))
    assertEquals(p_long(-1), p_short(-1) * p_long(1))
    assertEquals(p_long(1), p_short(-1) * p_long(-1))
    assertEquals(p_long(-23), p_short(-1) * p_long(23))
    assertEquals(p_long(32), p_short(-1) * p_long(-32))
    assertEquals(p_long(-9223372036854775807), p_short(-1) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_short(-1) * p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_short(23) * p_long(0))
    assertEquals(p_long(23), p_short(23) * p_long(1))
    assertEquals(p_long(-23), p_short(23) * p_long(-1))
    assertEquals(p_long(529), p_short(23) * p_long(23))
    assertEquals(p_long(-736), p_short(23) * p_long(-32))
    assertEquals(p_long(9223372036854775785), p_short(23) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_short(23) * p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_short(-32) * p_long(0))
    assertEquals(p_long(-32), p_short(-32) * p_long(1))
    assertEquals(p_long(32), p_short(-32) * p_long(-1))
    assertEquals(p_long(-736), p_short(-32) * p_long(23))
    assertEquals(p_long(1024), p_short(-32) * p_long(-32))
    assertEquals(p_long(32), p_short(-32) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(-32) * p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_short(Short.MAX_VALUE) * p_long(0))
    assertEquals(p_long(32767), p_short(Short.MAX_VALUE) * p_long(1))
    assertEquals(p_long(-32767), p_short(Short.MAX_VALUE) * p_long(-1))
    assertEquals(p_long(753641), p_short(Short.MAX_VALUE) * p_long(23))
    assertEquals(p_long(-1048544), p_short(Short.MAX_VALUE) * p_long(-32))
    assertEquals(p_long(9223372036854743041), p_short(Short.MAX_VALUE) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_short(Short.MAX_VALUE) * p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_short(Short.MIN_VALUE) * p_long(0))
    assertEquals(p_long(-32768), p_short(Short.MIN_VALUE) * p_long(1))
    assertEquals(p_long(32768), p_short(Short.MIN_VALUE) * p_long(-1))
    assertEquals(p_long(-753664), p_short(Short.MIN_VALUE) * p_long(23))
    assertEquals(p_long(1048576), p_short(Short.MIN_VALUE) * p_long(-32))
    assertEquals(p_long(32768), p_short(Short.MIN_VALUE) * p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(Short.MIN_VALUE) * p_long(Long.MIN_VALUE))

    assertEquals(long, statictypeof(p_short(0) * p_long(0)))
  }

  function testPShortLongMultiplication() {
    assertEquals(b_long(0), p_short(0) * b_long(0))
    assertEquals(b_long(0), p_short(0) * b_long(1))
    assertEquals(b_long(0), p_short(0) * b_long(-1))
    assertEquals(b_long(0), p_short(0) * b_long(23))
    assertEquals(b_long(0), p_short(0) * b_long(-32))
    assertEquals(b_long(0), p_short(0) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(0) * b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_short(1) * b_long(0))
    assertEquals(b_long(1), p_short(1) * b_long(1))
    assertEquals(b_long(-1), p_short(1) * b_long(-1))
    assertEquals(b_long(23), p_short(1) * b_long(23))
    assertEquals(b_long(-32), p_short(1) * b_long(-32))
    assertEquals(b_long(9223372036854775807), p_short(1) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_short(1) * b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_short(-1) * b_long(0))
    assertEquals(b_long(-1), p_short(-1) * b_long(1))
    assertEquals(b_long(1), p_short(-1) * b_long(-1))
    assertEquals(b_long(-23), p_short(-1) * b_long(23))
    assertEquals(b_long(32), p_short(-1) * b_long(-32))
    assertEquals(b_long(-9223372036854775807), p_short(-1) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_short(-1) * b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_short(23) * b_long(0))
    assertEquals(b_long(23), p_short(23) * b_long(1))
    assertEquals(b_long(-23), p_short(23) * b_long(-1))
    assertEquals(b_long(529), p_short(23) * b_long(23))
    assertEquals(b_long(-736), p_short(23) * b_long(-32))
    assertEquals(b_long(9223372036854775785), p_short(23) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_short(23) * b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_short(-32) * b_long(0))
    assertEquals(b_long(-32), p_short(-32) * b_long(1))
    assertEquals(b_long(32), p_short(-32) * b_long(-1))
    assertEquals(b_long(-736), p_short(-32) * b_long(23))
    assertEquals(b_long(1024), p_short(-32) * b_long(-32))
    assertEquals(b_long(32), p_short(-32) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(-32) * b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_short(Short.MAX_VALUE) * b_long(0))
    assertEquals(b_long(32767), p_short(Short.MAX_VALUE) * b_long(1))
    assertEquals(b_long(-32767), p_short(Short.MAX_VALUE) * b_long(-1))
    assertEquals(b_long(753641), p_short(Short.MAX_VALUE) * b_long(23))
    assertEquals(b_long(-1048544), p_short(Short.MAX_VALUE) * b_long(-32))
    assertEquals(b_long(9223372036854743041), p_short(Short.MAX_VALUE) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_short(Short.MAX_VALUE) * b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_short(Short.MIN_VALUE) * b_long(0))
    assertEquals(b_long(-32768), p_short(Short.MIN_VALUE) * b_long(1))
    assertEquals(b_long(32768), p_short(Short.MIN_VALUE) * b_long(-1))
    assertEquals(b_long(-753664), p_short(Short.MIN_VALUE) * b_long(23))
    assertEquals(b_long(1048576), p_short(Short.MIN_VALUE) * b_long(-32))
    assertEquals(b_long(32768), p_short(Short.MIN_VALUE) * b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(Short.MIN_VALUE) * b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(p_short(0) * b_long(0)))
  }

  function testPShortPFloatMultiplication() {
    assertEquals(p_float(0.0), p_short(0) * p_float(0.0))
    assertEquals(p_float(0.0), p_short(0) * p_float(1.0))
    assertEquals(p_float(-0.0), p_short(0) * p_float(-1.0))
    assertEquals(p_float(0.0), p_short(0) * p_float(23.0))
    assertEquals(p_float(0.0), p_short(0) * p_float(23.123))
    assertEquals(p_float(-0.0), p_short(0) * p_float(-32.0))
    assertEquals(p_float(-0.0), p_short(0) * p_float(-32.456))
    assertEquals(p_float(Float.NaN_), p_short(0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(0) * p_float(Float.NaN_))
    assertEquals(p_float(0.0), p_short(0) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_short(0) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(0.0), p_short(1) * p_float(0.0))
    assertEquals(p_float(1.0), p_short(1) * p_float(1.0))
    assertEquals(p_float(-1.0), p_short(1) * p_float(-1.0))
    assertEquals(p_float(23.0), p_short(1) * p_float(23.0))
    assertEquals(p_float(23.123), p_short(1) * p_float(23.123))
    assertEquals(p_float(-32.0), p_short(1) * p_float(-32.0))
    assertEquals(p_float(-32.456), p_short(1) * p_float(-32.456))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(1) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(1) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(1) * p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("3.4028235E38")), p_short(1) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("1.4E-45")), p_short(1) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(-0.0), p_short(-1) * p_float(0.0))
    assertEquals(p_float(-1.0), p_short(-1) * p_float(1.0))
    assertEquals(p_float(1.0), p_short(-1) * p_float(-1.0))
    assertEquals(p_float(-23.0), p_short(-1) * p_float(23.0))
    assertEquals(p_float(-23.123), p_short(-1) * p_float(23.123))
    assertEquals(p_float(32.0), p_short(-1) * p_float(-32.0))
    assertEquals(p_float(32.456), p_short(-1) * p_float(-32.456))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-1) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(-1) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(-1) * p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-3.4028235E38")), p_short(-1) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("-1.4E-45")), p_short(-1) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(0.0), p_short(23) * p_float(0.0))
    assertEquals(p_float(23.0), p_short(23) * p_float(1.0))
    assertEquals(p_float(-23.0), p_short(23) * p_float(-1.0))
    assertEquals(p_float(529.0), p_short(23) * p_float(23.0))
    assertEquals(p_float(531.829), p_short(23) * p_float(23.123))
    assertEquals(p_float(-736.0), p_short(23) * p_float(-32.0))
    assertEquals(p_float(-746.48804), p_short(23) * p_float(-32.456))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(23) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(23) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(23) * p_float(Float.NaN_))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(23) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("3.2E-44")), p_short(23) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(-0.0), p_short(-32) * p_float(0.0))
    assertEquals(p_float(-32.0), p_short(-32) * p_float(1.0))
    assertEquals(p_float(32.0), p_short(-32) * p_float(-1.0))
    assertEquals(p_float(-736.0), p_short(-32) * p_float(23.0))
    assertEquals(p_float(-739.936), p_short(-32) * p_float(23.123))
    assertEquals(p_float(1024.0), p_short(-32) * p_float(-32.0))
    assertEquals(p_float(1038.592), p_short(-32) * p_float(-32.456))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-32) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(-32) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(-32) * p_float(Float.NaN_))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-32) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("-4.5E-44")), p_short(-32) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(0.0), p_short(Short.MAX_VALUE) * p_float(0.0))
    assertEquals(p_float(32767.0), p_short(Short.MAX_VALUE) * p_float(1.0))
    assertEquals(p_float(-32767.0), p_short(Short.MAX_VALUE) * p_float(-1.0))
    assertEquals(p_float(753641.0), p_short(Short.MAX_VALUE) * p_float(23.0))
    assertEquals(p_float(757671.3), p_short(Short.MAX_VALUE) * p_float(23.123))
    assertEquals(p_float(-1048544.0), p_short(Short.MAX_VALUE) * p_float(-32.0))
    assertEquals(p_float(-1063485.8), p_short(Short.MAX_VALUE) * p_float(-32.456))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(Short.MAX_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(Short.MAX_VALUE) * p_float(Float.NaN_))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("4.5916E-41")), p_short(Short.MAX_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(-0.0), p_short(Short.MIN_VALUE) * p_float(0.0))
    assertEquals(p_float(-32768.0), p_short(Short.MIN_VALUE) * p_float(1.0))
    assertEquals(p_float(32768.0), p_short(Short.MIN_VALUE) * p_float(-1.0))
    assertEquals(p_float(-753664.0), p_short(Short.MIN_VALUE) * p_float(23.0))
    assertEquals(p_float(-757694.44), p_short(Short.MIN_VALUE) * p_float(23.123))
    assertEquals(p_float(1048576.0), p_short(Short.MIN_VALUE) * p_float(-32.0))
    assertEquals(p_float(1063518.2), p_short(Short.MIN_VALUE) * p_float(-32.456))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(Short.MIN_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(Short.MIN_VALUE) * p_float(Float.NaN_))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("-4.5918E-41")), p_short(Short.MIN_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(float, statictypeof(p_short(0) * p_float(0.0)))
  }

  function testPShortFloatMultiplication() {
    assertEquals(b_float(0.0), p_short(0) * b_float(0.0))
    assertEquals(b_float(0.0), p_short(0) * b_float(1.0))
    assertEquals(b_float(-0.0), p_short(0) * b_float(-1.0))
    assertEquals(b_float(0.0), p_short(0) * b_float(23.0))
    assertEquals(b_float(0.0), p_short(0) * b_float(23.123))
    assertEquals(b_float(-0.0), p_short(0) * b_float(-32.0))
    assertEquals(b_float(-0.0), p_short(0) * b_float(-32.456))
    assertEquals(b_float(Float.NaN_), p_short(0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(0) * b_float(Float.NaN_))
    assertEquals(b_float(0.0), p_short(0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_short(0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), p_short(1) * b_float(0.0))
    assertEquals(b_float(1.0), p_short(1) * b_float(1.0))
    assertEquals(b_float(-1.0), p_short(1) * b_float(-1.0))
    assertEquals(b_float(23.0), p_short(1) * b_float(23.0))
    assertEquals(b_float(23.123), p_short(1) * b_float(23.123))
    assertEquals(b_float(-32.0), p_short(1) * b_float(-32.0))
    assertEquals(b_float(-32.456), p_short(1) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(1) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(1) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(1) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), p_short(1) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), p_short(1) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), p_short(-1) * b_float(0.0))
    assertEquals(b_float(-1.0), p_short(-1) * b_float(1.0))
    assertEquals(b_float(1.0), p_short(-1) * b_float(-1.0))
    assertEquals(b_float(-23.0), p_short(-1) * b_float(23.0))
    assertEquals(b_float(-23.123), p_short(-1) * b_float(23.123))
    assertEquals(b_float(32.0), p_short(-1) * b_float(-32.0))
    assertEquals(b_float(32.456), p_short(-1) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-1) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(-1) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(-1) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), p_short(-1) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), p_short(-1) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), p_short(23) * b_float(0.0))
    assertEquals(b_float(23.0), p_short(23) * b_float(1.0))
    assertEquals(b_float(-23.0), p_short(23) * b_float(-1.0))
    assertEquals(b_float(529.0), p_short(23) * b_float(23.0))
    assertEquals(b_float(531.829), p_short(23) * b_float(23.123))
    assertEquals(b_float(-736.0), p_short(23) * b_float(-32.0))
    assertEquals(b_float(-746.48804), p_short(23) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(23) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(23) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(23) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(23) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), p_short(23) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), p_short(-32) * b_float(0.0))
    assertEquals(b_float(-32.0), p_short(-32) * b_float(1.0))
    assertEquals(b_float(32.0), p_short(-32) * b_float(-1.0))
    assertEquals(b_float(-736.0), p_short(-32) * b_float(23.0))
    assertEquals(b_float(-739.936), p_short(-32) * b_float(23.123))
    assertEquals(b_float(1024.0), p_short(-32) * b_float(-32.0))
    assertEquals(b_float(1038.592), p_short(-32) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-32) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(-32) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(-32) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-32) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), p_short(-32) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), p_short(Short.MAX_VALUE) * b_float(0.0))
    assertEquals(b_float(32767.0), p_short(Short.MAX_VALUE) * b_float(1.0))
    assertEquals(b_float(-32767.0), p_short(Short.MAX_VALUE) * b_float(-1.0))
    assertEquals(b_float(753641.0), p_short(Short.MAX_VALUE) * b_float(23.0))
    assertEquals(b_float(757671.3), p_short(Short.MAX_VALUE) * b_float(23.123))
    assertEquals(b_float(-1048544.0), p_short(Short.MAX_VALUE) * b_float(-32.0))
    assertEquals(b_float(-1063485.8), p_short(Short.MAX_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(Short.MAX_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(Short.MAX_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("4.5916E-41")), p_short(Short.MAX_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), p_short(Short.MIN_VALUE) * b_float(0.0))
    assertEquals(b_float(-32768.0), p_short(Short.MIN_VALUE) * b_float(1.0))
    assertEquals(b_float(32768.0), p_short(Short.MIN_VALUE) * b_float(-1.0))
    assertEquals(b_float(-753664.0), p_short(Short.MIN_VALUE) * b_float(23.0))
    assertEquals(b_float(-757694.44), p_short(Short.MIN_VALUE) * b_float(23.123))
    assertEquals(b_float(1048576.0), p_short(Short.MIN_VALUE) * b_float(-32.0))
    assertEquals(b_float(1063518.2), p_short(Short.MIN_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(Short.MIN_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(Short.MIN_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5918E-41")), p_short(Short.MIN_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(p_short(0) * b_float(0.0)))
  }

  function testPShortPDoubleMultiplication() {
    assertEquals(p_double(0.0), p_short(0) * p_double(0.0))
    assertEquals(p_double(0.0), p_short(0) * p_double(1.0))
    assertEquals(p_double(-0.0), p_short(0) * p_double(-1.0))
    assertEquals(p_double(0.0), p_short(0) * p_double(23.0))
    assertEquals(p_double(0.0), p_short(0) * p_double(23.123))
    assertEquals(p_double(-0.0), p_short(0) * p_double(-32.0))
    assertEquals(p_double(-0.0), p_short(0) * p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_short(0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(0) * p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_short(0) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_short(0) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(0.0), p_short(1) * p_double(0.0))
    assertEquals(p_double(1.0), p_short(1) * p_double(1.0))
    assertEquals(p_double(-1.0), p_short(1) * p_double(-1.0))
    assertEquals(p_double(23.0), p_short(1) * p_double(23.0))
    assertEquals(p_double(23.123), p_short(1) * p_double(23.123))
    assertEquals(p_double(-32.0), p_short(1) * p_double(-32.0))
    assertEquals(p_double(-32.456), p_short(1) * p_double(-32.456))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(1) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(1) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(1) * p_double(Double.NaN_))
    assertEquals(p_double(Double.MAX_VALUE), p_short(1) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_short(1) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(-0.0), p_short(-1) * p_double(0.0))
    assertEquals(p_double(-1.0), p_short(-1) * p_double(1.0))
    assertEquals(p_double(1.0), p_short(-1) * p_double(-1.0))
    assertEquals(p_double(-23.0), p_short(-1) * p_double(23.0))
    assertEquals(p_double(-23.123), p_short(-1) * p_double(23.123))
    assertEquals(p_double(32.0), p_short(-1) * p_double(-32.0))
    assertEquals(p_double(32.456), p_short(-1) * p_double(-32.456))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-1) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(-1) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(-1) * p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_short(-1) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_short(-1) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(0.0), p_short(23) * p_double(0.0))
    assertEquals(p_double(23.0), p_short(23) * p_double(1.0))
    assertEquals(p_double(-23.0), p_short(23) * p_double(-1.0))
    assertEquals(p_double(529.0), p_short(23) * p_double(23.0))
    assertEquals(p_double(531.8290000000001), p_short(23) * p_double(23.123))
    assertEquals(p_double(-736.0), p_short(23) * p_double(-32.0))
    assertEquals(p_double(-746.488), p_short(23) * p_double(-32.456))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(23) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(23) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(23) * p_double(Double.NaN_))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(23) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.14E-322")), p_short(23) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(-0.0), p_short(-32) * p_double(0.0))
    assertEquals(p_double(-32.0), p_short(-32) * p_double(1.0))
    assertEquals(p_double(32.0), p_short(-32) * p_double(-1.0))
    assertEquals(p_double(-736.0), p_short(-32) * p_double(23.0))
    assertEquals(p_double(-739.936), p_short(-32) * p_double(23.123))
    assertEquals(p_double(1024.0), p_short(-32) * p_double(-32.0))
    assertEquals(p_double(1038.592), p_short(-32) * p_double(-32.456))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-32) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(-32) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(-32) * p_double(Double.NaN_))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-32) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.58E-322")), p_short(-32) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(0.0), p_short(Short.MAX_VALUE) * p_double(0.0))
    assertEquals(p_double(32767.0), p_short(Short.MAX_VALUE) * p_double(1.0))
    assertEquals(p_double(-32767.0), p_short(Short.MAX_VALUE) * p_double(-1.0))
    assertEquals(p_double(753641.0), p_short(Short.MAX_VALUE) * p_double(23.0))
    assertEquals(p_double(757671.341), p_short(Short.MAX_VALUE) * p_double(23.123))
    assertEquals(p_double(-1048544.0), p_short(Short.MAX_VALUE) * p_double(-32.0))
    assertEquals(p_double(-1063485.752), p_short(Short.MAX_VALUE) * p_double(-32.456))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(Short.MAX_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(Short.MAX_VALUE) * p_double(Double.NaN_))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.6189E-319")), p_short(Short.MAX_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(-0.0), p_short(Short.MIN_VALUE) * p_double(0.0))
    assertEquals(p_double(-32768.0), p_short(Short.MIN_VALUE) * p_double(1.0))
    assertEquals(p_double(32768.0), p_short(Short.MIN_VALUE) * p_double(-1.0))
    assertEquals(p_double(-753664.0), p_short(Short.MIN_VALUE) * p_double(23.0))
    assertEquals(p_double(-757694.464), p_short(Short.MIN_VALUE) * p_double(23.123))
    assertEquals(p_double(1048576.0), p_short(Short.MIN_VALUE) * p_double(-32.0))
    assertEquals(p_double(1063518.208), p_short(Short.MIN_VALUE) * p_double(-32.456))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(Short.MIN_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(Short.MIN_VALUE) * p_double(Double.NaN_))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.61895E-319")), p_short(Short.MIN_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_short(0) * p_double(0.0)))
  }

  function testPShortDoubleMultiplication() {
    assertEquals(b_double(0.0), p_short(0) * b_double(0.0))
    assertEquals(b_double(0.0), p_short(0) * b_double(1.0))
    assertEquals(b_double(-0.0), p_short(0) * b_double(-1.0))
    assertEquals(b_double(0.0), p_short(0) * b_double(23.0))
    assertEquals(b_double(0.0), p_short(0) * b_double(23.123))
    assertEquals(b_double(-0.0), p_short(0) * b_double(-32.0))
    assertEquals(b_double(-0.0), p_short(0) * b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_short(0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(0) * b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_short(0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_short(0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), p_short(1) * b_double(0.0))
    assertEquals(b_double(1.0), p_short(1) * b_double(1.0))
    assertEquals(b_double(-1.0), p_short(1) * b_double(-1.0))
    assertEquals(b_double(23.0), p_short(1) * b_double(23.0))
    assertEquals(b_double(23.123), p_short(1) * b_double(23.123))
    assertEquals(b_double(-32.0), p_short(1) * b_double(-32.0))
    assertEquals(b_double(-32.456), p_short(1) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(1) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(1) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(1) * b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), p_short(1) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_short(1) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), p_short(-1) * b_double(0.0))
    assertEquals(b_double(-1.0), p_short(-1) * b_double(1.0))
    assertEquals(b_double(1.0), p_short(-1) * b_double(-1.0))
    assertEquals(b_double(-23.0), p_short(-1) * b_double(23.0))
    assertEquals(b_double(-23.123), p_short(-1) * b_double(23.123))
    assertEquals(b_double(32.0), p_short(-1) * b_double(-32.0))
    assertEquals(b_double(32.456), p_short(-1) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-1) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(-1) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(-1) * b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_short(-1) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_short(-1) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), p_short(23) * b_double(0.0))
    assertEquals(b_double(23.0), p_short(23) * b_double(1.0))
    assertEquals(b_double(-23.0), p_short(23) * b_double(-1.0))
    assertEquals(b_double(529.0), p_short(23) * b_double(23.0))
    assertEquals(b_double(531.8290000000001), p_short(23) * b_double(23.123))
    assertEquals(b_double(-736.0), p_short(23) * b_double(-32.0))
    assertEquals(b_double(-746.488), p_short(23) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(23) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(23) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(23) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(23) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), p_short(23) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), p_short(-32) * b_double(0.0))
    assertEquals(b_double(-32.0), p_short(-32) * b_double(1.0))
    assertEquals(b_double(32.0), p_short(-32) * b_double(-1.0))
    assertEquals(b_double(-736.0), p_short(-32) * b_double(23.0))
    assertEquals(b_double(-739.936), p_short(-32) * b_double(23.123))
    assertEquals(b_double(1024.0), p_short(-32) * b_double(-32.0))
    assertEquals(b_double(1038.592), p_short(-32) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-32) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(-32) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(-32) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-32) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), p_short(-32) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), p_short(Short.MAX_VALUE) * b_double(0.0))
    assertEquals(b_double(32767.0), p_short(Short.MAX_VALUE) * b_double(1.0))
    assertEquals(b_double(-32767.0), p_short(Short.MAX_VALUE) * b_double(-1.0))
    assertEquals(b_double(753641.0), p_short(Short.MAX_VALUE) * b_double(23.0))
    assertEquals(b_double(757671.341), p_short(Short.MAX_VALUE) * b_double(23.123))
    assertEquals(b_double(-1048544.0), p_short(Short.MAX_VALUE) * b_double(-32.0))
    assertEquals(b_double(-1063485.752), p_short(Short.MAX_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(Short.MAX_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(Short.MAX_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.6189E-319")), p_short(Short.MAX_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), p_short(Short.MIN_VALUE) * b_double(0.0))
    assertEquals(b_double(-32768.0), p_short(Short.MIN_VALUE) * b_double(1.0))
    assertEquals(b_double(32768.0), p_short(Short.MIN_VALUE) * b_double(-1.0))
    assertEquals(b_double(-753664.0), p_short(Short.MIN_VALUE) * b_double(23.0))
    assertEquals(b_double(-757694.464), p_short(Short.MIN_VALUE) * b_double(23.123))
    assertEquals(b_double(1048576.0), p_short(Short.MIN_VALUE) * b_double(-32.0))
    assertEquals(b_double(1063518.208), p_short(Short.MIN_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(Short.MIN_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(Short.MIN_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.61895E-319")), p_short(Short.MIN_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_short(0) * b_double(0.0)))
  }

  function testPShortBigIntegerMultiplication() {
    assertEquals(big_int("0"), p_short(0) * big_int("0"))
    assertEquals(big_int("0"), p_short(0) * big_int("1"))
    assertEquals(big_int("0"), p_short(0) * big_int("-1"))
    assertEquals(big_int("0"), p_short(0) * big_int("23"))
    assertEquals(big_int("0"), p_short(0) * big_int("-32"))
    assertEquals(big_int("0"), p_short(0) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_short(1) * big_int("0"))
    assertEquals(big_int("1"), p_short(1) * big_int("1"))
    assertEquals(big_int("-1"), p_short(1) * big_int("-1"))
    assertEquals(big_int("23"), p_short(1) * big_int("23"))
    assertEquals(big_int("-32"), p_short(1) * big_int("-32"))
    assertEquals(big_int("123456789012345678901234567890"), p_short(1) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-123456789012345678901234567890"), p_short(1) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_short(-1) * big_int("0"))
    assertEquals(big_int("-1"), p_short(-1) * big_int("1"))
    assertEquals(big_int("1"), p_short(-1) * big_int("-1"))
    assertEquals(big_int("-23"), p_short(-1) * big_int("23"))
    assertEquals(big_int("32"), p_short(-1) * big_int("-32"))
    assertEquals(big_int("-123456789012345678901234567890"), p_short(-1) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("123456789012345678901234567890"), p_short(-1) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_short(23) * big_int("0"))
    assertEquals(big_int("23"), p_short(23) * big_int("1"))
    assertEquals(big_int("-23"), p_short(23) * big_int("-1"))
    assertEquals(big_int("529"), p_short(23) * big_int("23"))
    assertEquals(big_int("-736"), p_short(23) * big_int("-32"))
    assertEquals(big_int("2839506147283950614728395061470"), p_short(23) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-2839506147283950614728395061470"), p_short(23) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_short(-32) * big_int("0"))
    assertEquals(big_int("-32"), p_short(-32) * big_int("1"))
    assertEquals(big_int("32"), p_short(-32) * big_int("-1"))
    assertEquals(big_int("-736"), p_short(-32) * big_int("23"))
    assertEquals(big_int("1024"), p_short(-32) * big_int("-32"))
    assertEquals(big_int("-3950617248395061724839506172480"), p_short(-32) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("3950617248395061724839506172480"), p_short(-32) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_short(Short.MAX_VALUE) * big_int("0"))
    assertEquals(big_int("32767"), p_short(Short.MAX_VALUE) * big_int("1"))
    assertEquals(big_int("-32767"), p_short(Short.MAX_VALUE) * big_int("-1"))
    assertEquals(big_int("753641"), p_short(Short.MAX_VALUE) * big_int("23"))
    assertEquals(big_int("-1048544"), p_short(Short.MAX_VALUE) * big_int("-32"))
    assertEquals(big_int("4045308605567530860556753086051630"), p_short(Short.MAX_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-4045308605567530860556753086051630"), p_short(Short.MAX_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_short(Short.MIN_VALUE) * big_int("0"))
    assertEquals(big_int("-32768"), p_short(Short.MIN_VALUE) * big_int("1"))
    assertEquals(big_int("32768"), p_short(Short.MIN_VALUE) * big_int("-1"))
    assertEquals(big_int("-753664"), p_short(Short.MIN_VALUE) * big_int("23"))
    assertEquals(big_int("1048576"), p_short(Short.MIN_VALUE) * big_int("-32"))
    assertEquals(big_int("-4045432062356543206235654320619520"), p_short(Short.MIN_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("4045432062356543206235654320619520"), p_short(Short.MIN_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(p_short(0) * big_int("0")))
  }

  function testPShortBigDecimalMultiplication() {
    assertEquals(big_decimal("0"), p_short(0) * big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(0) * big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(0) * big_decimal("-1"))
    assertEquals(big_decimal("0"), p_short(0) * big_decimal("23"))
    assertEquals(big_decimal("0.000"), p_short(0) * big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_short(0) * big_decimal("-32"))
    assertEquals(big_decimal("0.000"), p_short(0) * big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), p_short(0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), p_short(0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_short(1) * big_decimal("0"))
    assertEquals(big_decimal("1"), p_short(1) * big_decimal("1"))
    assertEquals(big_decimal("-1"), p_short(1) * big_decimal("-1"))
    assertEquals(big_decimal("23"), p_short(1) * big_decimal("23"))
    assertEquals(big_decimal("23.123"), p_short(1) * big_decimal("23.123"))
    assertEquals(big_decimal("-32"), p_short(1) * big_decimal("-32"))
    assertEquals(big_decimal("-32.456"), p_short(1) * big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), p_short(1) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), p_short(1) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_short(-1) * big_decimal("0"))
    assertEquals(big_decimal("-1"), p_short(-1) * big_decimal("1"))
    assertEquals(big_decimal("1"), p_short(-1) * big_decimal("-1"))
    assertEquals(big_decimal("-23"), p_short(-1) * big_decimal("23"))
    assertEquals(big_decimal("-23.123"), p_short(-1) * big_decimal("23.123"))
    assertEquals(big_decimal("32"), p_short(-1) * big_decimal("-32"))
    assertEquals(big_decimal("32.456"), p_short(-1) * big_decimal("-32.456"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), p_short(-1) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), p_short(-1) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_short(23) * big_decimal("0"))
    assertEquals(big_decimal("23"), p_short(23) * big_decimal("1"))
    assertEquals(big_decimal("-23"), p_short(23) * big_decimal("-1"))
    assertEquals(big_decimal("529"), p_short(23) * big_decimal("23"))
    assertEquals(big_decimal("531.829"), p_short(23) * big_decimal("23.123"))
    assertEquals(big_decimal("-736"), p_short(23) * big_decimal("-32"))
    assertEquals(big_decimal("-746.488"), p_short(23) * big_decimal("-32.456"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), p_short(23) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), p_short(23) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_short(-32) * big_decimal("0"))
    assertEquals(big_decimal("-32"), p_short(-32) * big_decimal("1"))
    assertEquals(big_decimal("32"), p_short(-32) * big_decimal("-1"))
    assertEquals(big_decimal("-736"), p_short(-32) * big_decimal("23"))
    assertEquals(big_decimal("-739.936"), p_short(-32) * big_decimal("23.123"))
    assertEquals(big_decimal("1024"), p_short(-32) * big_decimal("-32"))
    assertEquals(big_decimal("1038.592"), p_short(-32) * big_decimal("-32.456"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), p_short(-32) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), p_short(-32) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_short(Short.MAX_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("32767"), p_short(Short.MAX_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("-32767"), p_short(Short.MAX_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("753641"), p_short(Short.MAX_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("757671.341"), p_short(Short.MAX_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("-1048544"), p_short(Short.MAX_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("-1063485.752"), p_short(Short.MAX_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("4045308605567530860556753086055675.308605163"), p_short(Short.MAX_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-4045308605567530860556753086055675.308605163"), p_short(Short.MAX_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_short(Short.MIN_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("-32768"), p_short(Short.MIN_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("32768"), p_short(Short.MIN_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("-753664"), p_short(Short.MIN_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("-757694.464"), p_short(Short.MIN_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("1048576"), p_short(Short.MIN_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("1063518.208"), p_short(Short.MIN_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("-4045432062356543206235654320623565.432061952"), p_short(Short.MIN_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("4045432062356543206235654320623565.432061952"), p_short(Short.MIN_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_short(0) * big_decimal("0")))
  }

}

