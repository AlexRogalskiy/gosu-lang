package gw.spec.core.expressions.arithmetic.multiplication
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Multiplication_BigIntegerTest extends ArithmeticTestBase {

  function testBigIntegerPByteMultiplication() {
    assertEquals(big_int("0"), big_int("0") * p_byte(0))
    assertEquals(big_int("0"), big_int("0") * p_byte(1))
    assertEquals(big_int("0"), big_int("0") * p_byte(-1))
    assertEquals(big_int("0"), big_int("0") * p_byte(23))
    assertEquals(big_int("0"), big_int("0") * p_byte(-32))
    assertEquals(big_int("0"), big_int("0") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * p_byte(0))
    assertEquals(big_int("1"), big_int("1") * p_byte(1))
    assertEquals(big_int("-1"), big_int("1") * p_byte(-1))
    assertEquals(big_int("23"), big_int("1") * p_byte(23))
    assertEquals(big_int("-32"), big_int("1") * p_byte(-32))
    assertEquals(big_int("127"), big_int("1") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-128"), big_int("1") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * p_byte(0))
    assertEquals(big_int("-1"), big_int("-1") * p_byte(1))
    assertEquals(big_int("1"), big_int("-1") * p_byte(-1))
    assertEquals(big_int("-23"), big_int("-1") * p_byte(23))
    assertEquals(big_int("32"), big_int("-1") * p_byte(-32))
    assertEquals(big_int("-127"), big_int("-1") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("128"), big_int("-1") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * p_byte(0))
    assertEquals(big_int("23"), big_int("23") * p_byte(1))
    assertEquals(big_int("-23"), big_int("23") * p_byte(-1))
    assertEquals(big_int("529"), big_int("23") * p_byte(23))
    assertEquals(big_int("-736"), big_int("23") * p_byte(-32))
    assertEquals(big_int("2921"), big_int("23") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-2944"), big_int("23") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * p_byte(0))
    assertEquals(big_int("-32"), big_int("-32") * p_byte(1))
    assertEquals(big_int("32"), big_int("-32") * p_byte(-1))
    assertEquals(big_int("-736"), big_int("-32") * p_byte(23))
    assertEquals(big_int("1024"), big_int("-32") * p_byte(-32))
    assertEquals(big_int("-4064"), big_int("-32") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("4096"), big_int("-32") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * p_byte(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_byte(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_byte(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * p_byte(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * p_byte(-32))
    assertEquals(big_int("15679012204567901220456790122030"), big_int("123456789012345678901234567890") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-15802468993580246899358024689920"), big_int("123456789012345678901234567890") * p_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * p_byte(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_byte(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_byte(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * p_byte(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * p_byte(-32))
    assertEquals(big_int("-15679012204567901220456790122030"), big_int("-123456789012345678901234567890") * p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("15802468993580246899358024689920"), big_int("-123456789012345678901234567890") * p_byte(Byte.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * p_byte(0)))
  }

  function testBigIntegerByteMultiplication() {
    assertEquals(big_int("0"), big_int("0") * b_byte(0))
    assertEquals(big_int("0"), big_int("0") * p_byte(1))
    assertEquals(big_int("0"), big_int("0") * p_byte(-1))
    assertEquals(big_int("0"), big_int("0") * b_byte(23))
    assertEquals(big_int("0"), big_int("0") * b_byte(-32))
    assertEquals(big_int("0"), big_int("0") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * b_byte(0))
    assertEquals(big_int("1"), big_int("1") * p_byte(1))
    assertEquals(big_int("-1"), big_int("1") * p_byte(-1))
    assertEquals(big_int("23"), big_int("1") * b_byte(23))
    assertEquals(big_int("-32"), big_int("1") * b_byte(-32))
    assertEquals(big_int("127"), big_int("1") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-128"), big_int("1") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * b_byte(0))
    assertEquals(big_int("-1"), big_int("-1") * p_byte(1))
    assertEquals(big_int("1"), big_int("-1") * p_byte(-1))
    assertEquals(big_int("-23"), big_int("-1") * b_byte(23))
    assertEquals(big_int("32"), big_int("-1") * b_byte(-32))
    assertEquals(big_int("-127"), big_int("-1") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("128"), big_int("-1") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * b_byte(0))
    assertEquals(big_int("23"), big_int("23") * p_byte(1))
    assertEquals(big_int("-23"), big_int("23") * p_byte(-1))
    assertEquals(big_int("529"), big_int("23") * b_byte(23))
    assertEquals(big_int("-736"), big_int("23") * b_byte(-32))
    assertEquals(big_int("2921"), big_int("23") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-2944"), big_int("23") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * b_byte(0))
    assertEquals(big_int("-32"), big_int("-32") * p_byte(1))
    assertEquals(big_int("32"), big_int("-32") * p_byte(-1))
    assertEquals(big_int("-736"), big_int("-32") * b_byte(23))
    assertEquals(big_int("1024"), big_int("-32") * b_byte(-32))
    assertEquals(big_int("-4064"), big_int("-32") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("4096"), big_int("-32") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * b_byte(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_byte(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_byte(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * b_byte(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * b_byte(-32))
    assertEquals(big_int("15679012204567901220456790122030"), big_int("123456789012345678901234567890") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-15802468993580246899358024689920"), big_int("123456789012345678901234567890") * b_byte(Byte.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * b_byte(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_byte(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_byte(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * b_byte(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * b_byte(-32))
    assertEquals(big_int("-15679012204567901220456790122030"), big_int("-123456789012345678901234567890") * b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("15802468993580246899358024689920"), big_int("-123456789012345678901234567890") * b_byte(Byte.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * b_byte(0)))
  }

  function testBigIntegerPShortMultiplication() {
    assertEquals(big_int("0"), big_int("0") * p_short(0))
    assertEquals(big_int("0"), big_int("0") * p_short(1))
    assertEquals(big_int("0"), big_int("0") * p_short(-1))
    assertEquals(big_int("0"), big_int("0") * p_short(23))
    assertEquals(big_int("0"), big_int("0") * p_short(-32))
    assertEquals(big_int("0"), big_int("0") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * p_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * p_short(0))
    assertEquals(big_int("1"), big_int("1") * p_short(1))
    assertEquals(big_int("-1"), big_int("1") * p_short(-1))
    assertEquals(big_int("23"), big_int("1") * p_short(23))
    assertEquals(big_int("-32"), big_int("1") * p_short(-32))
    assertEquals(big_int("32767"), big_int("1") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("-32768"), big_int("1") * p_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * p_short(0))
    assertEquals(big_int("-1"), big_int("-1") * p_short(1))
    assertEquals(big_int("1"), big_int("-1") * p_short(-1))
    assertEquals(big_int("-23"), big_int("-1") * p_short(23))
    assertEquals(big_int("32"), big_int("-1") * p_short(-32))
    assertEquals(big_int("-32767"), big_int("-1") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("32768"), big_int("-1") * p_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * p_short(0))
    assertEquals(big_int("23"), big_int("23") * p_short(1))
    assertEquals(big_int("-23"), big_int("23") * p_short(-1))
    assertEquals(big_int("529"), big_int("23") * p_short(23))
    assertEquals(big_int("-736"), big_int("23") * p_short(-32))
    assertEquals(big_int("753641"), big_int("23") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("-753664"), big_int("23") * p_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * p_short(0))
    assertEquals(big_int("-32"), big_int("-32") * p_short(1))
    assertEquals(big_int("32"), big_int("-32") * p_short(-1))
    assertEquals(big_int("-736"), big_int("-32") * p_short(23))
    assertEquals(big_int("1024"), big_int("-32") * p_short(-32))
    assertEquals(big_int("-1048544"), big_int("-32") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("1048576"), big_int("-32") * p_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * p_short(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_short(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_short(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * p_short(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * p_short(-32))
    assertEquals(big_int("4045308605567530860556753086051630"), big_int("123456789012345678901234567890") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("-4045432062356543206235654320619520"), big_int("123456789012345678901234567890") * p_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * p_short(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_short(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_short(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * p_short(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * p_short(-32))
    assertEquals(big_int("-4045308605567530860556753086051630"), big_int("-123456789012345678901234567890") * p_short(Short.MAX_VALUE))
    assertEquals(big_int("4045432062356543206235654320619520"), big_int("-123456789012345678901234567890") * p_short(Short.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * p_short(0)))
  }

  function testBigIntegerShortMultiplication() {
    assertEquals(big_int("0"), big_int("0") * b_short(0))
    assertEquals(big_int("0"), big_int("0") * b_short(1))
    assertEquals(big_int("0"), big_int("0") * b_short(-1))
    assertEquals(big_int("0"), big_int("0") * b_short(23))
    assertEquals(big_int("0"), big_int("0") * b_short(-32))
    assertEquals(big_int("0"), big_int("0") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * b_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * b_short(0))
    assertEquals(big_int("1"), big_int("1") * b_short(1))
    assertEquals(big_int("-1"), big_int("1") * b_short(-1))
    assertEquals(big_int("23"), big_int("1") * b_short(23))
    assertEquals(big_int("-32"), big_int("1") * b_short(-32))
    assertEquals(big_int("32767"), big_int("1") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("-32768"), big_int("1") * b_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * b_short(0))
    assertEquals(big_int("-1"), big_int("-1") * b_short(1))
    assertEquals(big_int("1"), big_int("-1") * b_short(-1))
    assertEquals(big_int("-23"), big_int("-1") * b_short(23))
    assertEquals(big_int("32"), big_int("-1") * b_short(-32))
    assertEquals(big_int("-32767"), big_int("-1") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("32768"), big_int("-1") * b_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * b_short(0))
    assertEquals(big_int("23"), big_int("23") * b_short(1))
    assertEquals(big_int("-23"), big_int("23") * b_short(-1))
    assertEquals(big_int("529"), big_int("23") * b_short(23))
    assertEquals(big_int("-736"), big_int("23") * b_short(-32))
    assertEquals(big_int("753641"), big_int("23") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("-753664"), big_int("23") * b_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * b_short(0))
    assertEquals(big_int("-32"), big_int("-32") * b_short(1))
    assertEquals(big_int("32"), big_int("-32") * b_short(-1))
    assertEquals(big_int("-736"), big_int("-32") * b_short(23))
    assertEquals(big_int("1024"), big_int("-32") * b_short(-32))
    assertEquals(big_int("-1048544"), big_int("-32") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("1048576"), big_int("-32") * b_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * b_short(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_short(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_short(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * b_short(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * b_short(-32))
    assertEquals(big_int("4045308605567530860556753086051630"), big_int("123456789012345678901234567890") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("-4045432062356543206235654320619520"), big_int("123456789012345678901234567890") * b_short(Short.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * b_short(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_short(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_short(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * b_short(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * b_short(-32))
    assertEquals(big_int("-4045308605567530860556753086051630"), big_int("-123456789012345678901234567890") * b_short(Short.MAX_VALUE))
    assertEquals(big_int("4045432062356543206235654320619520"), big_int("-123456789012345678901234567890") * b_short(Short.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * b_short(0)))
  }

  function testBigIntegerPCharMultiplication() {
    assertEquals(big_int("0"), big_int("0") * p_char(0))
    assertEquals(big_int("0"), big_int("0") * p_char(1))
    assertEquals(big_int("0"), big_int("0") * p_char(23))
    assertEquals(big_int("0"), big_int("0") * p_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("1") * p_char(0))
    assertEquals(big_int("1"), big_int("1") * p_char(1))
    assertEquals(big_int("23"), big_int("1") * p_char(23))
    assertEquals(big_int("65535"), big_int("1") * p_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("-1") * p_char(0))
    assertEquals(big_int("-1"), big_int("-1") * p_char(1))
    assertEquals(big_int("-23"), big_int("-1") * p_char(23))
    assertEquals(big_int("-65535"), big_int("-1") * p_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("23") * p_char(0))
    assertEquals(big_int("23"), big_int("23") * p_char(1))
    assertEquals(big_int("529"), big_int("23") * p_char(23))
    assertEquals(big_int("1507305"), big_int("23") * p_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("-32") * p_char(0))
    assertEquals(big_int("-32"), big_int("-32") * p_char(1))
    assertEquals(big_int("-736"), big_int("-32") * p_char(23))
    assertEquals(big_int("-2097120"), big_int("-32") * p_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * p_char(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_char(1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * p_char(23))
    assertEquals(big_int("8090740667924074066792407406671150"), big_int("123456789012345678901234567890") * p_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * p_char(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_char(1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * p_char(23))
    assertEquals(big_int("-8090740667924074066792407406671150"), big_int("-123456789012345678901234567890") * p_char(Character.MAX_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * p_char(0)))
  }

  function testBigIntegerCharacterMultiplication() {
    assertEquals(big_int("0"), big_int("0") * b_char(0))
    assertEquals(big_int("0"), big_int("0") * b_char(1))
    assertEquals(big_int("0"), big_int("0") * b_char(23))
    assertEquals(big_int("0"), big_int("0") * b_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("1") * b_char(0))
    assertEquals(big_int("1"), big_int("1") * b_char(1))
    assertEquals(big_int("23"), big_int("1") * b_char(23))
    assertEquals(big_int("65535"), big_int("1") * b_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("-1") * b_char(0))
    assertEquals(big_int("-1"), big_int("-1") * b_char(1))
    assertEquals(big_int("-23"), big_int("-1") * b_char(23))
    assertEquals(big_int("-65535"), big_int("-1") * b_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("23") * b_char(0))
    assertEquals(big_int("23"), big_int("23") * b_char(1))
    assertEquals(big_int("529"), big_int("23") * b_char(23))
    assertEquals(big_int("1507305"), big_int("23") * b_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("-32") * b_char(0))
    assertEquals(big_int("-32"), big_int("-32") * b_char(1))
    assertEquals(big_int("-736"), big_int("-32") * b_char(23))
    assertEquals(big_int("-2097120"), big_int("-32") * b_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * b_char(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_char(1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * b_char(23))
    assertEquals(big_int("8090740667924074066792407406671150"), big_int("123456789012345678901234567890") * b_char(Character.MAX_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * b_char(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_char(1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * b_char(23))
    assertEquals(big_int("-8090740667924074066792407406671150"), big_int("-123456789012345678901234567890") * b_char(Character.MAX_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * b_char(0)))
  }

  function testBigIntegerPIntMultiplication() {
    assertEquals(big_int("0"), big_int("0") * p_int(0))
    assertEquals(big_int("0"), big_int("0") * p_int(1))
    assertEquals(big_int("0"), big_int("0") * p_int(-1))
    assertEquals(big_int("0"), big_int("0") * p_int(23))
    assertEquals(big_int("0"), big_int("0") * p_int(-32))
    assertEquals(big_int("0"), big_int("0") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * p_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * p_int(0))
    assertEquals(big_int("1"), big_int("1") * p_int(1))
    assertEquals(big_int("-1"), big_int("1") * p_int(-1))
    assertEquals(big_int("23"), big_int("1") * p_int(23))
    assertEquals(big_int("-32"), big_int("1") * p_int(-32))
    assertEquals(big_int("2147483647"), big_int("1") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("-2147483648"), big_int("1") * p_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * p_int(0))
    assertEquals(big_int("-1"), big_int("-1") * p_int(1))
    assertEquals(big_int("1"), big_int("-1") * p_int(-1))
    assertEquals(big_int("-23"), big_int("-1") * p_int(23))
    assertEquals(big_int("32"), big_int("-1") * p_int(-32))
    assertEquals(big_int("-2147483647"), big_int("-1") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("2147483648"), big_int("-1") * p_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * p_int(0))
    assertEquals(big_int("23"), big_int("23") * p_int(1))
    assertEquals(big_int("-23"), big_int("23") * p_int(-1))
    assertEquals(big_int("529"), big_int("23") * p_int(23))
    assertEquals(big_int("-736"), big_int("23") * p_int(-32))
    assertEquals(big_int("49392123881"), big_int("23") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("-49392123904"), big_int("23") * p_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * p_int(0))
    assertEquals(big_int("-32"), big_int("-32") * p_int(1))
    assertEquals(big_int("32"), big_int("-32") * p_int(-1))
    assertEquals(big_int("-736"), big_int("-32") * p_int(23))
    assertEquals(big_int("1024"), big_int("-32") * p_int(-32))
    assertEquals(big_int("-68719476704"), big_int("-32") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("68719476736"), big_int("-32") * p_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * p_int(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_int(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_int(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * p_int(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * p_int(-32))
    assertEquals(big_int("265121435515141626551514162654886294830"), big_int("123456789012345678901234567890") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("-265121435638598415563859841556120862720"), big_int("123456789012345678901234567890") * p_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * p_int(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_int(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_int(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * p_int(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * p_int(-32))
    assertEquals(big_int("-265121435515141626551514162654886294830"), big_int("-123456789012345678901234567890") * p_int(Integer.MAX_VALUE))
    assertEquals(big_int("265121435638598415563859841556120862720"), big_int("-123456789012345678901234567890") * p_int(Integer.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * p_int(0)))
  }

  function testBigIntegerIntegerMultiplication() {
    assertEquals(big_int("0"), big_int("0") * b_int(0))
    assertEquals(big_int("0"), big_int("0") * b_int(1))
    assertEquals(big_int("0"), big_int("0") * b_int(-1))
    assertEquals(big_int("0"), big_int("0") * b_int(23))
    assertEquals(big_int("0"), big_int("0") * b_int(-32))
    assertEquals(big_int("0"), big_int("0") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * b_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * b_int(0))
    assertEquals(big_int("1"), big_int("1") * b_int(1))
    assertEquals(big_int("-1"), big_int("1") * b_int(-1))
    assertEquals(big_int("23"), big_int("1") * b_int(23))
    assertEquals(big_int("-32"), big_int("1") * b_int(-32))
    assertEquals(big_int("2147483647"), big_int("1") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("-2147483648"), big_int("1") * b_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * b_int(0))
    assertEquals(big_int("-1"), big_int("-1") * b_int(1))
    assertEquals(big_int("1"), big_int("-1") * b_int(-1))
    assertEquals(big_int("-23"), big_int("-1") * b_int(23))
    assertEquals(big_int("32"), big_int("-1") * b_int(-32))
    assertEquals(big_int("-2147483647"), big_int("-1") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("2147483648"), big_int("-1") * b_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * b_int(0))
    assertEquals(big_int("23"), big_int("23") * b_int(1))
    assertEquals(big_int("-23"), big_int("23") * b_int(-1))
    assertEquals(big_int("529"), big_int("23") * b_int(23))
    assertEquals(big_int("-736"), big_int("23") * b_int(-32))
    assertEquals(big_int("49392123881"), big_int("23") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("-49392123904"), big_int("23") * b_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * b_int(0))
    assertEquals(big_int("-32"), big_int("-32") * b_int(1))
    assertEquals(big_int("32"), big_int("-32") * b_int(-1))
    assertEquals(big_int("-736"), big_int("-32") * b_int(23))
    assertEquals(big_int("1024"), big_int("-32") * b_int(-32))
    assertEquals(big_int("-68719476704"), big_int("-32") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("68719476736"), big_int("-32") * b_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * b_int(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_int(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_int(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * b_int(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * b_int(-32))
    assertEquals(big_int("265121435515141626551514162654886294830"), big_int("123456789012345678901234567890") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("-265121435638598415563859841556120862720"), big_int("123456789012345678901234567890") * b_int(Integer.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * b_int(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_int(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_int(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * b_int(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * b_int(-32))
    assertEquals(big_int("-265121435515141626551514162654886294830"), big_int("-123456789012345678901234567890") * b_int(Integer.MAX_VALUE))
    assertEquals(big_int("265121435638598415563859841556120862720"), big_int("-123456789012345678901234567890") * b_int(Integer.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * b_int(0)))
  }

  function testBigIntegerPLongMultiplication() {
    assertEquals(big_int("0"), big_int("0") * p_long(0))
    assertEquals(big_int("0"), big_int("0") * p_long(1))
    assertEquals(big_int("0"), big_int("0") * p_long(-1))
    assertEquals(big_int("0"), big_int("0") * p_long(23))
    assertEquals(big_int("0"), big_int("0") * p_long(-32))
    assertEquals(big_int("0"), big_int("0") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * p_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * p_long(0))
    assertEquals(big_int("1"), big_int("1") * p_long(1))
    assertEquals(big_int("-1"), big_int("1") * p_long(-1))
    assertEquals(big_int("23"), big_int("1") * p_long(23))
    assertEquals(big_int("-32"), big_int("1") * p_long(-32))
    assertEquals(big_int("9223372036854775807"), big_int("1") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("-9223372036854775808"), big_int("1") * p_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * p_long(0))
    assertEquals(big_int("-1"), big_int("-1") * p_long(1))
    assertEquals(big_int("1"), big_int("-1") * p_long(-1))
    assertEquals(big_int("-23"), big_int("-1") * p_long(23))
    assertEquals(big_int("32"), big_int("-1") * p_long(-32))
    assertEquals(big_int("-9223372036854775807"), big_int("-1") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("9223372036854775808"), big_int("-1") * p_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * p_long(0))
    assertEquals(big_int("23"), big_int("23") * p_long(1))
    assertEquals(big_int("-23"), big_int("23") * p_long(-1))
    assertEquals(big_int("529"), big_int("23") * p_long(23))
    assertEquals(big_int("-736"), big_int("23") * p_long(-32))
    assertEquals(big_int("212137556847659843561"), big_int("23") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("-212137556847659843584"), big_int("23") * p_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * p_long(0))
    assertEquals(big_int("-32"), big_int("-32") * p_long(1))
    assertEquals(big_int("32"), big_int("-32") * p_long(-1))
    assertEquals(big_int("-736"), big_int("-32") * p_long(23))
    assertEquals(big_int("1024"), big_int("-32") * p_long(-32))
    assertEquals(big_int("-295147905179352825824"), big_int("-32") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("295147905179352825856"), big_int("-32") * p_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * p_long(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_long(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * p_long(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * p_long(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * p_long(-32))
    assertEquals(big_int("1138687895536349070000738629998935175104471037230"), big_int("123456789012345678901234567890") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("-1138687895536349070124195419011280854005705605120"), big_int("123456789012345678901234567890") * p_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * p_long(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_long(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * p_long(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * p_long(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * p_long(-32))
    assertEquals(big_int("-1138687895536349070000738629998935175104471037230"), big_int("-123456789012345678901234567890") * p_long(Long.MAX_VALUE))
    assertEquals(big_int("1138687895536349070124195419011280854005705605120"), big_int("-123456789012345678901234567890") * p_long(Long.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * p_long(0)))
  }

  function testBigIntegerLongMultiplication() {
    assertEquals(big_int("0"), big_int("0") * b_long(0))
    assertEquals(big_int("0"), big_int("0") * b_long(1))
    assertEquals(big_int("0"), big_int("0") * b_long(-1))
    assertEquals(big_int("0"), big_int("0") * b_long(23))
    assertEquals(big_int("0"), big_int("0") * b_long(-32))
    assertEquals(big_int("0"), big_int("0") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") * b_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("1") * b_long(0))
    assertEquals(big_int("1"), big_int("1") * b_long(1))
    assertEquals(big_int("-1"), big_int("1") * b_long(-1))
    assertEquals(big_int("23"), big_int("1") * b_long(23))
    assertEquals(big_int("-32"), big_int("1") * b_long(-32))
    assertEquals(big_int("9223372036854775807"), big_int("1") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("-9223372036854775808"), big_int("1") * b_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-1") * b_long(0))
    assertEquals(big_int("-1"), big_int("-1") * b_long(1))
    assertEquals(big_int("1"), big_int("-1") * b_long(-1))
    assertEquals(big_int("-23"), big_int("-1") * b_long(23))
    assertEquals(big_int("32"), big_int("-1") * b_long(-32))
    assertEquals(big_int("-9223372036854775807"), big_int("-1") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("9223372036854775808"), big_int("-1") * b_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("23") * b_long(0))
    assertEquals(big_int("23"), big_int("23") * b_long(1))
    assertEquals(big_int("-23"), big_int("23") * b_long(-1))
    assertEquals(big_int("529"), big_int("23") * b_long(23))
    assertEquals(big_int("-736"), big_int("23") * b_long(-32))
    assertEquals(big_int("212137556847659843561"), big_int("23") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("-212137556847659843584"), big_int("23") * b_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-32") * b_long(0))
    assertEquals(big_int("-32"), big_int("-32") * b_long(1))
    assertEquals(big_int("32"), big_int("-32") * b_long(-1))
    assertEquals(big_int("-736"), big_int("-32") * b_long(23))
    assertEquals(big_int("1024"), big_int("-32") * b_long(-32))
    assertEquals(big_int("-295147905179352825824"), big_int("-32") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("295147905179352825856"), big_int("-32") * b_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * b_long(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_long(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * b_long(-1))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * b_long(23))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * b_long(-32))
    assertEquals(big_int("1138687895536349070000738629998935175104471037230"), big_int("123456789012345678901234567890") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("-1138687895536349070124195419011280854005705605120"), big_int("123456789012345678901234567890") * b_long(Long.MIN_VALUE))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * b_long(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_long(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * b_long(-1))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * b_long(23))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * b_long(-32))
    assertEquals(big_int("-1138687895536349070000738629998935175104471037230"), big_int("-123456789012345678901234567890") * b_long(Long.MAX_VALUE))
    assertEquals(big_int("1138687895536349070124195419011280854005705605120"), big_int("-123456789012345678901234567890") * b_long(Long.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") * b_long(0)))
  }

  function testBigIntegerPFloatMultiplication() {
    assertEquals(big_decimal("0.0"), big_int("0") * p_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("0") * p_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * p_float(-1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * p_float(23.0))
    assertEquals(big_decimal("0.000"), big_int("0") * p_float(23.123))
    assertEquals(big_decimal("0.0"), big_int("0") * p_float(-32.0))
    assertEquals(big_decimal("0.000"), big_int("0") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.NaN_))
    assertEquals(big_decimal("0E+31"), big_int("0") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E-46"), big_int("0") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("1") * p_float(0.0))
    assertEquals(big_decimal("1.0"), big_int("1") * p_float(1.0))
    assertEquals(big_decimal("-1.0"), big_int("1") * p_float(-1.0))
    assertEquals(big_decimal("23.0"), big_int("1") * p_float(23.0))
    assertEquals(big_decimal("23.123"), big_int("1") * p_float(23.123))
    assertEquals(big_decimal("-32.0"), big_int("1") * p_float(-32.0))
    assertEquals(big_decimal("-32.456"), big_int("1") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.NaN_))
    assertEquals(big_decimal("3.4028235E+38"), big_int("1") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.4E-45"), big_int("1") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-1") * p_float(0.0))
    assertEquals(big_decimal("-1.0"), big_int("-1") * p_float(1.0))
    assertEquals(big_decimal("1.0"), big_int("-1") * p_float(-1.0))
    assertEquals(big_decimal("-23.0"), big_int("-1") * p_float(23.0))
    assertEquals(big_decimal("-23.123"), big_int("-1") * p_float(23.123))
    assertEquals(big_decimal("32.0"), big_int("-1") * p_float(-32.0))
    assertEquals(big_decimal("32.456"), big_int("-1") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.NaN_))
    assertEquals(big_decimal("-3.4028235E+38"), big_int("-1") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.4E-45"), big_int("-1") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("23") * p_float(0.0))
    assertEquals(big_decimal("23.0"), big_int("23") * p_float(1.0))
    assertEquals(big_decimal("-23.0"), big_int("23") * p_float(-1.0))
    assertEquals(big_decimal("529.0"), big_int("23") * p_float(23.0))
    assertEquals(big_decimal("531.829"), big_int("23") * p_float(23.123))
    assertEquals(big_decimal("-736.0"), big_int("23") * p_float(-32.0))
    assertEquals(big_decimal("-746.488"), big_int("23") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.NaN_))
    assertEquals(big_decimal("7.82649405E+39"), big_int("23") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("3.22E-44"), big_int("23") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-32") * p_float(0.0))
    assertEquals(big_decimal("-32.0"), big_int("-32") * p_float(1.0))
    assertEquals(big_decimal("32.0"), big_int("-32") * p_float(-1.0))
    assertEquals(big_decimal("-736.0"), big_int("-32") * p_float(23.0))
    assertEquals(big_decimal("-739.936"), big_int("-32") * p_float(23.123))
    assertEquals(big_decimal("1024.0"), big_int("-32") * p_float(-32.0))
    assertEquals(big_decimal("1038.592"), big_int("-32") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.NaN_))
    assertEquals(big_decimal("-1.088903520E+40"), big_int("-32") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-4.48E-44"), big_int("-32") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("123456789012345678901234567890") * p_float(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * p_float(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * p_float(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061470.0"), big_int("123456789012345678901234567890") * p_float(23.0))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), big_int("123456789012345678901234567890") * p_float(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172480.0"), big_int("123456789012345678901234567890") * p_float(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), big_int("123456789012345678901234567890") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.NaN_))
    assertEquals(big_decimal("4.201016628857516662885751666284374150E+67"), big_int("123456789012345678901234567890") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.728395046172839504617283950460E-16"), big_int("123456789012345678901234567890") * p_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-123456789012345678901234567890") * p_float(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * p_float(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * p_float(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061470.0"), big_int("-123456789012345678901234567890") * p_float(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), big_int("-123456789012345678901234567890") * p_float(23.123))
    assertEquals(big_decimal("3950617248395061724839506172480.0"), big_int("-123456789012345678901234567890") * p_float(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), big_int("-123456789012345678901234567890") * p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.NaN_))
    assertEquals(big_decimal("-4.201016628857516662885751666284374150E+67"), big_int("-123456789012345678901234567890") * p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.728395046172839504617283950460E-16"), big_int("-123456789012345678901234567890") * p_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") * p_float(0.0)))
  }

  function testBigIntegerFloatMultiplication() {
    assertEquals(big_decimal("0.0"), big_int("0") * b_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("0") * b_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * b_float(-1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * b_float(23.0))
    assertEquals(big_decimal("0.000"), big_int("0") * b_float(23.123))
    assertEquals(big_decimal("0.0"), big_int("0") * b_float(-32.0))
    assertEquals(big_decimal("0.000"), big_int("0") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.NaN_))
    assertEquals(big_decimal("0E+31"), big_int("0") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E-46"), big_int("0") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("1") * b_float(0.0))
    assertEquals(big_decimal("1.0"), big_int("1") * b_float(1.0))
    assertEquals(big_decimal("-1.0"), big_int("1") * b_float(-1.0))
    assertEquals(big_decimal("23.0"), big_int("1") * b_float(23.0))
    assertEquals(big_decimal("23.123"), big_int("1") * b_float(23.123))
    assertEquals(big_decimal("-32.0"), big_int("1") * b_float(-32.0))
    assertEquals(big_decimal("-32.456"), big_int("1") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.NaN_))
    assertEquals(big_decimal("3.4028235E+38"), big_int("1") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.4E-45"), big_int("1") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-1") * b_float(0.0))
    assertEquals(big_decimal("-1.0"), big_int("-1") * b_float(1.0))
    assertEquals(big_decimal("1.0"), big_int("-1") * b_float(-1.0))
    assertEquals(big_decimal("-23.0"), big_int("-1") * b_float(23.0))
    assertEquals(big_decimal("-23.123"), big_int("-1") * b_float(23.123))
    assertEquals(big_decimal("32.0"), big_int("-1") * b_float(-32.0))
    assertEquals(big_decimal("32.456"), big_int("-1") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.NaN_))
    assertEquals(big_decimal("-3.4028235E+38"), big_int("-1") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.4E-45"), big_int("-1") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("23") * b_float(0.0))
    assertEquals(big_decimal("23.0"), big_int("23") * b_float(1.0))
    assertEquals(big_decimal("-23.0"), big_int("23") * b_float(-1.0))
    assertEquals(big_decimal("529.0"), big_int("23") * b_float(23.0))
    assertEquals(big_decimal("531.829"), big_int("23") * b_float(23.123))
    assertEquals(big_decimal("-736.0"), big_int("23") * b_float(-32.0))
    assertEquals(big_decimal("-746.488"), big_int("23") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.NaN_))
    assertEquals(big_decimal("7.82649405E+39"), big_int("23") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("3.22E-44"), big_int("23") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-32") * b_float(0.0))
    assertEquals(big_decimal("-32.0"), big_int("-32") * b_float(1.0))
    assertEquals(big_decimal("32.0"), big_int("-32") * b_float(-1.0))
    assertEquals(big_decimal("-736.0"), big_int("-32") * b_float(23.0))
    assertEquals(big_decimal("-739.936"), big_int("-32") * b_float(23.123))
    assertEquals(big_decimal("1024.0"), big_int("-32") * b_float(-32.0))
    assertEquals(big_decimal("1038.592"), big_int("-32") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.NaN_))
    assertEquals(big_decimal("-1.088903520E+40"), big_int("-32") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-4.48E-44"), big_int("-32") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("123456789012345678901234567890") * b_float(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * b_float(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * b_float(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061470.0"), big_int("123456789012345678901234567890") * b_float(23.0))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), big_int("123456789012345678901234567890") * b_float(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172480.0"), big_int("123456789012345678901234567890") * b_float(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), big_int("123456789012345678901234567890") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.NaN_))
    assertEquals(big_decimal("4.201016628857516662885751666284374150E+67"), big_int("123456789012345678901234567890") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.728395046172839504617283950460E-16"), big_int("123456789012345678901234567890") * b_float(Float.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-123456789012345678901234567890") * b_float(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * b_float(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * b_float(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061470.0"), big_int("-123456789012345678901234567890") * b_float(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), big_int("-123456789012345678901234567890") * b_float(23.123))
    assertEquals(big_decimal("3950617248395061724839506172480.0"), big_int("-123456789012345678901234567890") * b_float(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), big_int("-123456789012345678901234567890") * b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.NaN_))
    assertEquals(big_decimal("-4.201016628857516662885751666284374150E+67"), big_int("-123456789012345678901234567890") * b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-1.728395046172839504617283950460E-16"), big_int("-123456789012345678901234567890") * b_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") * b_float(0.0)))
  }

  function testBigIntegerPDoubleMultiplication() {
    assertEquals(big_decimal("0.0"), big_int("0") * p_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("0") * p_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * p_double(-1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * p_double(23.0))
    assertEquals(big_decimal("0.000"), big_int("0") * p_double(23.123))
    assertEquals(big_decimal("0.0"), big_int("0") * p_double(-32.0))
    assertEquals(big_decimal("0.000"), big_int("0") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.NaN_))
    assertEquals(big_decimal("0E+292"), big_int("0") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E-325"), big_int("0") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("1") * p_double(0.0))
    assertEquals(big_decimal("1.0"), big_int("1") * p_double(1.0))
    assertEquals(big_decimal("-1.0"), big_int("1") * p_double(-1.0))
    assertEquals(big_decimal("23.0"), big_int("1") * p_double(23.0))
    assertEquals(big_decimal("23.123"), big_int("1") * p_double(23.123))
    assertEquals(big_decimal("-32.0"), big_int("1") * p_double(-32.0))
    assertEquals(big_decimal("-32.456"), big_int("1") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.NaN_))
    assertEquals(big_decimal("1.7976931348623157E+308"), big_int("1") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.9E-324"), big_int("1") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-1") * p_double(0.0))
    assertEquals(big_decimal("-1.0"), big_int("-1") * p_double(1.0))
    assertEquals(big_decimal("1.0"), big_int("-1") * p_double(-1.0))
    assertEquals(big_decimal("-23.0"), big_int("-1") * p_double(23.0))
    assertEquals(big_decimal("-23.123"), big_int("-1") * p_double(23.123))
    assertEquals(big_decimal("32.0"), big_int("-1") * p_double(-32.0))
    assertEquals(big_decimal("32.456"), big_int("-1") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.NaN_))
    assertEquals(big_decimal("-1.7976931348623157E+308"), big_int("-1") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-4.9E-324"), big_int("-1") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("23") * p_double(0.0))
    assertEquals(big_decimal("23.0"), big_int("23") * p_double(1.0))
    assertEquals(big_decimal("-23.0"), big_int("23") * p_double(-1.0))
    assertEquals(big_decimal("529.0"), big_int("23") * p_double(23.0))
    assertEquals(big_decimal("531.829"), big_int("23") * p_double(23.123))
    assertEquals(big_decimal("-736.0"), big_int("23") * p_double(-32.0))
    assertEquals(big_decimal("-746.488"), big_int("23") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.NaN_))
    assertEquals(big_decimal("4.13469421018332611E+309"), big_int("23") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("1.127E-322"), big_int("23") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-32") * p_double(0.0))
    assertEquals(big_decimal("-32.0"), big_int("-32") * p_double(1.0))
    assertEquals(big_decimal("32.0"), big_int("-32") * p_double(-1.0))
    assertEquals(big_decimal("-736.0"), big_int("-32") * p_double(23.0))
    assertEquals(big_decimal("-739.936"), big_int("-32") * p_double(23.123))
    assertEquals(big_decimal("1024.0"), big_int("-32") * p_double(-32.0))
    assertEquals(big_decimal("1038.592"), big_int("-32") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.NaN_))
    assertEquals(big_decimal("-5.75261803155941024E+309"), big_int("-32") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-1.568E-322"), big_int("-32") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("123456789012345678901234567890") * p_double(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * p_double(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * p_double(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061470.0"), big_int("123456789012345678901234567890") * p_double(23.0))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), big_int("123456789012345678901234567890") * p_double(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172480.0"), big_int("123456789012345678901234567890") * p_double(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), big_int("123456789012345678901234567890") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.NaN_))
    assertEquals(big_decimal("2.219374220596391956322512195630031845342628730E+337"), big_int("123456789012345678901234567890") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("6.049382661604938266160493826610E-295"), big_int("123456789012345678901234567890") * p_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-123456789012345678901234567890") * p_double(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * p_double(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * p_double(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061470.0"), big_int("-123456789012345678901234567890") * p_double(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), big_int("-123456789012345678901234567890") * p_double(23.123))
    assertEquals(big_decimal("3950617248395061724839506172480.0"), big_int("-123456789012345678901234567890") * p_double(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), big_int("-123456789012345678901234567890") * p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.NaN_))
    assertEquals(big_decimal("-2.219374220596391956322512195630031845342628730E+337"), big_int("-123456789012345678901234567890") * p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.049382661604938266160493826610E-295"), big_int("-123456789012345678901234567890") * p_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") * p_double(0.0)))
  }

  function testBigIntegerDoubleMultiplication() {
    assertEquals(big_decimal("0.0"), big_int("0") * b_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("0") * b_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * b_double(-1.0))
    assertEquals(big_decimal("0.0"), big_int("0") * b_double(23.0))
    assertEquals(big_decimal("0.000"), big_int("0") * b_double(23.123))
    assertEquals(big_decimal("0.0"), big_int("0") * b_double(-32.0))
    assertEquals(big_decimal("0.000"), big_int("0") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.NaN_))
    assertEquals(big_decimal("0E+292"), big_int("0") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E-325"), big_int("0") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("1") * b_double(0.0))
    assertEquals(big_decimal("1.0"), big_int("1") * b_double(1.0))
    assertEquals(big_decimal("-1.0"), big_int("1") * b_double(-1.0))
    assertEquals(big_decimal("23.0"), big_int("1") * b_double(23.0))
    assertEquals(big_decimal("23.123"), big_int("1") * b_double(23.123))
    assertEquals(big_decimal("-32.0"), big_int("1") * b_double(-32.0))
    assertEquals(big_decimal("-32.456"), big_int("1") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.NaN_))
    assertEquals(big_decimal("1.7976931348623157E+308"), big_int("1") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.9E-324"), big_int("1") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-1") * b_double(0.0))
    assertEquals(big_decimal("-1.0"), big_int("-1") * b_double(1.0))
    assertEquals(big_decimal("1.0"), big_int("-1") * b_double(-1.0))
    assertEquals(big_decimal("-23.0"), big_int("-1") * b_double(23.0))
    assertEquals(big_decimal("-23.123"), big_int("-1") * b_double(23.123))
    assertEquals(big_decimal("32.0"), big_int("-1") * b_double(-32.0))
    assertEquals(big_decimal("32.456"), big_int("-1") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.NaN_))
    assertEquals(big_decimal("-1.7976931348623157E+308"), big_int("-1") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-4.9E-324"), big_int("-1") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("23") * b_double(0.0))
    assertEquals(big_decimal("23.0"), big_int("23") * b_double(1.0))
    assertEquals(big_decimal("-23.0"), big_int("23") * b_double(-1.0))
    assertEquals(big_decimal("529.0"), big_int("23") * b_double(23.0))
    assertEquals(big_decimal("531.829"), big_int("23") * b_double(23.123))
    assertEquals(big_decimal("-736.0"), big_int("23") * b_double(-32.0))
    assertEquals(big_decimal("-746.488"), big_int("23") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.NaN_))
    assertEquals(big_decimal("4.13469421018332611E+309"), big_int("23") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("1.127E-322"), big_int("23") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-32") * b_double(0.0))
    assertEquals(big_decimal("-32.0"), big_int("-32") * b_double(1.0))
    assertEquals(big_decimal("32.0"), big_int("-32") * b_double(-1.0))
    assertEquals(big_decimal("-736.0"), big_int("-32") * b_double(23.0))
    assertEquals(big_decimal("-739.936"), big_int("-32") * b_double(23.123))
    assertEquals(big_decimal("1024.0"), big_int("-32") * b_double(-32.0))
    assertEquals(big_decimal("1038.592"), big_int("-32") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.NaN_))
    assertEquals(big_decimal("-5.75261803155941024E+309"), big_int("-32") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-1.568E-322"), big_int("-32") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("123456789012345678901234567890") * b_double(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * b_double(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("123456789012345678901234567890") * b_double(-1.0))
    assertEquals(big_decimal("2839506147283950614728395061470.0"), big_int("123456789012345678901234567890") * b_double(23.0))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), big_int("123456789012345678901234567890") * b_double(23.123))
    assertEquals(big_decimal("-3950617248395061724839506172480.0"), big_int("123456789012345678901234567890") * b_double(-32.0))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), big_int("123456789012345678901234567890") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.NaN_))
    assertEquals(big_decimal("2.219374220596391956322512195630031845342628730E+337"), big_int("123456789012345678901234567890") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("6.049382661604938266160493826610E-295"), big_int("123456789012345678901234567890") * b_double(Double.MIN_VALUE))

    assertEquals(big_decimal("0.0"), big_int("-123456789012345678901234567890") * b_double(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * b_double(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.0"), big_int("-123456789012345678901234567890") * b_double(-1.0))
    assertEquals(big_decimal("-2839506147283950614728395061470.0"), big_int("-123456789012345678901234567890") * b_double(23.0))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), big_int("-123456789012345678901234567890") * b_double(23.123))
    assertEquals(big_decimal("3950617248395061724839506172480.0"), big_int("-123456789012345678901234567890") * b_double(-32.0))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), big_int("-123456789012345678901234567890") * b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.NaN_))
    assertEquals(big_decimal("-2.219374220596391956322512195630031845342628730E+337"), big_int("-123456789012345678901234567890") * b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.049382661604938266160493826610E-295"), big_int("-123456789012345678901234567890") * b_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") * b_double(0.0)))
  }

  function testBigIntegerBigIntegerMultiplication() {
    assertEquals(big_int("0"), big_int("0") * big_int("0"))
    assertEquals(big_int("0"), big_int("0") * big_int("1"))
    assertEquals(big_int("0"), big_int("0") * big_int("-1"))
    assertEquals(big_int("0"), big_int("0") * big_int("23"))
    assertEquals(big_int("0"), big_int("0") * big_int("-32"))
    assertEquals(big_int("0"), big_int("0") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), big_int("0") * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), big_int("1") * big_int("0"))
    assertEquals(big_int("1"), big_int("1") * big_int("1"))
    assertEquals(big_int("-1"), big_int("1") * big_int("-1"))
    assertEquals(big_int("23"), big_int("1") * big_int("23"))
    assertEquals(big_int("-32"), big_int("1") * big_int("-32"))
    assertEquals(big_int("123456789012345678901234567890"), big_int("1") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("1") * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), big_int("-1") * big_int("0"))
    assertEquals(big_int("-1"), big_int("-1") * big_int("1"))
    assertEquals(big_int("1"), big_int("-1") * big_int("-1"))
    assertEquals(big_int("-23"), big_int("-1") * big_int("23"))
    assertEquals(big_int("32"), big_int("-1") * big_int("-32"))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-1") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-1") * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), big_int("23") * big_int("0"))
    assertEquals(big_int("23"), big_int("23") * big_int("1"))
    assertEquals(big_int("-23"), big_int("23") * big_int("-1"))
    assertEquals(big_int("529"), big_int("23") * big_int("23"))
    assertEquals(big_int("-736"), big_int("23") * big_int("-32"))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("23") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("23") * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), big_int("-32") * big_int("0"))
    assertEquals(big_int("-32"), big_int("-32") * big_int("1"))
    assertEquals(big_int("32"), big_int("-32") * big_int("-1"))
    assertEquals(big_int("-736"), big_int("-32") * big_int("23"))
    assertEquals(big_int("1024"), big_int("-32") * big_int("-32"))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("-32") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-32") * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), big_int("123456789012345678901234567890") * big_int("0"))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") * big_int("1"))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * big_int("-1"))
    assertEquals(big_int("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * big_int("23"))
    assertEquals(big_int("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * big_int("-32"))
    assertEquals(big_int("15241578753238836750495351562536198787501905199875019052100"), big_int("123456789012345678901234567890") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-15241578753238836750495351562536198787501905199875019052100"), big_int("123456789012345678901234567890") * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") * big_int("0"))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * big_int("1"))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * big_int("-1"))
    assertEquals(big_int("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * big_int("23"))
    assertEquals(big_int("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * big_int("-32"))
    assertEquals(big_int("-15241578753238836750495351562536198787501905199875019052100"), big_int("-123456789012345678901234567890") * big_int("123456789012345678901234567890"))
    assertEquals(big_int("15241578753238836750495351562536198787501905199875019052100"), big_int("-123456789012345678901234567890") * big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(big_int("0") * big_int("0")))
  }

  function testBigIntegerBigDecimalMultiplication() {
    assertEquals(big_decimal("0"), big_int("0") * big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("0") * big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("0") * big_decimal("-1"))
    assertEquals(big_decimal("0"), big_int("0") * big_decimal("23"))
    assertEquals(big_decimal("0.000"), big_int("0") * big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_int("0") * big_decimal("-32"))
    assertEquals(big_decimal("0.000"), big_int("0") * big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), big_int("0") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), big_int("0") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_int("1") * big_decimal("0"))
    assertEquals(big_decimal("1"), big_int("1") * big_decimal("1"))
    assertEquals(big_decimal("-1"), big_int("1") * big_decimal("-1"))
    assertEquals(big_decimal("23"), big_int("1") * big_decimal("23"))
    assertEquals(big_decimal("23.123"), big_int("1") * big_decimal("23.123"))
    assertEquals(big_decimal("-32"), big_int("1") * big_decimal("-32"))
    assertEquals(big_decimal("-32.456"), big_int("1") * big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_int("1") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_int("1") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_int("-1") * big_decimal("0"))
    assertEquals(big_decimal("-1"), big_int("-1") * big_decimal("1"))
    assertEquals(big_decimal("1"), big_int("-1") * big_decimal("-1"))
    assertEquals(big_decimal("-23"), big_int("-1") * big_decimal("23"))
    assertEquals(big_decimal("-23.123"), big_int("-1") * big_decimal("23.123"))
    assertEquals(big_decimal("32"), big_int("-1") * big_decimal("-32"))
    assertEquals(big_decimal("32.456"), big_int("-1") * big_decimal("-32.456"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), big_int("-1") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_int("-1") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_int("23") * big_decimal("0"))
    assertEquals(big_decimal("23"), big_int("23") * big_decimal("1"))
    assertEquals(big_decimal("-23"), big_int("23") * big_decimal("-1"))
    assertEquals(big_decimal("529"), big_int("23") * big_decimal("23"))
    assertEquals(big_decimal("531.829"), big_int("23") * big_decimal("23.123"))
    assertEquals(big_decimal("-736"), big_int("23") * big_decimal("-32"))
    assertEquals(big_decimal("-746.488"), big_int("23") * big_decimal("-32.456"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), big_int("23") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), big_int("23") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_int("-32") * big_decimal("0"))
    assertEquals(big_decimal("-32"), big_int("-32") * big_decimal("1"))
    assertEquals(big_decimal("32"), big_int("-32") * big_decimal("-1"))
    assertEquals(big_decimal("-736"), big_int("-32") * big_decimal("23"))
    assertEquals(big_decimal("-739.936"), big_int("-32") * big_decimal("23.123"))
    assertEquals(big_decimal("1024"), big_int("-32") * big_decimal("-32"))
    assertEquals(big_decimal("1038.592"), big_int("-32") * big_decimal("-32.456"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), big_int("-32") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), big_int("-32") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") * big_decimal("0"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") * big_decimal("1"))
    assertEquals(big_decimal("-123456789012345678901234567890"), big_int("123456789012345678901234567890") * big_decimal("-1"))
    assertEquals(big_decimal("2839506147283950614728395061470"), big_int("123456789012345678901234567890") * big_decimal("23"))
    assertEquals(big_decimal("2854691332332469133233246913320.470"), big_int("123456789012345678901234567890") * big_decimal("23.123"))
    assertEquals(big_decimal("-3950617248395061724839506172480"), big_int("123456789012345678901234567890") * big_decimal("-32"))
    assertEquals(big_decimal("-4006913544184691354418469135437.840"), big_int("123456789012345678901234567890") * big_decimal("-32.456"))
    assertEquals(big_decimal("15241578753238836750495351562551440366253619878750190519987.501905210"), big_int("123456789012345678901234567890") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-15241578753238836750495351562551440366253619878750190519987.501905210"), big_int("123456789012345678901234567890") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") * big_decimal("0"))
    assertEquals(big_decimal("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") * big_decimal("1"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") * big_decimal("-1"))
    assertEquals(big_decimal("-2839506147283950614728395061470"), big_int("-123456789012345678901234567890") * big_decimal("23"))
    assertEquals(big_decimal("-2854691332332469133233246913320.470"), big_int("-123456789012345678901234567890") * big_decimal("23.123"))
    assertEquals(big_decimal("3950617248395061724839506172480"), big_int("-123456789012345678901234567890") * big_decimal("-32"))
    assertEquals(big_decimal("4006913544184691354418469135437.840"), big_int("-123456789012345678901234567890") * big_decimal("-32.456"))
    assertEquals(big_decimal("-15241578753238836750495351562551440366253619878750190519987.501905210"), big_int("-123456789012345678901234567890") * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("15241578753238836750495351562551440366253619878750190519987.501905210"), big_int("-123456789012345678901234567890") * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(big_int("0") * big_decimal("0")))
  }

}

