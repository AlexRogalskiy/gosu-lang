package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_PDoubleTest extends ArithmeticTestBase {

  function testPDoublePByteDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_byte(0))
    assertEquals(p_double(0.0), p_double(0.0) / p_byte(1))
    assertEquals(p_double(-0.0), p_double(0.0) / p_byte(-1))
    assertEquals(p_double(0.0), p_double(0.0) / p_byte(23))
    assertEquals(p_double(-0.0), p_double(0.0) / p_byte(-32))
    assertEquals(p_double(0.0), p_double(0.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(0.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_byte(0))
    assertEquals(p_double(1.0), p_double(1.0) / p_byte(1))
    assertEquals(p_double(-1.0), p_double(1.0) / p_byte(-1))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_byte(23))
    assertEquals(p_double(-0.03125), p_double(1.0) / p_byte(-32))
    assertEquals(p_double(0.007874015748031496), p_double(1.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-0.0078125), p_double(1.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_byte(0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_byte(1))
    assertEquals(p_double(1.0), p_double(-1.0) / p_byte(-1))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_byte(23))
    assertEquals(p_double(0.03125), p_double(-1.0) / p_byte(-32))
    assertEquals(p_double(-0.007874015748031496), p_double(-1.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(0.0078125), p_double(-1.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_byte(0))
    assertEquals(p_double(23.0), p_double(23.0) / p_byte(1))
    assertEquals(p_double(-23.0), p_double(23.0) / p_byte(-1))
    assertEquals(p_double(1.0), p_double(23.0) / p_byte(23))
    assertEquals(p_double(-0.71875), p_double(23.0) / p_byte(-32))
    assertEquals(p_double(0.18110236220472442), p_double(23.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-0.1796875), p_double(23.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_byte(0))
    assertEquals(p_double(23.123), p_double(23.123) / p_byte(1))
    assertEquals(p_double(-23.123), p_double(23.123) / p_byte(-1))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_byte(23))
    assertEquals(p_double(-0.72259375), p_double(23.123) / p_byte(-32))
    assertEquals(p_double(0.1820708661417323), p_double(23.123) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-0.1806484375), p_double(23.123) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_byte(0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_byte(1))
    assertEquals(p_double(32.0), p_double(-32.0) / p_byte(-1))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_byte(23))
    assertEquals(p_double(1.0), p_double(-32.0) / p_byte(-32))
    assertEquals(p_double(-0.25196850393700787), p_double(-32.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(0.25), p_double(-32.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_byte(0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_byte(1))
    assertEquals(p_double(32.456), p_double(-32.456) / p_byte(-1))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_byte(23))
    assertEquals(p_double(1.01425), p_double(-32.456) / p_byte(-32))
    assertEquals(p_double(-0.2555590551181103), p_double(-32.456) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(0.2535625), p_double(-32.456) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(-1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(23))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(-32))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(-1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(23))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(-32))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_byte(0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_byte(1))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_byte(-1))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_byte(23))
    assertEquals(p_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / p_byte(-32))
    assertEquals(p_double(Double.parseDouble("1.4155064054033983E306")), p_double(Double.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.4044477616111841E306")), p_double(Double.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_byte(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_byte(1))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_byte(-1))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_byte(23))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_byte(-32))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_byte(0)))
  }

  function testPDoubleByteDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_byte(0))
    assertEquals(p_double(0.0), p_double(0.0) / p_byte(1))
    assertEquals(p_double(-0.0), p_double(0.0) / p_byte(-1))
    assertEquals(b_double(0.0), p_double(0.0) / b_byte(23))
    assertEquals(b_double(-0.0), p_double(0.0) / b_byte(-32))
    assertEquals(b_double(0.0), p_double(0.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(0.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_byte(0))
    assertEquals(p_double(1.0), p_double(1.0) / p_byte(1))
    assertEquals(p_double(-1.0), p_double(1.0) / p_byte(-1))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_byte(23))
    assertEquals(b_double(-0.03125), p_double(1.0) / b_byte(-32))
    assertEquals(b_double(0.007874015748031496), p_double(1.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-0.0078125), p_double(1.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_byte(0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_byte(1))
    assertEquals(p_double(1.0), p_double(-1.0) / p_byte(-1))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_byte(23))
    assertEquals(b_double(0.03125), p_double(-1.0) / b_byte(-32))
    assertEquals(b_double(-0.007874015748031496), p_double(-1.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(0.0078125), p_double(-1.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_byte(0))
    assertEquals(p_double(23.0), p_double(23.0) / p_byte(1))
    assertEquals(p_double(-23.0), p_double(23.0) / p_byte(-1))
    assertEquals(b_double(1.0), p_double(23.0) / b_byte(23))
    assertEquals(b_double(-0.71875), p_double(23.0) / b_byte(-32))
    assertEquals(b_double(0.18110236220472442), p_double(23.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-0.1796875), p_double(23.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_byte(0))
    assertEquals(p_double(23.123), p_double(23.123) / p_byte(1))
    assertEquals(p_double(-23.123), p_double(23.123) / p_byte(-1))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_byte(23))
    assertEquals(b_double(-0.72259375), p_double(23.123) / b_byte(-32))
    assertEquals(b_double(0.1820708661417323), p_double(23.123) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-0.1806484375), p_double(23.123) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_byte(0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_byte(1))
    assertEquals(p_double(32.0), p_double(-32.0) / p_byte(-1))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_byte(23))
    assertEquals(b_double(1.0), p_double(-32.0) / b_byte(-32))
    assertEquals(b_double(-0.25196850393700787), p_double(-32.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(0.25), p_double(-32.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_byte(0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_byte(1))
    assertEquals(p_double(32.456), p_double(-32.456) / p_byte(-1))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_byte(23))
    assertEquals(b_double(1.01425), p_double(-32.456) / b_byte(-32))
    assertEquals(b_double(-0.2555590551181103), p_double(-32.456) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(0.2535625), p_double(-32.456) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_byte(0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_byte(-1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_byte(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_byte(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_byte(0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_byte(-1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_byte(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_byte(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_byte(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_byte(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_byte(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_byte(0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_byte(1))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_byte(-1))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_byte(23))
    assertEquals(b_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / b_byte(-32))
    assertEquals(b_double(Double.parseDouble("1.4155064054033983E306")), p_double(Double.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.4044477616111841E306")), p_double(Double.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_byte(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_byte(1))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_byte(-1))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_byte(23))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_byte(-32))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_byte(0)))
  }

  function testPDoublePShortDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_short(0))
    assertEquals(p_double(0.0), p_double(0.0) / p_short(1))
    assertEquals(p_double(-0.0), p_double(0.0) / p_short(-1))
    assertEquals(p_double(0.0), p_double(0.0) / p_short(23))
    assertEquals(p_double(-0.0), p_double(0.0) / p_short(-32))
    assertEquals(p_double(0.0), p_double(0.0) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(0.0) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_short(0))
    assertEquals(p_double(1.0), p_double(1.0) / p_short(1))
    assertEquals(p_double(-1.0), p_double(1.0) / p_short(-1))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_short(23))
    assertEquals(p_double(-0.03125), p_double(1.0) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("3.051850947599719E-5")), p_double(1.0) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-3.0517578125E-5")), p_double(1.0) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_short(0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_short(1))
    assertEquals(p_double(1.0), p_double(-1.0) / p_short(-1))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_short(23))
    assertEquals(p_double(0.03125), p_double(-1.0) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("-3.051850947599719E-5")), p_double(-1.0) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("3.0517578125E-5")), p_double(-1.0) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_short(0))
    assertEquals(p_double(23.0), p_double(23.0) / p_short(1))
    assertEquals(p_double(-23.0), p_double(23.0) / p_short(-1))
    assertEquals(p_double(1.0), p_double(23.0) / p_short(23))
    assertEquals(p_double(-0.71875), p_double(23.0) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("7.019257179479354E-4")), p_double(23.0) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-7.01904296875E-4")), p_double(23.0) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_short(0))
    assertEquals(p_double(23.123), p_double(23.123) / p_short(1))
    assertEquals(p_double(-23.123), p_double(23.123) / p_short(-1))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_short(23))
    assertEquals(p_double(-0.72259375), p_double(23.123) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("7.056794946134832E-4")), p_double(23.123) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-7.05657958984375E-4")), p_double(23.123) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_short(0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_short(1))
    assertEquals(p_double(32.0), p_double(-32.0) / p_short(-1))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_short(23))
    assertEquals(p_double(1.0), p_double(-32.0) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("-9.765923032319102E-4")), p_double(-32.0) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("9.765625E-4")), p_double(-32.0) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_short(0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_short(1))
    assertEquals(p_double(32.456), p_double(-32.456) / p_short(-1))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_short(23))
    assertEquals(p_double(1.01425), p_double(-32.456) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("-9.90508743552965E-4")), p_double(-32.456) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("9.90478515625E-4")), p_double(-32.456) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(-1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(23))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(-32))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(-1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(23))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(-32))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_short(0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_short(1))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_short(-1))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_short(23))
    assertEquals(p_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / p_short(-32))
    assertEquals(p_double(Double.parseDouble("5.486291497123069E303")), p_double(Double.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-5.486124068793688E303")), p_double(Double.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_short(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_short(1))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_short(-1))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_short(23))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_short(-32))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_short(0)))
  }

  function testPDoubleShortDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_short(0))
    assertEquals(b_double(0.0), p_double(0.0) / b_short(1))
    assertEquals(b_double(-0.0), p_double(0.0) / b_short(-1))
    assertEquals(b_double(0.0), p_double(0.0) / b_short(23))
    assertEquals(b_double(-0.0), p_double(0.0) / b_short(-32))
    assertEquals(b_double(0.0), p_double(0.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(0.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_short(0))
    assertEquals(b_double(1.0), p_double(1.0) / b_short(1))
    assertEquals(b_double(-1.0), p_double(1.0) / b_short(-1))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_short(23))
    assertEquals(b_double(-0.03125), p_double(1.0) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("3.051850947599719E-5")), p_double(1.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-3.0517578125E-5")), p_double(1.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_short(0))
    assertEquals(b_double(-1.0), p_double(-1.0) / b_short(1))
    assertEquals(b_double(1.0), p_double(-1.0) / b_short(-1))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_short(23))
    assertEquals(b_double(0.03125), p_double(-1.0) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("-3.051850947599719E-5")), p_double(-1.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("3.0517578125E-5")), p_double(-1.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_short(0))
    assertEquals(b_double(23.0), p_double(23.0) / b_short(1))
    assertEquals(b_double(-23.0), p_double(23.0) / b_short(-1))
    assertEquals(b_double(1.0), p_double(23.0) / b_short(23))
    assertEquals(b_double(-0.71875), p_double(23.0) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("7.019257179479354E-4")), p_double(23.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-7.01904296875E-4")), p_double(23.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_short(0))
    assertEquals(b_double(23.123), p_double(23.123) / b_short(1))
    assertEquals(b_double(-23.123), p_double(23.123) / b_short(-1))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_short(23))
    assertEquals(b_double(-0.72259375), p_double(23.123) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("7.056794946134832E-4")), p_double(23.123) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-7.05657958984375E-4")), p_double(23.123) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_short(0))
    assertEquals(b_double(-32.0), p_double(-32.0) / b_short(1))
    assertEquals(b_double(32.0), p_double(-32.0) / b_short(-1))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_short(23))
    assertEquals(b_double(1.0), p_double(-32.0) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("-9.765923032319102E-4")), p_double(-32.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("9.765625E-4")), p_double(-32.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_short(0))
    assertEquals(b_double(-32.456), p_double(-32.456) / b_short(1))
    assertEquals(b_double(32.456), p_double(-32.456) / b_short(-1))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_short(23))
    assertEquals(b_double(1.01425), p_double(-32.456) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("-9.90508743552965E-4")), p_double(-32.456) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("9.90478515625E-4")), p_double(-32.456) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(-1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(-1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_short(0))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / b_short(1))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / b_short(-1))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_short(23))
    assertEquals(b_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / b_short(-32))
    assertEquals(b_double(Double.parseDouble("5.486291497123069E303")), p_double(Double.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-5.486124068793688E303")), p_double(Double.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_short(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / b_short(1))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / b_short(-1))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_short(23))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_short(-32))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_short(0)))
  }

  function testPDoublePCharDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_char(0))
    assertEquals(p_double(0.0), p_double(0.0) / p_char(1))
    assertEquals(p_double(0.0), p_double(0.0) / p_char(23))
    assertEquals(p_double(0.0), p_double(0.0) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_char(0))
    assertEquals(p_double(1.0), p_double(1.0) / p_char(1))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_char(23))
    assertEquals(p_double(Double.parseDouble("1.5259021896696422E-5")), p_double(1.0) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_char(0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_char(1))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_char(23))
    assertEquals(p_double(Double.parseDouble("-1.5259021896696422E-5")), p_double(-1.0) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_char(0))
    assertEquals(p_double(23.0), p_double(23.0) / p_char(1))
    assertEquals(p_double(1.0), p_double(23.0) / p_char(23))
    assertEquals(p_double(Double.parseDouble("3.509575036240177E-4")), p_double(23.0) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_char(0))
    assertEquals(p_double(23.123), p_double(23.123) / p_char(1))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_char(23))
    assertEquals(p_double(Double.parseDouble("3.5283436331731135E-4")), p_double(23.123) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_char(0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_char(1))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_char(23))
    assertEquals(p_double(Double.parseDouble("-4.882887006942855E-4")), p_double(-32.0) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_char(0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_char(1))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_char(23))
    assertEquals(p_double(Double.parseDouble("-4.952468146791791E-4")), p_double(-32.456) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_char(0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_char(1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_char(23))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_char(0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_char(1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_char(23))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_char(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_char(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_char(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_char(0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_char(1))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_char(23))
    assertEquals(p_double(Double.parseDouble("2.743103890840491E303")), p_double(Double.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_char(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_char(1))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_char(23))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_char(0)))
  }

  function testPDoubleCharacterDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_char(0))
    assertEquals(b_double(0.0), p_double(0.0) / b_char(1))
    assertEquals(b_double(0.0), p_double(0.0) / b_char(23))
    assertEquals(b_double(0.0), p_double(0.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_char(0))
    assertEquals(b_double(1.0), p_double(1.0) / b_char(1))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_char(23))
    assertEquals(b_double(Double.parseDouble("1.5259021896696422E-5")), p_double(1.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_char(0))
    assertEquals(b_double(-1.0), p_double(-1.0) / b_char(1))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_char(23))
    assertEquals(b_double(Double.parseDouble("-1.5259021896696422E-5")), p_double(-1.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_char(0))
    assertEquals(b_double(23.0), p_double(23.0) / b_char(1))
    assertEquals(b_double(1.0), p_double(23.0) / b_char(23))
    assertEquals(b_double(Double.parseDouble("3.509575036240177E-4")), p_double(23.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_char(0))
    assertEquals(b_double(23.123), p_double(23.123) / b_char(1))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_char(23))
    assertEquals(b_double(Double.parseDouble("3.5283436331731135E-4")), p_double(23.123) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_char(0))
    assertEquals(b_double(-32.0), p_double(-32.0) / b_char(1))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_char(23))
    assertEquals(b_double(Double.parseDouble("-4.882887006942855E-4")), p_double(-32.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_char(0))
    assertEquals(b_double(-32.456), p_double(-32.456) / b_char(1))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_char(23))
    assertEquals(b_double(Double.parseDouble("-4.952468146791791E-4")), p_double(-32.456) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_char(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_char(1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_char(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_char(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_char(1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_char(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_char(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_char(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_char(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_char(0))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / b_char(1))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_char(23))
    assertEquals(b_double(Double.parseDouble("2.743103890840491E303")), p_double(Double.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_char(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / b_char(1))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_char(23))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_char(0)))
  }

  function testPDoublePIntDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_int(0))
    assertEquals(p_double(0.0), p_double(0.0) / p_int(1))
    assertEquals(p_double(-0.0), p_double(0.0) / p_int(-1))
    assertEquals(p_double(0.0), p_double(0.0) / p_int(23))
    assertEquals(p_double(-0.0), p_double(0.0) / p_int(-32))
    assertEquals(p_double(0.0), p_double(0.0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(0.0) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_int(0))
    assertEquals(p_double(1.0), p_double(1.0) / p_int(1))
    assertEquals(p_double(-1.0), p_double(1.0) / p_int(-1))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_int(23))
    assertEquals(p_double(-0.03125), p_double(1.0) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("4.656612875245797E-10")), p_double(1.0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-4.6566128730773926E-10")), p_double(1.0) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_int(0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_int(1))
    assertEquals(p_double(1.0), p_double(-1.0) / p_int(-1))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_int(23))
    assertEquals(p_double(0.03125), p_double(-1.0) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("-4.656612875245797E-10")), p_double(-1.0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("4.6566128730773926E-10")), p_double(-1.0) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_int(0))
    assertEquals(p_double(23.0), p_double(23.0) / p_int(1))
    assertEquals(p_double(-23.0), p_double(23.0) / p_int(-1))
    assertEquals(p_double(1.0), p_double(23.0) / p_int(23))
    assertEquals(p_double(-0.71875), p_double(23.0) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("1.0710209613065333E-8")), p_double(23.0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.0710209608078003E-8")), p_double(23.0) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_int(0))
    assertEquals(p_double(23.123), p_double(23.123) / p_int(1))
    assertEquals(p_double(-23.123), p_double(23.123) / p_int(-1))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_int(23))
    assertEquals(p_double(-0.72259375), p_double(23.123) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("1.0767485951430857E-8")), p_double(23.123) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.0767485946416855E-8")), p_double(23.123) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_int(0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_int(1))
    assertEquals(p_double(32.0), p_double(-32.0) / p_int(-1))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_int(23))
    assertEquals(p_double(1.0), p_double(-32.0) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("-1.490116120078655E-8")), p_double(-32.0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.4901161193847656E-8")), p_double(-32.0) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_int(0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_int(1))
    assertEquals(p_double(32.456), p_double(-32.456) / p_int(-1))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_int(23))
    assertEquals(p_double(1.01425), p_double(-32.456) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("-1.511350274789776E-8")), p_double(-32.456) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.5113502740859987E-8")), p_double(-32.456) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(-1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(23))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(-32))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(-1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(23))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(-32))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_int(0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_int(1))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_int(-1))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_int(23))
    assertEquals(p_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / p_int(-32))
    assertEquals(p_double(Double.parseDouble("8.371160997540839E298")), p_double(Double.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-8.3711609936427125E298")), p_double(Double.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_int(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_int(1))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_int(-1))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_int(23))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_int(-32))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_int(0)))
  }

  function testPDoubleIntegerDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_int(0))
    assertEquals(b_double(0.0), p_double(0.0) / b_int(1))
    assertEquals(b_double(-0.0), p_double(0.0) / b_int(-1))
    assertEquals(b_double(0.0), p_double(0.0) / b_int(23))
    assertEquals(b_double(-0.0), p_double(0.0) / b_int(-32))
    assertEquals(b_double(0.0), p_double(0.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(0.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_int(0))
    assertEquals(b_double(1.0), p_double(1.0) / b_int(1))
    assertEquals(b_double(-1.0), p_double(1.0) / b_int(-1))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_int(23))
    assertEquals(b_double(-0.03125), p_double(1.0) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("4.656612875245797E-10")), p_double(1.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.6566128730773926E-10")), p_double(1.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_int(0))
    assertEquals(b_double(-1.0), p_double(-1.0) / b_int(1))
    assertEquals(b_double(1.0), p_double(-1.0) / b_int(-1))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_int(23))
    assertEquals(b_double(0.03125), p_double(-1.0) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("-4.656612875245797E-10")), p_double(-1.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("4.6566128730773926E-10")), p_double(-1.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_int(0))
    assertEquals(b_double(23.0), p_double(23.0) / b_int(1))
    assertEquals(b_double(-23.0), p_double(23.0) / b_int(-1))
    assertEquals(b_double(1.0), p_double(23.0) / b_int(23))
    assertEquals(b_double(-0.71875), p_double(23.0) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("1.0710209613065333E-8")), p_double(23.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.0710209608078003E-8")), p_double(23.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_int(0))
    assertEquals(b_double(23.123), p_double(23.123) / b_int(1))
    assertEquals(b_double(-23.123), p_double(23.123) / b_int(-1))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_int(23))
    assertEquals(b_double(-0.72259375), p_double(23.123) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("1.0767485951430857E-8")), p_double(23.123) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.0767485946416855E-8")), p_double(23.123) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_int(0))
    assertEquals(b_double(-32.0), p_double(-32.0) / b_int(1))
    assertEquals(b_double(32.0), p_double(-32.0) / b_int(-1))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_int(23))
    assertEquals(b_double(1.0), p_double(-32.0) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("-1.490116120078655E-8")), p_double(-32.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.4901161193847656E-8")), p_double(-32.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_int(0))
    assertEquals(b_double(-32.456), p_double(-32.456) / b_int(1))
    assertEquals(b_double(32.456), p_double(-32.456) / b_int(-1))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_int(23))
    assertEquals(b_double(1.01425), p_double(-32.456) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("-1.511350274789776E-8")), p_double(-32.456) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.5113502740859987E-8")), p_double(-32.456) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(-1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(-1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_int(0))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / b_int(1))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / b_int(-1))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_int(23))
    assertEquals(b_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / b_int(-32))
    assertEquals(b_double(Double.parseDouble("8.371160997540839E298")), p_double(Double.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-8.3711609936427125E298")), p_double(Double.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_int(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / b_int(1))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / b_int(-1))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_int(23))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_int(-32))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_int(0)))
  }

  function testPDoublePLongDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_long(0))
    assertEquals(p_double(0.0), p_double(0.0) / p_long(1))
    assertEquals(p_double(-0.0), p_double(0.0) / p_long(-1))
    assertEquals(p_double(0.0), p_double(0.0) / p_long(23))
    assertEquals(p_double(-0.0), p_double(0.0) / p_long(-32))
    assertEquals(p_double(0.0), p_double(0.0) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(0.0) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_long(0))
    assertEquals(p_double(1.0), p_double(1.0) / p_long(1))
    assertEquals(p_double(-1.0), p_double(1.0) / p_long(-1))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_long(23))
    assertEquals(p_double(-0.03125), p_double(1.0) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("1.0842021724855044E-19")), p_double(1.0) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.0842021724855044E-19")), p_double(1.0) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_long(0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_long(1))
    assertEquals(p_double(1.0), p_double(-1.0) / p_long(-1))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_long(23))
    assertEquals(p_double(0.03125), p_double(-1.0) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("-1.0842021724855044E-19")), p_double(-1.0) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.0842021724855044E-19")), p_double(-1.0) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_long(0))
    assertEquals(p_double(23.0), p_double(23.0) / p_long(1))
    assertEquals(p_double(-23.0), p_double(23.0) / p_long(-1))
    assertEquals(p_double(1.0), p_double(23.0) / p_long(23))
    assertEquals(p_double(-0.71875), p_double(23.0) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("2.4936649967166602E-18")), p_double(23.0) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-2.4936649967166602E-18")), p_double(23.0) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_long(0))
    assertEquals(p_double(23.123), p_double(23.123) / p_long(1))
    assertEquals(p_double(-23.123), p_double(23.123) / p_long(-1))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_long(23))
    assertEquals(p_double(-0.72259375), p_double(23.123) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("2.507000683438232E-18")), p_double(23.123) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-2.507000683438232E-18")), p_double(23.123) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_long(0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_long(1))
    assertEquals(p_double(32.0), p_double(-32.0) / p_long(-1))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_long(23))
    assertEquals(p_double(1.0), p_double(-32.0) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("-3.469446951953614E-18")), p_double(-32.0) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("3.469446951953614E-18")), p_double(-32.0) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_long(0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_long(1))
    assertEquals(p_double(32.456), p_double(-32.456) / p_long(-1))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_long(23))
    assertEquals(p_double(1.01425), p_double(-32.456) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("-3.5188865710189535E-18")), p_double(-32.456) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("3.5188865710189535E-18")), p_double(-32.456) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(-1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(23))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(-32))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(1))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(-1))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(23))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(-32))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_long(0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_long(1))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_long(-1))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_long(23))
    assertEquals(p_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / p_long(-32))
    assertEquals(p_double(Double.parseDouble("1.9490628022799996E289")), p_double(Double.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.9490628022799996E289")), p_double(Double.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_long(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_long(1))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_long(-1))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_long(23))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_long(-32))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_long(0)))
  }

  function testPDoubleLongDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_long(0))
    assertEquals(b_double(0.0), p_double(0.0) / b_long(1))
    assertEquals(b_double(-0.0), p_double(0.0) / b_long(-1))
    assertEquals(b_double(0.0), p_double(0.0) / b_long(23))
    assertEquals(b_double(-0.0), p_double(0.0) / b_long(-32))
    assertEquals(b_double(0.0), p_double(0.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(0.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_long(0))
    assertEquals(b_double(1.0), p_double(1.0) / b_long(1))
    assertEquals(b_double(-1.0), p_double(1.0) / b_long(-1))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_long(23))
    assertEquals(b_double(-0.03125), p_double(1.0) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("1.0842021724855044E-19")), p_double(1.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.0842021724855044E-19")), p_double(1.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_long(0))
    assertEquals(b_double(-1.0), p_double(-1.0) / b_long(1))
    assertEquals(b_double(1.0), p_double(-1.0) / b_long(-1))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_long(23))
    assertEquals(b_double(0.03125), p_double(-1.0) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("-1.0842021724855044E-19")), p_double(-1.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.0842021724855044E-19")), p_double(-1.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_long(0))
    assertEquals(b_double(23.0), p_double(23.0) / b_long(1))
    assertEquals(b_double(-23.0), p_double(23.0) / b_long(-1))
    assertEquals(b_double(1.0), p_double(23.0) / b_long(23))
    assertEquals(b_double(-0.71875), p_double(23.0) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("2.4936649967166602E-18")), p_double(23.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.4936649967166602E-18")), p_double(23.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_long(0))
    assertEquals(b_double(23.123), p_double(23.123) / b_long(1))
    assertEquals(b_double(-23.123), p_double(23.123) / b_long(-1))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_long(23))
    assertEquals(b_double(-0.72259375), p_double(23.123) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("2.507000683438232E-18")), p_double(23.123) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.507000683438232E-18")), p_double(23.123) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_long(0))
    assertEquals(b_double(-32.0), p_double(-32.0) / b_long(1))
    assertEquals(b_double(32.0), p_double(-32.0) / b_long(-1))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_long(23))
    assertEquals(b_double(1.0), p_double(-32.0) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("-3.469446951953614E-18")), p_double(-32.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("3.469446951953614E-18")), p_double(-32.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_long(0))
    assertEquals(b_double(-32.456), p_double(-32.456) / b_long(1))
    assertEquals(b_double(32.456), p_double(-32.456) / b_long(-1))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_long(23))
    assertEquals(b_double(1.01425), p_double(-32.456) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("-3.5188865710189535E-18")), p_double(-32.456) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("3.5188865710189535E-18")), p_double(-32.456) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(-1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(1))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(-1))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_long(0))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / b_long(1))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / b_long(-1))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_long(23))
    assertEquals(b_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / b_long(-32))
    assertEquals(b_double(Double.parseDouble("1.9490628022799996E289")), p_double(Double.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.9490628022799996E289")), p_double(Double.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_long(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / b_long(1))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / b_long(-1))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_long(23))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_long(-32))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_long(0)))
  }

  function testPDoublePFloatDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_float(0.0))
    assertEquals(p_double(0.0), p_double(0.0) / p_float(1.0))
    assertEquals(p_double(-0.0), p_double(0.0) / p_float(-1.0))
    assertEquals(p_double(0.0), p_double(0.0) / p_float(23.0))
    assertEquals(p_double(0.0), p_double(0.0) / p_float(23.123))
    assertEquals(p_double(-0.0), p_double(0.0) / p_float(-32.0))
    assertEquals(p_double(-0.0), p_double(0.0) / p_float(-32.456))
    assertEquals(p_double(0.0), p_double(0.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(0.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_float(Float.NaN_))
    assertEquals(p_double(0.0), p_double(0.0) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_float(0.0))
    assertEquals(p_double(1.0), p_double(1.0) / p_float(1.0))
    assertEquals(p_double(-1.0), p_double(1.0) / p_float(-1.0))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_float(23.0))
    assertEquals(p_double(0.04324698503544181), p_double(1.0) / p_float(23.123))
    assertEquals(p_double(-0.03125), p_double(1.0) / p_float(-32.0))
    assertEquals(p_double(-0.030810942830553214), p_double(1.0) / p_float(-32.456))
    assertEquals(p_double(0.0), p_double(1.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(1.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(1.0) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("2.938736052218037E-39")), p_double(1.0) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("7.1362384635297994E44")), p_double(1.0) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_float(0.0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_float(1.0))
    assertEquals(p_double(1.0), p_double(-1.0) / p_float(-1.0))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_float(23.0))
    assertEquals(p_double(-0.04324698503544181), p_double(-1.0) / p_float(23.123))
    assertEquals(p_double(0.03125), p_double(-1.0) / p_float(-32.0))
    assertEquals(p_double(0.030810942830553214), p_double(-1.0) / p_float(-32.456))
    assertEquals(p_double(-0.0), p_double(-1.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(-1.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-1.0) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("-2.938736052218037E-39")), p_double(-1.0) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-7.1362384635297994E44")), p_double(-1.0) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_float(0.0))
    assertEquals(p_double(23.0), p_double(23.0) / p_float(1.0))
    assertEquals(p_double(-23.0), p_double(23.0) / p_float(-1.0))
    assertEquals(p_double(1.0), p_double(23.0) / p_float(23.0))
    assertEquals(p_double(0.9946806558151616), p_double(23.0) / p_float(23.123))
    assertEquals(p_double(-0.71875), p_double(23.0) / p_float(-32.0))
    assertEquals(p_double(-0.7086516851027239), p_double(23.0) / p_float(-32.456))
    assertEquals(p_double(0.0), p_double(23.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(23.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.0) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("6.759092920101486E-38")), p_double(23.0) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.6413348466118539E46")), p_double(23.0) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_float(0.0))
    assertEquals(p_double(23.123), p_double(23.123) / p_float(1.0))
    assertEquals(p_double(-23.123), p_double(23.123) / p_float(-1.0))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_float(23.0))
    assertEquals(p_double(1.000000034974521), p_double(23.123) / p_float(23.123))
    assertEquals(p_double(-0.72259375), p_double(23.123) / p_float(-32.0))
    assertEquals(p_double(-0.712441431070882), p_double(23.123) / p_float(-32.456))
    assertEquals(p_double(0.0), p_double(23.123) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(23.123) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.123) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("6.795239373543768E-38")), p_double(23.123) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.6501124199219956E46")), p_double(23.123) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_float(0.0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_float(1.0))
    assertEquals(p_double(32.0), p_double(-32.0) / p_float(-1.0))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_float(23.0))
    assertEquals(p_double(-1.383903521134138), p_double(-32.0) / p_float(23.123))
    assertEquals(p_double(1.0), p_double(-32.0) / p_float(-32.0))
    assertEquals(p_double(0.9859501705777028), p_double(-32.0) / p_float(-32.456))
    assertEquals(p_double(-0.0), p_double(-32.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(-32.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.0) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("-9.40395536709772E-38")), p_double(-32.0) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-2.2835963083295358E46")), p_double(-32.0) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_float(0.0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_float(1.0))
    assertEquals(p_double(32.456), p_double(-32.456) / p_float(-1.0))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_float(23.0))
    assertEquals(p_double(-1.4036241463102996), p_double(-32.456) / p_float(23.123))
    assertEquals(p_double(1.01425), p_double(-32.456) / p_float(-32.0))
    assertEquals(p_double(0.9999999605084352), p_double(-32.456) / p_float(-32.456))
    assertEquals(p_double(-0.0), p_double(-32.456) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(-32.456) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.456) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("-9.537961731078862E-38")), p_double(-32.456) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-2.316137555723232E46")), p_double(-32.456) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(0.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(1.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(-1.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(23.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(23.123))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(-32.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / p_float(Float.NaN_))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(0.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(1.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(-1.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(23.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(23.123))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(-32.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / p_float(Float.NaN_))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(Float.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_float(0.0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_float(1.0))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_float(-1.0))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_float(23.0))
    assertEquals(p_double(Double.parseDouble("7.774480810170704E306")), p_double(Double.MAX_VALUE) / p_float(23.123))
    assertEquals(p_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / p_float(-32.0))
    assertEquals(p_double(Double.parseDouble("-5.53886204051208E306")), p_double(Double.MAX_VALUE) / p_float(-32.456))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(Double.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("5.28294562624475E269")), p_double(Double.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_float(0.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_float(1.0))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_float(-1.0))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_float(23.0))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_float(23.123))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_float(-32.0))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_float(-32.456))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("3.5257702653609953E-279")), p_double(Double.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_float(0.0)))
  }

  function testPDoubleFloatDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_float(0.0))
    assertEquals(b_double(0.0), p_double(0.0) / b_float(1.0))
    assertEquals(b_double(-0.0), p_double(0.0) / b_float(-1.0))
    assertEquals(b_double(0.0), p_double(0.0) / b_float(23.0))
    assertEquals(b_double(0.0), p_double(0.0) / b_float(23.123))
    assertEquals(b_double(-0.0), p_double(0.0) / b_float(-32.0))
    assertEquals(b_double(-0.0), p_double(0.0) / b_float(-32.456))
    assertEquals(b_double(0.0), p_double(0.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(0.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_float(Float.NaN_))
    assertEquals(b_double(0.0), p_double(0.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_float(0.0))
    assertEquals(b_double(1.0), p_double(1.0) / b_float(1.0))
    assertEquals(b_double(-1.0), p_double(1.0) / b_float(-1.0))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_float(23.0))
    assertEquals(b_double(0.04324698503544181), p_double(1.0) / b_float(23.123))
    assertEquals(b_double(-0.03125), p_double(1.0) / b_float(-32.0))
    assertEquals(b_double(-0.030810942830553214), p_double(1.0) / b_float(-32.456))
    assertEquals(b_double(0.0), p_double(1.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(1.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(1.0) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("2.938736052218037E-39")), p_double(1.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("7.1362384635297994E44")), p_double(1.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_float(0.0))
    assertEquals(b_double(-1.0), p_double(-1.0) / b_float(1.0))
    assertEquals(b_double(1.0), p_double(-1.0) / b_float(-1.0))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_float(23.0))
    assertEquals(b_double(-0.04324698503544181), p_double(-1.0) / b_float(23.123))
    assertEquals(b_double(0.03125), p_double(-1.0) / b_float(-32.0))
    assertEquals(b_double(0.030810942830553214), p_double(-1.0) / b_float(-32.456))
    assertEquals(b_double(-0.0), p_double(-1.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(-1.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-1.0) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("-2.938736052218037E-39")), p_double(-1.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-7.1362384635297994E44")), p_double(-1.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_float(0.0))
    assertEquals(b_double(23.0), p_double(23.0) / b_float(1.0))
    assertEquals(b_double(-23.0), p_double(23.0) / b_float(-1.0))
    assertEquals(b_double(1.0), p_double(23.0) / b_float(23.0))
    assertEquals(b_double(0.9946806558151616), p_double(23.0) / b_float(23.123))
    assertEquals(b_double(-0.71875), p_double(23.0) / b_float(-32.0))
    assertEquals(b_double(-0.7086516851027239), p_double(23.0) / b_float(-32.456))
    assertEquals(b_double(0.0), p_double(23.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(23.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.0) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("6.759092920101486E-38")), p_double(23.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.6413348466118539E46")), p_double(23.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_float(0.0))
    assertEquals(b_double(23.123), p_double(23.123) / b_float(1.0))
    assertEquals(b_double(-23.123), p_double(23.123) / b_float(-1.0))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_float(23.0))
    assertEquals(b_double(1.000000034974521), p_double(23.123) / b_float(23.123))
    assertEquals(b_double(-0.72259375), p_double(23.123) / b_float(-32.0))
    assertEquals(b_double(-0.712441431070882), p_double(23.123) / b_float(-32.456))
    assertEquals(b_double(0.0), p_double(23.123) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(23.123) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.123) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("6.795239373543768E-38")), p_double(23.123) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.6501124199219956E46")), p_double(23.123) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_float(0.0))
    assertEquals(b_double(-32.0), p_double(-32.0) / b_float(1.0))
    assertEquals(b_double(32.0), p_double(-32.0) / b_float(-1.0))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_float(23.0))
    assertEquals(b_double(-1.383903521134138), p_double(-32.0) / b_float(23.123))
    assertEquals(b_double(1.0), p_double(-32.0) / b_float(-32.0))
    assertEquals(b_double(0.9859501705777028), p_double(-32.0) / b_float(-32.456))
    assertEquals(b_double(-0.0), p_double(-32.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(-32.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.0) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("-9.40395536709772E-38")), p_double(-32.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.2835963083295358E46")), p_double(-32.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_float(0.0))
    assertEquals(b_double(-32.456), p_double(-32.456) / b_float(1.0))
    assertEquals(b_double(32.456), p_double(-32.456) / b_float(-1.0))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_float(23.0))
    assertEquals(b_double(-1.4036241463102996), p_double(-32.456) / b_float(23.123))
    assertEquals(b_double(1.01425), p_double(-32.456) / b_float(-32.0))
    assertEquals(b_double(0.9999999605084352), p_double(-32.456) / b_float(-32.456))
    assertEquals(b_double(-0.0), p_double(-32.456) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(-32.456) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.456) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("-9.537961731078862E-38")), p_double(-32.456) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.316137555723232E46")), p_double(-32.456) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(-1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / b_float(Float.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(-1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / b_float(Float.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(Float.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_float(0.0))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / b_float(1.0))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_float(23.0))
    assertEquals(b_double(Double.parseDouble("7.774480810170704E306")), p_double(Double.MAX_VALUE) / b_float(23.123))
    assertEquals(b_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_double(Double.parseDouble("-5.53886204051208E306")), p_double(Double.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(Double.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("5.28294562624475E269")), p_double(Double.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_float(0.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / b_float(1.0))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_float(23.0))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_float(23.123))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("3.5257702653609953E-279")), p_double(Double.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_float(0.0)))
  }

  function testPDoublePDoubleDivision() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_double(0.0))
    assertEquals(p_double(0.0), p_double(0.0) / p_double(1.0))
    assertEquals(p_double(-0.0), p_double(0.0) / p_double(-1.0))
    assertEquals(p_double(0.0), p_double(0.0) / p_double(23.0))
    assertEquals(p_double(0.0), p_double(0.0) / p_double(23.123))
    assertEquals(p_double(-0.0), p_double(0.0) / p_double(-32.0))
    assertEquals(p_double(-0.0), p_double(0.0) / p_double(-32.456))
    assertEquals(p_double(0.0), p_double(0.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(0.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(0.0) / p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_double(0.0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_double(0.0))
    assertEquals(p_double(1.0), p_double(1.0) / p_double(1.0))
    assertEquals(p_double(-1.0), p_double(1.0) / p_double(-1.0))
    assertEquals(p_double(0.043478260869565216), p_double(1.0) / p_double(23.0))
    assertEquals(p_double(0.043246983522899275), p_double(1.0) / p_double(23.123))
    assertEquals(p_double(-0.03125), p_double(1.0) / p_double(-32.0))
    assertEquals(p_double(-0.03081094404732561), p_double(1.0) / p_double(-32.456))
    assertEquals(p_double(0.0), p_double(1.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(1.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(1.0) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("5.562684646268003E-309")), p_double(1.0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(1.0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_double(0.0))
    assertEquals(p_double(-1.0), p_double(-1.0) / p_double(1.0))
    assertEquals(p_double(1.0), p_double(-1.0) / p_double(-1.0))
    assertEquals(p_double(-0.043478260869565216), p_double(-1.0) / p_double(23.0))
    assertEquals(p_double(-0.043246983522899275), p_double(-1.0) / p_double(23.123))
    assertEquals(p_double(0.03125), p_double(-1.0) / p_double(-32.0))
    assertEquals(p_double(0.03081094404732561), p_double(-1.0) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_double(-1.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(-1.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-1.0) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-5.562684646268003E-309")), p_double(-1.0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_double(0.0))
    assertEquals(p_double(23.0), p_double(23.0) / p_double(1.0))
    assertEquals(p_double(-23.0), p_double(23.0) / p_double(-1.0))
    assertEquals(p_double(1.0), p_double(23.0) / p_double(23.0))
    assertEquals(p_double(0.9946806210266833), p_double(23.0) / p_double(23.123))
    assertEquals(p_double(-0.71875), p_double(23.0) / p_double(-32.0))
    assertEquals(p_double(-0.708651713088489), p_double(23.0) / p_double(-32.456))
    assertEquals(p_double(0.0), p_double(23.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(23.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.0) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.279417468641641E-307")), p_double(23.0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_double(0.0))
    assertEquals(p_double(23.123), p_double(23.123) / p_double(1.0))
    assertEquals(p_double(-23.123), p_double(23.123) / p_double(-1.0))
    assertEquals(p_double(1.0053478260869566), p_double(23.123) / p_double(23.0))
    assertEquals(p_double(1.0), p_double(23.123) / p_double(23.123))
    assertEquals(p_double(-0.72259375), p_double(23.123) / p_double(-32.0))
    assertEquals(p_double(-0.7124414592063101), p_double(23.123) / p_double(-32.456))
    assertEquals(p_double(0.0), p_double(23.123) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(23.123) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.123) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.2862595707565507E-307")), p_double(23.123) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(23.123) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_double(0.0))
    assertEquals(p_double(-32.0), p_double(-32.0) / p_double(1.0))
    assertEquals(p_double(32.0), p_double(-32.0) / p_double(-1.0))
    assertEquals(p_double(-1.391304347826087), p_double(-32.0) / p_double(23.0))
    assertEquals(p_double(-1.3839034727327768), p_double(-32.0) / p_double(23.123))
    assertEquals(p_double(1.0), p_double(-32.0) / p_double(-32.0))
    assertEquals(p_double(0.9859502095144195), p_double(-32.0) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_double(-32.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(-32.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.0) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.7800590868057615E-307")), p_double(-32.0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_double(0.0))
    assertEquals(p_double(-32.456), p_double(-32.456) / p_double(1.0))
    assertEquals(p_double(32.456), p_double(-32.456) / p_double(-1.0))
    assertEquals(p_double(-1.4111304347826088), p_double(-32.456) / p_double(23.0))
    assertEquals(p_double(-1.403624097219219), p_double(-32.456) / p_double(23.123))
    assertEquals(p_double(1.01425), p_double(-32.456) / p_double(-32.0))
    assertEquals(p_double(1.0), p_double(-32.456) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_double(-32.456) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(-32.456) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.456) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.8054249287927438E-307")), p_double(-32.456) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(0.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(1.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(-1.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(23.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(23.123))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(-32.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / p_double(Double.NaN_))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(0.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(1.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(-1.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(23.0))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(23.123))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(-32.0))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / p_double(Double.NaN_))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(Double.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_double(0.0))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / p_double(1.0))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / p_double(-1.0))
    assertEquals(p_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / p_double(23.0))
    assertEquals(p_double(Double.parseDouble("7.774480538261971E306")), p_double(Double.MAX_VALUE) / p_double(23.123))
    assertEquals(p_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / p_double(-32.0))
    assertEquals(p_double(Double.parseDouble("-5.538862259250418E306")), p_double(Double.MAX_VALUE) / p_double(-32.456))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(Double.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(1.0), p_double(Double.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / p_double(0.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / p_double(1.0))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / p_double(-1.0))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_double(23.0))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_double(23.123))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_double(-32.0))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_double(-32.456))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_double(Double.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(1.0), p_double(Double.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) / p_double(0.0)))
  }

  function testPDoubleDoubleDivision() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_double(0.0))
    assertEquals(b_double(0.0), p_double(0.0) / b_double(1.0))
    assertEquals(b_double(-0.0), p_double(0.0) / b_double(-1.0))
    assertEquals(b_double(0.0), p_double(0.0) / b_double(23.0))
    assertEquals(b_double(0.0), p_double(0.0) / b_double(23.123))
    assertEquals(b_double(-0.0), p_double(0.0) / b_double(-32.0))
    assertEquals(b_double(-0.0), p_double(0.0) / b_double(-32.456))
    assertEquals(b_double(0.0), p_double(0.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(0.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(0.0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_double(0.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_double(0.0))
    assertEquals(b_double(1.0), p_double(1.0) / b_double(1.0))
    assertEquals(b_double(-1.0), p_double(1.0) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), p_double(1.0) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), p_double(1.0) / b_double(23.123))
    assertEquals(b_double(-0.03125), p_double(1.0) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), p_double(1.0) / b_double(-32.456))
    assertEquals(b_double(0.0), p_double(1.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(1.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(1.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), p_double(1.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(1.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_double(0.0))
    assertEquals(b_double(-1.0), p_double(-1.0) / b_double(1.0))
    assertEquals(b_double(1.0), p_double(-1.0) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), p_double(-1.0) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), p_double(-1.0) / b_double(23.123))
    assertEquals(b_double(0.03125), p_double(-1.0) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), p_double(-1.0) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_double(-1.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(-1.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-1.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), p_double(-1.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-1.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_double(0.0))
    assertEquals(b_double(23.0), p_double(23.0) / b_double(1.0))
    assertEquals(b_double(-23.0), p_double(23.0) / b_double(-1.0))
    assertEquals(b_double(1.0), p_double(23.0) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), p_double(23.0) / b_double(23.123))
    assertEquals(b_double(-0.71875), p_double(23.0) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), p_double(23.0) / b_double(-32.456))
    assertEquals(b_double(0.0), p_double(23.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(23.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), p_double(23.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_double(0.0))
    assertEquals(b_double(23.123), p_double(23.123) / b_double(1.0))
    assertEquals(b_double(-23.123), p_double(23.123) / b_double(-1.0))
    assertEquals(b_double(1.0053478260869566), p_double(23.123) / b_double(23.0))
    assertEquals(b_double(1.0), p_double(23.123) / b_double(23.123))
    assertEquals(b_double(-0.72259375), p_double(23.123) / b_double(-32.0))
    assertEquals(b_double(-0.7124414592063101), p_double(23.123) / b_double(-32.456))
    assertEquals(b_double(0.0), p_double(23.123) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(23.123) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.123) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.2862595707565507E-307")), p_double(23.123) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(23.123) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_double(0.0))
    assertEquals(b_double(-32.0), p_double(-32.0) / b_double(1.0))
    assertEquals(b_double(32.0), p_double(-32.0) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), p_double(-32.0) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), p_double(-32.0) / b_double(23.123))
    assertEquals(b_double(1.0), p_double(-32.0) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), p_double(-32.0) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_double(-32.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(-32.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), p_double(-32.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_double(0.0))
    assertEquals(b_double(-32.456), p_double(-32.456) / b_double(1.0))
    assertEquals(b_double(32.456), p_double(-32.456) / b_double(-1.0))
    assertEquals(b_double(-1.4111304347826088), p_double(-32.456) / b_double(23.0))
    assertEquals(b_double(-1.403624097219219), p_double(-32.456) / b_double(23.123))
    assertEquals(b_double(1.01425), p_double(-32.456) / b_double(-32.0))
    assertEquals(b_double(1.0), p_double(-32.456) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_double(-32.456) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(-32.456) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.456) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.8054249287927438E-307")), p_double(-32.456) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(-32.456) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(-1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) / b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.POSITIVE_INFINITY) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(-1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) / b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_double(Double.NEGATIVE_INFINITY) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_double(Double.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("7.816057108097024E306")), p_double(Double.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("7.774480538261971E306")), p_double(Double.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-5.6177910464447366E306")), p_double(Double.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-5.538862259250418E306")), p_double(Double.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(Double.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(1.0), p_double(Double.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_double(Double.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_double(Double.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_double(Double.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(1.0), p_double(Double.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) / b_double(0.0)))
  }

  function testPDoubleBigIntegerDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> p_double(0.0) / big_int("0"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_int("1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_int("-1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_int("23"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_int("-32"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(1.0) / big_int("0"))
    assertEquals(big_decimal("1.0"), p_double(1.0) / big_int("1"))
    assertEquals(big_decimal("-1.0"), p_double(1.0) / big_int("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), p_double(1.0) / big_int("23"))
    assertEquals(big_decimal("-0.03125"), p_double(1.0) / big_int("-32"))
    assertEquals(big_decimal("8.100000072900000663390006036857155E-30"), p_double(1.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-8.100000072900000663390006036857155E-30"), p_double(1.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-1.0) / big_int("0"))
    assertEquals(big_decimal("-1.0"), p_double(-1.0) / big_int("1"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) / big_int("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), p_double(-1.0) / big_int("23"))
    assertEquals(big_decimal("0.03125"), p_double(-1.0) / big_int("-32"))
    assertEquals(big_decimal("-8.100000072900000663390006036857155E-30"), p_double(-1.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("8.100000072900000663390006036857155E-30"), p_double(-1.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.0) / big_int("0"))
    assertEquals(big_decimal("23.0"), p_double(23.0) / big_int("1"))
    assertEquals(big_decimal("-23.0"), p_double(23.0) / big_int("-1"))
    assertEquals(big_decimal("1.0"), p_double(23.0) / big_int("23"))
    assertEquals(big_decimal("-0.71875"), p_double(23.0) / big_int("-32"))
    assertEquals(big_decimal("1.863000016767000152579701388477146E-28"), p_double(23.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.863000016767000152579701388477146E-28"), p_double(23.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.123) / big_int("0"))
    assertEquals(big_decimal("23.123"), p_double(23.123) / big_int("1"))
    assertEquals(big_decimal("-23.123"), p_double(23.123) / big_int("-1"))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), p_double(23.123) / big_int("23"))
    assertEquals(big_decimal("-0.72259375"), p_double(23.123) / big_int("-32"))
    assertEquals(big_decimal("1.872963016856667153395671095902480E-28"), p_double(23.123) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.872963016856667153395671095902480E-28"), p_double(23.123) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.0) / big_int("0"))
    assertEquals(big_decimal("-32.0"), p_double(-32.0) / big_int("1"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) / big_int("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), p_double(-32.0) / big_int("23"))
    assertEquals(big_decimal("1.0"), p_double(-32.0) / big_int("-32"))
    assertEquals(big_decimal("-2.592000023328000212284801931794290E-28"), p_double(-32.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("2.592000023328000212284801931794290E-28"), p_double(-32.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.456) / big_int("0"))
    assertEquals(big_decimal("-32.456"), p_double(-32.456) / big_int("1"))
    assertEquals(big_decimal("32.456"), p_double(-32.456) / big_int("-1"))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), p_double(-32.456) / big_int("23"))
    assertEquals(big_decimal("1.01425"), p_double(-32.456) / big_int("-32"))
    assertEquals(big_decimal("-2.628936023660424215309860359322358E-28"), p_double(-32.456) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("2.628936023660424215309860359322358E-28"), p_double(-32.456) / big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("0"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("-1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("23"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("-32"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MAX_VALUE) / big_int("0"))
    assertEquals(big_decimal("1.7976931348623157E+308"), p_double(Double.MAX_VALUE) / big_int("1"))
    assertEquals(big_decimal("-1.7976931348623157E+308"), p_double(Double.MAX_VALUE) / big_int("-1"))
    assertEquals(big_decimal("7.816057108097024782608695652173913E+306"), p_double(Double.MAX_VALUE) / big_int("23"))
    assertEquals(big_decimal("-5.6177910464447365625E+306"), p_double(Double.MAX_VALUE) / big_int("-32"))
    assertEquals(big_decimal("1.456131452343658789403447411872828E+279"), p_double(Double.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.456131452343658789403447411872828E+279"), p_double(Double.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MIN_VALUE) / big_int("0"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) / big_int("1"))
    assertEquals(big_decimal("-4.9E-324"), p_double(Double.MIN_VALUE) / big_int("-1"))
    assertEquals(big_decimal("2.130434782608695652173913043478261E-325"), p_double(Double.MIN_VALUE) / big_int("23"))
    assertEquals(big_decimal("-1.53125E-325"), p_double(Double.MIN_VALUE) / big_int("-32"))
    assertEquals(big_decimal("3.969000035721000325061102958060006E-353"), p_double(Double.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-3.969000035721000325061102958060006E-353"), p_double(Double.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(p_double(0.0) / big_int("0")))
  }

  function testPDoubleBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> p_double(0.0) / big_decimal("0"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_decimal("1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_decimal("-1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_decimal("23"))
    assertEquals(big_decimal("0E+2"), p_double(0.0) / big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), p_double(0.0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+2"), p_double(0.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+8"), p_double(0.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+8"), p_double(0.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(1.0) / big_decimal("0"))
    assertEquals(big_decimal("1.0"), p_double(1.0) / big_decimal("1"))
    assertEquals(big_decimal("-1.0"), p_double(1.0) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), p_double(1.0) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), p_double(1.0) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), p_double(1.0) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), p_double(1.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_double(1.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_double(1.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-1.0) / big_decimal("0"))
    assertEquals(big_decimal("-1.0"), p_double(-1.0) / big_decimal("1"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), p_double(-1.0) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), p_double(-1.0) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), p_double(-1.0) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), p_double(-1.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_double(-1.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_double(-1.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.0) / big_decimal("0"))
    assertEquals(big_decimal("23.0"), p_double(23.0) / big_decimal("1"))
    assertEquals(big_decimal("-23.0"), p_double(23.0) / big_decimal("-1"))
    assertEquals(big_decimal("1.0"), p_double(23.0) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), p_double(23.0) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), p_double(23.0) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), p_double(23.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), p_double(23.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), p_double(23.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.123) / big_decimal("0"))
    assertEquals(big_decimal("23.123"), p_double(23.123) / big_decimal("1"))
    assertEquals(big_decimal("-23.123"), p_double(23.123) / big_decimal("-1"))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), p_double(23.123) / big_decimal("23"))
    assertEquals(big_decimal("1"), p_double(23.123) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.72259375"), p_double(23.123) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), p_double(23.123) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.872963016856667153395671095900607E-28"), p_double(23.123) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.872963016856667153395671095900607E-28"), p_double(23.123) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.0) / big_decimal("0"))
    assertEquals(big_decimal("-32.0"), p_double(-32.0) / big_decimal("1"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), p_double(-32.0) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), p_double(-32.0) / big_decimal("23.123"))
    assertEquals(big_decimal("1.0"), p_double(-32.0) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), p_double(-32.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), p_double(-32.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), p_double(-32.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.456) / big_decimal("0"))
    assertEquals(big_decimal("-32.456"), p_double(-32.456) / big_decimal("1"))
    assertEquals(big_decimal("32.456"), p_double(-32.456) / big_decimal("-1"))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), p_double(-32.456) / big_decimal("23"))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), p_double(-32.456) / big_decimal("23.123"))
    assertEquals(big_decimal("1.01425"), p_double(-32.456) / big_decimal("-32"))
    assertEquals(big_decimal("1"), p_double(-32.456) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.628936023660424215309860359319729E-28"), p_double(-32.456) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.628936023660424215309860359319729E-28"), p_double(-32.456) / big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("0"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("23"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("23.123"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-32"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("1.7976931348623157E+308"), p_double(Double.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-1.7976931348623157E+308"), p_double(Double.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("7.816057108097024782608695652173913E+306"), p_double(Double.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("7.774480538261971629978808978073779E+306"), p_double(Double.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-5.6177910464447365625E+306"), p_double(Double.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-5.538862259250418104510722208528469E+306"), p_double(Double.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.456131452343658789403447411871371E+279"), p_double(Double.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.456131452343658789403447411871371E+279"), p_double(Double.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-4.9E-324"), p_double(Double.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("2.130434782608695652173913043478261E-325"), p_double(Double.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("2.119102192622064610993383211520996E-325"), p_double(Double.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-1.53125E-325"), p_double(Double.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-1.509736258318954892777914715306877E-325"), p_double(Double.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("3.969000035721000325061102958056037E-353"), p_double(Double.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-3.969000035721000325061102958056037E-353"), p_double(Double.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_double(0.0) / big_decimal("0")))
  }

}

