package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_BigIntegerTest extends ArithmeticTestBase {

  function testBigIntegerPByteDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / p_byte(0))
    assertEquals(big_int("0"), big_int("0") / p_byte(1))
    assertEquals(big_int("0"), big_int("0") / p_byte(-1))
    assertEquals(big_int("0"), big_int("0") / p_byte(23))
    assertEquals(big_int("0"), big_int("0") / p_byte(-32))
    assertEquals(big_int("0"), big_int("0") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / p_byte(0))
    assertEquals(big_int("1"), big_int("1") / p_byte(1))
    assertEquals(big_int("-1"), big_int("1") / p_byte(-1))
    assertEquals(big_int("0"), big_int("1") / p_byte(23))
    assertEquals(big_int("0"), big_int("1") / p_byte(-32))
    assertEquals(big_int("0"), big_int("1") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / p_byte(0))
    assertEquals(big_int("-1"), big_int("-1") / p_byte(1))
    assertEquals(big_int("1"), big_int("-1") / p_byte(-1))
    assertEquals(big_int("0"), big_int("-1") / p_byte(23))
    assertEquals(big_int("0"), big_int("-1") / p_byte(-32))
    assertEquals(big_int("0"), big_int("-1") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / p_byte(0))
    assertEquals(big_int("23"), big_int("23") / p_byte(1))
    assertEquals(big_int("-23"), big_int("23") / p_byte(-1))
    assertEquals(big_int("1"), big_int("23") / p_byte(23))
    assertEquals(big_int("0"), big_int("23") / p_byte(-32))
    assertEquals(big_int("0"), big_int("23") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / p_byte(0))
    assertEquals(big_int("-32"), big_int("-32") / p_byte(1))
    assertEquals(big_int("32"), big_int("-32") / p_byte(-1))
    assertEquals(big_int("-1"), big_int("-32") / p_byte(23))
    assertEquals(big_int("1"), big_int("-32") / p_byte(-32))
    assertEquals(big_int("0"), big_int("-32") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / p_byte(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_byte(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_byte(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / p_byte(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / p_byte(-32))
    assertEquals(big_int("972100700884611644891610770"), big_int("123456789012345678901234567890") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-964506164158950616415895061"), big_int("123456789012345678901234567890") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / p_byte(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_byte(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_byte(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / p_byte(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / p_byte(-32))
    assertEquals(big_int("-972100700884611644891610770"), big_int("-123456789012345678901234567890") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_int("964506164158950616415895061"), big_int("-123456789012345678901234567890") / p_byte(Byte.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / p_byte(0)))
  }

  function testBigIntegerByteDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / b_byte(0))
    assertEquals(big_int("0"), big_int("0") / p_byte(1))
    assertEquals(big_int("0"), big_int("0") / p_byte(-1))
    assertEquals(big_int("0"), big_int("0") / b_byte(23))
    assertEquals(big_int("0"), big_int("0") / b_byte(-32))
    assertEquals(big_int("0"), big_int("0") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / b_byte(0))
    assertEquals(big_int("1"), big_int("1") / p_byte(1))
    assertEquals(big_int("-1"), big_int("1") / p_byte(-1))
    assertEquals(big_int("0"), big_int("1") / b_byte(23))
    assertEquals(big_int("0"), big_int("1") / b_byte(-32))
    assertEquals(big_int("0"), big_int("1") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / b_byte(0))
    assertEquals(big_int("-1"), big_int("-1") / p_byte(1))
    assertEquals(big_int("1"), big_int("-1") / p_byte(-1))
    assertEquals(big_int("0"), big_int("-1") / b_byte(23))
    assertEquals(big_int("0"), big_int("-1") / b_byte(-32))
    assertEquals(big_int("0"), big_int("-1") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / b_byte(0))
    assertEquals(big_int("23"), big_int("23") / p_byte(1))
    assertEquals(big_int("-23"), big_int("23") / p_byte(-1))
    assertEquals(big_int("1"), big_int("23") / b_byte(23))
    assertEquals(big_int("0"), big_int("23") / b_byte(-32))
    assertEquals(big_int("0"), big_int("23") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / b_byte(0))
    assertEquals(big_int("-32"), big_int("-32") / p_byte(1))
    assertEquals(big_int("32"), big_int("-32") / p_byte(-1))
    assertEquals(big_int("-1"), big_int("-32") / b_byte(23))
    assertEquals(big_int("1"), big_int("-32") / b_byte(-32))
    assertEquals(big_int("0"), big_int("-32") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / b_byte(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_byte(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_byte(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / b_byte(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / b_byte(-32))
    assertEquals(big_int("972100700884611644891610770"), big_int("123456789012345678901234567890") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("-964506164158950616415895061"), big_int("123456789012345678901234567890") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / b_byte(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_byte(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_byte(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / b_byte(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / b_byte(-32))
    assertEquals(big_int("-972100700884611644891610770"), big_int("-123456789012345678901234567890") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_int("964506164158950616415895061"), big_int("-123456789012345678901234567890") / b_byte(Byte.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / b_byte(0)))
  }

  function testBigIntegerPShortDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / p_short(0))
    assertEquals(big_int("0"), big_int("0") / p_short(1))
    assertEquals(big_int("0"), big_int("0") / p_short(-1))
    assertEquals(big_int("0"), big_int("0") / p_short(23))
    assertEquals(big_int("0"), big_int("0") / p_short(-32))
    assertEquals(big_int("0"), big_int("0") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / p_short(0))
    assertEquals(big_int("1"), big_int("1") / p_short(1))
    assertEquals(big_int("-1"), big_int("1") / p_short(-1))
    assertEquals(big_int("0"), big_int("1") / p_short(23))
    assertEquals(big_int("0"), big_int("1") / p_short(-32))
    assertEquals(big_int("0"), big_int("1") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / p_short(0))
    assertEquals(big_int("-1"), big_int("-1") / p_short(1))
    assertEquals(big_int("1"), big_int("-1") / p_short(-1))
    assertEquals(big_int("0"), big_int("-1") / p_short(23))
    assertEquals(big_int("0"), big_int("-1") / p_short(-32))
    assertEquals(big_int("0"), big_int("-1") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / p_short(0))
    assertEquals(big_int("23"), big_int("23") / p_short(1))
    assertEquals(big_int("-23"), big_int("23") / p_short(-1))
    assertEquals(big_int("1"), big_int("23") / p_short(23))
    assertEquals(big_int("0"), big_int("23") / p_short(-32))
    assertEquals(big_int("0"), big_int("23") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / p_short(0))
    assertEquals(big_int("-32"), big_int("-32") / p_short(1))
    assertEquals(big_int("32"), big_int("-32") / p_short(-1))
    assertEquals(big_int("-1"), big_int("-32") / p_short(23))
    assertEquals(big_int("1"), big_int("-32") / p_short(-32))
    assertEquals(big_int("0"), big_int("-32") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / p_short(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_short(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_short(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / p_short(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / p_short(-32))
    assertEquals(big_int("3767717185349457652553928"), big_int("123456789012345678901234567890") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("-3767602203745900845374590"), big_int("123456789012345678901234567890") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / p_short(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_short(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_short(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / p_short(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / p_short(-32))
    assertEquals(big_int("-3767717185349457652553928"), big_int("-123456789012345678901234567890") / p_short(Short.MAX_VALUE))
    assertEquals(big_int("3767602203745900845374590"), big_int("-123456789012345678901234567890") / p_short(Short.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / p_short(0)))
  }

  function testBigIntegerShortDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / b_short(0))
    assertEquals(big_int("0"), big_int("0") / b_short(1))
    assertEquals(big_int("0"), big_int("0") / b_short(-1))
    assertEquals(big_int("0"), big_int("0") / b_short(23))
    assertEquals(big_int("0"), big_int("0") / b_short(-32))
    assertEquals(big_int("0"), big_int("0") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / b_short(0))
    assertEquals(big_int("1"), big_int("1") / b_short(1))
    assertEquals(big_int("-1"), big_int("1") / b_short(-1))
    assertEquals(big_int("0"), big_int("1") / b_short(23))
    assertEquals(big_int("0"), big_int("1") / b_short(-32))
    assertEquals(big_int("0"), big_int("1") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / b_short(0))
    assertEquals(big_int("-1"), big_int("-1") / b_short(1))
    assertEquals(big_int("1"), big_int("-1") / b_short(-1))
    assertEquals(big_int("0"), big_int("-1") / b_short(23))
    assertEquals(big_int("0"), big_int("-1") / b_short(-32))
    assertEquals(big_int("0"), big_int("-1") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / b_short(0))
    assertEquals(big_int("23"), big_int("23") / b_short(1))
    assertEquals(big_int("-23"), big_int("23") / b_short(-1))
    assertEquals(big_int("1"), big_int("23") / b_short(23))
    assertEquals(big_int("0"), big_int("23") / b_short(-32))
    assertEquals(big_int("0"), big_int("23") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / b_short(0))
    assertEquals(big_int("-32"), big_int("-32") / b_short(1))
    assertEquals(big_int("32"), big_int("-32") / b_short(-1))
    assertEquals(big_int("-1"), big_int("-32") / b_short(23))
    assertEquals(big_int("1"), big_int("-32") / b_short(-32))
    assertEquals(big_int("0"), big_int("-32") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / b_short(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_short(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_short(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / b_short(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / b_short(-32))
    assertEquals(big_int("3767717185349457652553928"), big_int("123456789012345678901234567890") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("-3767602203745900845374590"), big_int("123456789012345678901234567890") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / b_short(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_short(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_short(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / b_short(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / b_short(-32))
    assertEquals(big_int("-3767717185349457652553928"), big_int("-123456789012345678901234567890") / b_short(Short.MAX_VALUE))
    assertEquals(big_int("3767602203745900845374590"), big_int("-123456789012345678901234567890") / b_short(Short.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / b_short(0)))
  }

  function testBigIntegerPCharDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / p_char(0))
    assertEquals(big_int("0"), big_int("0") / p_char(1))
    assertEquals(big_int("0"), big_int("0") / p_char(23))
    assertEquals(big_int("0"), big_int("0") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / p_char(0))
    assertEquals(big_int("1"), big_int("1") / p_char(1))
    assertEquals(big_int("0"), big_int("1") / p_char(23))
    assertEquals(big_int("0"), big_int("1") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / p_char(0))
    assertEquals(big_int("-1"), big_int("-1") / p_char(1))
    assertEquals(big_int("0"), big_int("-1") / p_char(23))
    assertEquals(big_int("0"), big_int("-1") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / p_char(0))
    assertEquals(big_int("23"), big_int("23") / p_char(1))
    assertEquals(big_int("1"), big_int("23") / p_char(23))
    assertEquals(big_int("0"), big_int("23") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / p_char(0))
    assertEquals(big_int("-32"), big_int("-32") / p_char(1))
    assertEquals(big_int("-1"), big_int("-32") / p_char(23))
    assertEquals(big_int("0"), big_int("-32") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / p_char(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_char(1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / p_char(23))
    assertEquals(big_int("1883829846835212922884482"), big_int("123456789012345678901234567890") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / p_char(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_char(1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / p_char(23))
    assertEquals(big_int("-1883829846835212922884482"), big_int("-123456789012345678901234567890") / p_char(Character.MAX_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / p_char(0)))
  }

  function testBigIntegerCharacterDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / b_char(0))
    assertEquals(big_int("0"), big_int("0") / b_char(1))
    assertEquals(big_int("0"), big_int("0") / b_char(23))
    assertEquals(big_int("0"), big_int("0") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / b_char(0))
    assertEquals(big_int("1"), big_int("1") / b_char(1))
    assertEquals(big_int("0"), big_int("1") / b_char(23))
    assertEquals(big_int("0"), big_int("1") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / b_char(0))
    assertEquals(big_int("-1"), big_int("-1") / b_char(1))
    assertEquals(big_int("0"), big_int("-1") / b_char(23))
    assertEquals(big_int("0"), big_int("-1") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / b_char(0))
    assertEquals(big_int("23"), big_int("23") / b_char(1))
    assertEquals(big_int("1"), big_int("23") / b_char(23))
    assertEquals(big_int("0"), big_int("23") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / b_char(0))
    assertEquals(big_int("-32"), big_int("-32") / b_char(1))
    assertEquals(big_int("-1"), big_int("-32") / b_char(23))
    assertEquals(big_int("0"), big_int("-32") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / b_char(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_char(1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / b_char(23))
    assertEquals(big_int("1883829846835212922884482"), big_int("123456789012345678901234567890") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / b_char(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_char(1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / b_char(23))
    assertEquals(big_int("-1883829846835212922884482"), big_int("-123456789012345678901234567890") / b_char(Character.MAX_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / b_char(0)))
  }

  function testBigIntegerPIntDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / p_int(0))
    assertEquals(big_int("0"), big_int("0") / p_int(1))
    assertEquals(big_int("0"), big_int("0") / p_int(-1))
    assertEquals(big_int("0"), big_int("0") / p_int(23))
    assertEquals(big_int("0"), big_int("0") / p_int(-32))
    assertEquals(big_int("0"), big_int("0") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / p_int(0))
    assertEquals(big_int("1"), big_int("1") / p_int(1))
    assertEquals(big_int("-1"), big_int("1") / p_int(-1))
    assertEquals(big_int("0"), big_int("1") / p_int(23))
    assertEquals(big_int("0"), big_int("1") / p_int(-32))
    assertEquals(big_int("0"), big_int("1") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / p_int(0))
    assertEquals(big_int("-1"), big_int("-1") / p_int(1))
    assertEquals(big_int("1"), big_int("-1") / p_int(-1))
    assertEquals(big_int("0"), big_int("-1") / p_int(23))
    assertEquals(big_int("0"), big_int("-1") / p_int(-32))
    assertEquals(big_int("0"), big_int("-1") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / p_int(0))
    assertEquals(big_int("23"), big_int("23") / p_int(1))
    assertEquals(big_int("-23"), big_int("23") / p_int(-1))
    assertEquals(big_int("1"), big_int("23") / p_int(23))
    assertEquals(big_int("0"), big_int("23") / p_int(-32))
    assertEquals(big_int("0"), big_int("23") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / p_int(0))
    assertEquals(big_int("-32"), big_int("-32") / p_int(1))
    assertEquals(big_int("32"), big_int("-32") / p_int(-1))
    assertEquals(big_int("-1"), big_int("-32") / p_int(23))
    assertEquals(big_int("1"), big_int("-32") / p_int(-32))
    assertEquals(big_int("0"), big_int("-32") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / p_int(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_int(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_int(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / p_int(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / p_int(-32))
    assertEquals(big_int("57489047325139272132"), big_int("123456789012345678901234567890") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("-57489047298368848348"), big_int("123456789012345678901234567890") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / p_int(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_int(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_int(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / p_int(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / p_int(-32))
    assertEquals(big_int("-57489047325139272132"), big_int("-123456789012345678901234567890") / p_int(Integer.MAX_VALUE))
    assertEquals(big_int("57489047298368848348"), big_int("-123456789012345678901234567890") / p_int(Integer.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / p_int(0)))
  }

  function testBigIntegerIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / b_int(0))
    assertEquals(big_int("0"), big_int("0") / b_int(1))
    assertEquals(big_int("0"), big_int("0") / b_int(-1))
    assertEquals(big_int("0"), big_int("0") / b_int(23))
    assertEquals(big_int("0"), big_int("0") / b_int(-32))
    assertEquals(big_int("0"), big_int("0") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / b_int(0))
    assertEquals(big_int("1"), big_int("1") / b_int(1))
    assertEquals(big_int("-1"), big_int("1") / b_int(-1))
    assertEquals(big_int("0"), big_int("1") / b_int(23))
    assertEquals(big_int("0"), big_int("1") / b_int(-32))
    assertEquals(big_int("0"), big_int("1") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / b_int(0))
    assertEquals(big_int("-1"), big_int("-1") / b_int(1))
    assertEquals(big_int("1"), big_int("-1") / b_int(-1))
    assertEquals(big_int("0"), big_int("-1") / b_int(23))
    assertEquals(big_int("0"), big_int("-1") / b_int(-32))
    assertEquals(big_int("0"), big_int("-1") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / b_int(0))
    assertEquals(big_int("23"), big_int("23") / b_int(1))
    assertEquals(big_int("-23"), big_int("23") / b_int(-1))
    assertEquals(big_int("1"), big_int("23") / b_int(23))
    assertEquals(big_int("0"), big_int("23") / b_int(-32))
    assertEquals(big_int("0"), big_int("23") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / b_int(0))
    assertEquals(big_int("-32"), big_int("-32") / b_int(1))
    assertEquals(big_int("32"), big_int("-32") / b_int(-1))
    assertEquals(big_int("-1"), big_int("-32") / b_int(23))
    assertEquals(big_int("1"), big_int("-32") / b_int(-32))
    assertEquals(big_int("0"), big_int("-32") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / b_int(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_int(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_int(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / b_int(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / b_int(-32))
    assertEquals(big_int("57489047325139272132"), big_int("123456789012345678901234567890") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("-57489047298368848348"), big_int("123456789012345678901234567890") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / b_int(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_int(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_int(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / b_int(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / b_int(-32))
    assertEquals(big_int("-57489047325139272132"), big_int("-123456789012345678901234567890") / b_int(Integer.MAX_VALUE))
    assertEquals(big_int("57489047298368848348"), big_int("-123456789012345678901234567890") / b_int(Integer.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / b_int(0)))
  }

  function testBigIntegerPLongDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / p_long(0))
    assertEquals(big_int("0"), big_int("0") / p_long(1))
    assertEquals(big_int("0"), big_int("0") / p_long(-1))
    assertEquals(big_int("0"), big_int("0") / p_long(23))
    assertEquals(big_int("0"), big_int("0") / p_long(-32))
    assertEquals(big_int("0"), big_int("0") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / p_long(0))
    assertEquals(big_int("1"), big_int("1") / p_long(1))
    assertEquals(big_int("-1"), big_int("1") / p_long(-1))
    assertEquals(big_int("0"), big_int("1") / p_long(23))
    assertEquals(big_int("0"), big_int("1") / p_long(-32))
    assertEquals(big_int("0"), big_int("1") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / p_long(0))
    assertEquals(big_int("-1"), big_int("-1") / p_long(1))
    assertEquals(big_int("1"), big_int("-1") / p_long(-1))
    assertEquals(big_int("0"), big_int("-1") / p_long(23))
    assertEquals(big_int("0"), big_int("-1") / p_long(-32))
    assertEquals(big_int("0"), big_int("-1") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / p_long(0))
    assertEquals(big_int("23"), big_int("23") / p_long(1))
    assertEquals(big_int("-23"), big_int("23") / p_long(-1))
    assertEquals(big_int("1"), big_int("23") / p_long(23))
    assertEquals(big_int("0"), big_int("23") / p_long(-32))
    assertEquals(big_int("0"), big_int("23") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / p_long(0))
    assertEquals(big_int("-32"), big_int("-32") / p_long(1))
    assertEquals(big_int("32"), big_int("-32") / p_long(-1))
    assertEquals(big_int("-1"), big_int("-32") / p_long(23))
    assertEquals(big_int("1"), big_int("-32") / p_long(-32))
    assertEquals(big_int("0"), big_int("-32") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / p_long(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_long(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / p_long(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / p_long(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / p_long(-32))
    assertEquals(big_int("13385211885"), big_int("123456789012345678901234567890") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("-13385211885"), big_int("123456789012345678901234567890") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / p_long(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_long(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / p_long(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / p_long(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / p_long(-32))
    assertEquals(big_int("-13385211885"), big_int("-123456789012345678901234567890") / p_long(Long.MAX_VALUE))
    assertEquals(big_int("13385211885"), big_int("-123456789012345678901234567890") / p_long(Long.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / p_long(0)))
  }

  function testBigIntegerLongDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / b_long(0))
    assertEquals(big_int("0"), big_int("0") / b_long(1))
    assertEquals(big_int("0"), big_int("0") / b_long(-1))
    assertEquals(big_int("0"), big_int("0") / b_long(23))
    assertEquals(big_int("0"), big_int("0") / b_long(-32))
    assertEquals(big_int("0"), big_int("0") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("0") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / b_long(0))
    assertEquals(big_int("1"), big_int("1") / b_long(1))
    assertEquals(big_int("-1"), big_int("1") / b_long(-1))
    assertEquals(big_int("0"), big_int("1") / b_long(23))
    assertEquals(big_int("0"), big_int("1") / b_long(-32))
    assertEquals(big_int("0"), big_int("1") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("1") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / b_long(0))
    assertEquals(big_int("-1"), big_int("-1") / b_long(1))
    assertEquals(big_int("1"), big_int("-1") / b_long(-1))
    assertEquals(big_int("0"), big_int("-1") / b_long(23))
    assertEquals(big_int("0"), big_int("-1") / b_long(-32))
    assertEquals(big_int("0"), big_int("-1") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-1") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / b_long(0))
    assertEquals(big_int("23"), big_int("23") / b_long(1))
    assertEquals(big_int("-23"), big_int("23") / b_long(-1))
    assertEquals(big_int("1"), big_int("23") / b_long(23))
    assertEquals(big_int("0"), big_int("23") / b_long(-32))
    assertEquals(big_int("0"), big_int("23") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("23") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / b_long(0))
    assertEquals(big_int("-32"), big_int("-32") / b_long(1))
    assertEquals(big_int("32"), big_int("-32") / b_long(-1))
    assertEquals(big_int("-1"), big_int("-32") / b_long(23))
    assertEquals(big_int("1"), big_int("-32") / b_long(-32))
    assertEquals(big_int("0"), big_int("-32") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("0"), big_int("-32") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / b_long(0))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_long(1))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / b_long(-1))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / b_long(23))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / b_long(-32))
    assertEquals(big_int("13385211885"), big_int("123456789012345678901234567890") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("-13385211885"), big_int("123456789012345678901234567890") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / b_long(0))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_long(1))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / b_long(-1))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / b_long(23))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / b_long(-32))
    assertEquals(big_int("-13385211885"), big_int("-123456789012345678901234567890") / b_long(Long.MAX_VALUE))
    assertEquals(big_int("13385211885"), big_int("-123456789012345678901234567890") / b_long(Long.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") / b_long(0)))
  }

  function testBigIntegerPFloatDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") / p_float(0.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_float(1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_float(-1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_float(23.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / p_float(23.123))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_float(-32.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.NaN_))
    assertEquals(big_decimal("0E-31"), big_int("0") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E+46"), big_int("0") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") / p_float(0.0))
    assertEquals(big_decimal("1"), big_int("1") / p_float(1.0))
    assertEquals(big_decimal("-1"), big_int("1") / p_float(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_int("1") / p_float(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_int("1") / p_float(23.123))
    assertEquals(big_decimal("-0.03125"), big_int("1") / p_float(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_int("1") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.NaN_))
    assertEquals(big_decimal("2.938736023187802717361038561065539E-39"), big_int("1") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("7.142857142857142857142857142857143E+44"), big_int("1") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") / p_float(0.0))
    assertEquals(big_decimal("-1"), big_int("-1") / p_float(1.0))
    assertEquals(big_decimal("1"), big_int("-1") / p_float(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_int("-1") / p_float(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_int("-1") / p_float(23.123))
    assertEquals(big_decimal("0.03125"), big_int("-1") / p_float(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_int("-1") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.NaN_))
    assertEquals(big_decimal("-2.938736023187802717361038561065539E-39"), big_int("-1") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-7.142857142857142857142857142857143E+44"), big_int("-1") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") / p_float(0.0))
    assertEquals(big_decimal("23"), big_int("23") / p_float(1.0))
    assertEquals(big_decimal("-23"), big_int("23") / p_float(-1.0))
    assertEquals(big_decimal("1"), big_int("23") / p_float(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_int("23") / p_float(23.123))
    assertEquals(big_decimal("-0.71875"), big_int("23") / p_float(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_int("23") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.NaN_))
    assertEquals(big_decimal("6.759092853331946249930388690450739E-38"), big_int("23") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.642857142857142857142857142857143E+46"), big_int("23") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") / p_float(0.0))
    assertEquals(big_decimal("-32"), big_int("-32") / p_float(1.0))
    assertEquals(big_decimal("32"), big_int("-32") / p_float(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_int("-32") / p_float(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_int("-32") / p_float(23.123))
    assertEquals(big_decimal("1"), big_int("-32") / p_float(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_int("-32") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.NaN_))
    assertEquals(big_decimal("-9.403955274200968695555323395409724E-38"), big_int("-32") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-2.285714285714285714285714285714286E+46"), big_int("-32") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") / p_float(0.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / p_float(1.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / p_float(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.652174"), big_int("123456789012345678901234567890") / p_float(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.671582"), big_int("123456789012345678901234567890") / p_float(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.5625"), big_int("123456789012345678901234567890") / p_float(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.068277"), big_int("123456789012345678901234567890") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.NaN_))
    assertEquals(big_decimal("3.628069131776763587686360103308326E-10"), big_int("123456789012345678901234567890") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("8.818342072310405635802469135E+73"), big_int("123456789012345678901234567890") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") / p_float(0.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / p_float(1.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / p_float(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.652174"), big_int("-123456789012345678901234567890") / p_float(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.671582"), big_int("-123456789012345678901234567890") / p_float(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.5625"), big_int("-123456789012345678901234567890") / p_float(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.068277"), big_int("-123456789012345678901234567890") / p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.NaN_))
    assertEquals(big_decimal("-3.628069131776763587686360103308326E-10"), big_int("-123456789012345678901234567890") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-8.818342072310405635802469135E+73"), big_int("-123456789012345678901234567890") / p_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") / p_float(0.0)))
  }

  function testBigIntegerFloatDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") / b_float(0.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_float(1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_float(-1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_float(23.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / b_float(23.123))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_float(-32.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.NaN_))
    assertEquals(big_decimal("0E-31"), big_int("0") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E+46"), big_int("0") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") / b_float(0.0))
    assertEquals(big_decimal("1"), big_int("1") / b_float(1.0))
    assertEquals(big_decimal("-1"), big_int("1") / b_float(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_int("1") / b_float(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_int("1") / b_float(23.123))
    assertEquals(big_decimal("-0.03125"), big_int("1") / b_float(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_int("1") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.NaN_))
    assertEquals(big_decimal("2.938736023187802717361038561065539E-39"), big_int("1") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("7.142857142857142857142857142857143E+44"), big_int("1") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") / b_float(0.0))
    assertEquals(big_decimal("-1"), big_int("-1") / b_float(1.0))
    assertEquals(big_decimal("1"), big_int("-1") / b_float(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_int("-1") / b_float(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_int("-1") / b_float(23.123))
    assertEquals(big_decimal("0.03125"), big_int("-1") / b_float(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_int("-1") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.NaN_))
    assertEquals(big_decimal("-2.938736023187802717361038561065539E-39"), big_int("-1") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-7.142857142857142857142857142857143E+44"), big_int("-1") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") / b_float(0.0))
    assertEquals(big_decimal("23"), big_int("23") / b_float(1.0))
    assertEquals(big_decimal("-23"), big_int("23") / b_float(-1.0))
    assertEquals(big_decimal("1"), big_int("23") / b_float(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_int("23") / b_float(23.123))
    assertEquals(big_decimal("-0.71875"), big_int("23") / b_float(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_int("23") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.NaN_))
    assertEquals(big_decimal("6.759092853331946249930388690450739E-38"), big_int("23") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.642857142857142857142857142857143E+46"), big_int("23") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") / b_float(0.0))
    assertEquals(big_decimal("-32"), big_int("-32") / b_float(1.0))
    assertEquals(big_decimal("32"), big_int("-32") / b_float(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_int("-32") / b_float(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_int("-32") / b_float(23.123))
    assertEquals(big_decimal("1"), big_int("-32") / b_float(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_int("-32") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.NaN_))
    assertEquals(big_decimal("-9.403955274200968695555323395409724E-38"), big_int("-32") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-2.285714285714285714285714285714286E+46"), big_int("-32") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") / b_float(0.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / b_float(1.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / b_float(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.652174"), big_int("123456789012345678901234567890") / b_float(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.671582"), big_int("123456789012345678901234567890") / b_float(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.5625"), big_int("123456789012345678901234567890") / b_float(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.068277"), big_int("123456789012345678901234567890") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.NaN_))
    assertEquals(big_decimal("3.628069131776763587686360103308326E-10"), big_int("123456789012345678901234567890") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("8.818342072310405635802469135E+73"), big_int("123456789012345678901234567890") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") / b_float(0.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / b_float(1.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / b_float(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.652174"), big_int("-123456789012345678901234567890") / b_float(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.671582"), big_int("-123456789012345678901234567890") / b_float(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.5625"), big_int("-123456789012345678901234567890") / b_float(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.068277"), big_int("-123456789012345678901234567890") / b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.NaN_))
    assertEquals(big_decimal("-3.628069131776763587686360103308326E-10"), big_int("-123456789012345678901234567890") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-8.818342072310405635802469135E+73"), big_int("-123456789012345678901234567890") / b_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") / b_float(0.0)))
  }

  function testBigIntegerPDoubleDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") / p_double(0.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_double(1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_double(-1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_double(23.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / p_double(23.123))
    assertEquals(big_decimal("0E+1"), big_int("0") / p_double(-32.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.NaN_))
    assertEquals(big_decimal("0E-292"), big_int("0") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E+325"), big_int("0") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") / p_double(0.0))
    assertEquals(big_decimal("1"), big_int("1") / p_double(1.0))
    assertEquals(big_decimal("-1"), big_int("1") / p_double(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_int("1") / p_double(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_int("1") / p_double(23.123))
    assertEquals(big_decimal("-0.03125"), big_int("1") / p_double(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_int("1") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.NaN_))
    assertEquals(big_decimal("5.562684646268004100511936235978403E-309"), big_int("1") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.040816326530612244897959183673469E+323"), big_int("1") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") / p_double(0.0))
    assertEquals(big_decimal("-1"), big_int("-1") / p_double(1.0))
    assertEquals(big_decimal("1"), big_int("-1") / p_double(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_int("-1") / p_double(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_int("-1") / p_double(23.123))
    assertEquals(big_decimal("0.03125"), big_int("-1") / p_double(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_int("-1") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.NaN_))
    assertEquals(big_decimal("-5.562684646268004100511936235978403E-309"), big_int("-1") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.040816326530612244897959183673469E+323"), big_int("-1") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") / p_double(0.0))
    assertEquals(big_decimal("23"), big_int("23") / p_double(1.0))
    assertEquals(big_decimal("-23"), big_int("23") / p_double(-1.0))
    assertEquals(big_decimal("1"), big_int("23") / p_double(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_int("23") / p_double(23.123))
    assertEquals(big_decimal("-0.71875"), big_int("23") / p_double(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_int("23") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.NaN_))
    assertEquals(big_decimal("1.279417468641640943117745334275033E-307"), big_int("23") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.693877551020408163265306122448980E+324"), big_int("23") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") / p_double(0.0))
    assertEquals(big_decimal("-32"), big_int("-32") / p_double(1.0))
    assertEquals(big_decimal("32"), big_int("-32") / p_double(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_int("-32") / p_double(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_int("-32") / p_double(23.123))
    assertEquals(big_decimal("1"), big_int("-32") / p_double(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_int("-32") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.NaN_))
    assertEquals(big_decimal("-1.780059086805761312163819595513089E-307"), big_int("-32") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.530612244897959183673469387755102E+324"), big_int("-32") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") / p_double(0.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / p_double(1.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / p_double(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.652174"), big_int("123456789012345678901234567890") / p_double(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.671582"), big_int("123456789012345678901234567890") / p_double(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.5625"), big_int("123456789012345678901234567890") / p_double(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.068277"), big_int("123456789012345678901234567890") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.NaN_))
    assertEquals(big_decimal("6.867511847165237381596892776819221E-280"), big_int("123456789012345678901234567890") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.519526306374401610229276895714286E+352"), big_int("123456789012345678901234567890") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") / p_double(0.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / p_double(1.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / p_double(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.652174"), big_int("-123456789012345678901234567890") / p_double(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.671582"), big_int("-123456789012345678901234567890") / p_double(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.5625"), big_int("-123456789012345678901234567890") / p_double(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.068277"), big_int("-123456789012345678901234567890") / p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.NaN_))
    assertEquals(big_decimal("-6.867511847165237381596892776819221E-280"), big_int("-123456789012345678901234567890") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.519526306374401610229276895714286E+352"), big_int("-123456789012345678901234567890") / p_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") / p_double(0.0)))
  }

  function testBigIntegerDoubleDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") / b_double(0.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_double(1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_double(-1.0))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_double(23.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / b_double(23.123))
    assertEquals(big_decimal("0E+1"), big_int("0") / b_double(-32.0))
    assertEquals(big_decimal("0E+3"), big_int("0") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.NaN_))
    assertEquals(big_decimal("0E-292"), big_int("0") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E+325"), big_int("0") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") / b_double(0.0))
    assertEquals(big_decimal("1"), big_int("1") / b_double(1.0))
    assertEquals(big_decimal("-1"), big_int("1") / b_double(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_int("1") / b_double(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_int("1") / b_double(23.123))
    assertEquals(big_decimal("-0.03125"), big_int("1") / b_double(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_int("1") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.NaN_))
    assertEquals(big_decimal("5.562684646268004100511936235978403E-309"), big_int("1") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.040816326530612244897959183673469E+323"), big_int("1") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") / b_double(0.0))
    assertEquals(big_decimal("-1"), big_int("-1") / b_double(1.0))
    assertEquals(big_decimal("1"), big_int("-1") / b_double(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_int("-1") / b_double(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_int("-1") / b_double(23.123))
    assertEquals(big_decimal("0.03125"), big_int("-1") / b_double(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_int("-1") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.NaN_))
    assertEquals(big_decimal("-5.562684646268004100511936235978403E-309"), big_int("-1") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.040816326530612244897959183673469E+323"), big_int("-1") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") / b_double(0.0))
    assertEquals(big_decimal("23"), big_int("23") / b_double(1.0))
    assertEquals(big_decimal("-23"), big_int("23") / b_double(-1.0))
    assertEquals(big_decimal("1"), big_int("23") / b_double(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_int("23") / b_double(23.123))
    assertEquals(big_decimal("-0.71875"), big_int("23") / b_double(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_int("23") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.NaN_))
    assertEquals(big_decimal("1.279417468641640943117745334275033E-307"), big_int("23") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.693877551020408163265306122448980E+324"), big_int("23") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") / b_double(0.0))
    assertEquals(big_decimal("-32"), big_int("-32") / b_double(1.0))
    assertEquals(big_decimal("32"), big_int("-32") / b_double(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_int("-32") / b_double(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_int("-32") / b_double(23.123))
    assertEquals(big_decimal("1"), big_int("-32") / b_double(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_int("-32") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.NaN_))
    assertEquals(big_decimal("-1.780059086805761312163819595513089E-307"), big_int("-32") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.530612244897959183673469387755102E+324"), big_int("-32") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") / b_double(0.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / b_double(1.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("123456789012345678901234567890") / b_double(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.652174"), big_int("123456789012345678901234567890") / b_double(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.671582"), big_int("123456789012345678901234567890") / b_double(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.5625"), big_int("123456789012345678901234567890") / b_double(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.068277"), big_int("123456789012345678901234567890") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.NaN_))
    assertEquals(big_decimal("6.867511847165237381596892776819221E-280"), big_int("123456789012345678901234567890") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.519526306374401610229276895714286E+352"), big_int("123456789012345678901234567890") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") / b_double(0.0))
    assertEquals(big_decimal("-1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / b_double(1.0))
    assertEquals(big_decimal("1.2345678901234567890123456789E+29"), big_int("-123456789012345678901234567890") / b_double(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.652174"), big_int("-123456789012345678901234567890") / b_double(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.671582"), big_int("-123456789012345678901234567890") / b_double(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.5625"), big_int("-123456789012345678901234567890") / b_double(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.068277"), big_int("-123456789012345678901234567890") / b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.NaN_))
    assertEquals(big_decimal("-6.867511847165237381596892776819221E-280"), big_int("-123456789012345678901234567890") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.519526306374401610229276895714286E+352"), big_int("-123456789012345678901234567890") / b_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") / b_double(0.0)))
  }

  function testBigIntegerBigIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("0") / big_int("0"))
    assertEquals(big_int("0"), big_int("0") / big_int("1"))
    assertEquals(big_int("0"), big_int("0") / big_int("-1"))
    assertEquals(big_int("0"), big_int("0") / big_int("23"))
    assertEquals(big_int("0"), big_int("0") / big_int("-32"))
    assertEquals(big_int("0"), big_int("0") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), big_int("0") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("1") / big_int("0"))
    assertEquals(big_int("1"), big_int("1") / big_int("1"))
    assertEquals(big_int("-1"), big_int("1") / big_int("-1"))
    assertEquals(big_int("0"), big_int("1") / big_int("23"))
    assertEquals(big_int("0"), big_int("1") / big_int("-32"))
    assertEquals(big_int("0"), big_int("1") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), big_int("1") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-1") / big_int("0"))
    assertEquals(big_int("-1"), big_int("-1") / big_int("1"))
    assertEquals(big_int("1"), big_int("-1") / big_int("-1"))
    assertEquals(big_int("0"), big_int("-1") / big_int("23"))
    assertEquals(big_int("0"), big_int("-1") / big_int("-32"))
    assertEquals(big_int("0"), big_int("-1") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), big_int("-1") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("23") / big_int("0"))
    assertEquals(big_int("23"), big_int("23") / big_int("1"))
    assertEquals(big_int("-23"), big_int("23") / big_int("-1"))
    assertEquals(big_int("1"), big_int("23") / big_int("23"))
    assertEquals(big_int("0"), big_int("23") / big_int("-32"))
    assertEquals(big_int("0"), big_int("23") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), big_int("23") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-32") / big_int("0"))
    assertEquals(big_int("-32"), big_int("-32") / big_int("1"))
    assertEquals(big_int("32"), big_int("-32") / big_int("-1"))
    assertEquals(big_int("-1"), big_int("-32") / big_int("23"))
    assertEquals(big_int("1"), big_int("-32") / big_int("-32"))
    assertEquals(big_int("0"), big_int("-32") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), big_int("-32") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("123456789012345678901234567890") / big_int("0"))
    assertEquals(big_int("123456789012345678901234567890"), big_int("123456789012345678901234567890") / big_int("1"))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / big_int("-1"))
    assertEquals(big_int("5367686478797638213097155125"), big_int("123456789012345678901234567890") / big_int("23"))
    assertEquals(big_int("-3858024656635802465663580246"), big_int("123456789012345678901234567890") / big_int("-32"))
    assertEquals(big_int("1"), big_int("123456789012345678901234567890") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("-1"), big_int("123456789012345678901234567890") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> big_int("-123456789012345678901234567890") / big_int("0"))
    assertEquals(big_int("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / big_int("1"))
    assertEquals(big_int("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / big_int("-1"))
    assertEquals(big_int("-5367686478797638213097155125"), big_int("-123456789012345678901234567890") / big_int("23"))
    assertEquals(big_int("3858024656635802465663580246"), big_int("-123456789012345678901234567890") / big_int("-32"))
    assertEquals(big_int("-1"), big_int("-123456789012345678901234567890") / big_int("123456789012345678901234567890"))
    assertEquals(big_int("1"), big_int("-123456789012345678901234567890") / big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(big_int("0") / big_int("0")))
  }

  function testBigIntegerBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") / big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("0") / big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("0") / big_decimal("-1"))
    assertEquals(big_decimal("0"), big_int("0") / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), big_int("0") / big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_int("0") / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), big_int("0") / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), big_int("0") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), big_int("0") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") / big_decimal("0"))
    assertEquals(big_decimal("1"), big_int("1") / big_decimal("1"))
    assertEquals(big_decimal("-1"), big_int("1") / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_int("1") / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_int("1") / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), big_int("1") / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_int("1") / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), big_int("1") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), big_int("1") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") / big_decimal("0"))
    assertEquals(big_decimal("-1"), big_int("-1") / big_decimal("1"))
    assertEquals(big_decimal("1"), big_int("-1") / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_int("-1") / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_int("-1") / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), big_int("-1") / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_int("-1") / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), big_int("-1") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), big_int("-1") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") / big_decimal("0"))
    assertEquals(big_decimal("23"), big_int("23") / big_decimal("1"))
    assertEquals(big_decimal("-23"), big_int("23") / big_decimal("-1"))
    assertEquals(big_decimal("1"), big_int("23") / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_int("23") / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), big_int("23") / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_int("23") / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), big_int("23") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), big_int("23") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") / big_decimal("0"))
    assertEquals(big_decimal("-32"), big_int("-32") / big_decimal("1"))
    assertEquals(big_decimal("32"), big_int("-32") / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_int("-32") / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_int("-32") / big_decimal("23.123"))
    assertEquals(big_decimal("1"), big_int("-32") / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_int("-32") / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), big_int("-32") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), big_int("-32") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") / big_decimal("0"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") / big_decimal("1"))
    assertEquals(big_decimal("-123456789012345678901234567890"), big_int("123456789012345678901234567890") / big_decimal("-1"))
    assertEquals(big_decimal("5367686478797638213097155125.652174"), big_int("123456789012345678901234567890") / big_decimal("23"))
    assertEquals(big_decimal("5339133720206966176587578077.671582"), big_int("123456789012345678901234567890") / big_decimal("23.123"))
    assertEquals(big_decimal("-3858024656635802465663580246.5625"), big_int("123456789012345678901234567890") / big_decimal("-32"))
    assertEquals(big_decimal("-3803820218521865876917505789.068277"), big_int("123456789012345678901234567890") / big_decimal("-32.456"))
    assertEquals(big_decimal("0.9999999999999999999999999999990000"), big_int("123456789012345678901234567890") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-0.9999999999999999999999999999990000"), big_int("123456789012345678901234567890") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") / big_decimal("0"))
    assertEquals(big_decimal("-123456789012345678901234567890"), big_int("-123456789012345678901234567890") / big_decimal("1"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") / big_decimal("-1"))
    assertEquals(big_decimal("-5367686478797638213097155125.652174"), big_int("-123456789012345678901234567890") / big_decimal("23"))
    assertEquals(big_decimal("-5339133720206966176587578077.671582"), big_int("-123456789012345678901234567890") / big_decimal("23.123"))
    assertEquals(big_decimal("3858024656635802465663580246.5625"), big_int("-123456789012345678901234567890") / big_decimal("-32"))
    assertEquals(big_decimal("3803820218521865876917505789.068277"), big_int("-123456789012345678901234567890") / big_decimal("-32.456"))
    assertEquals(big_decimal("-0.9999999999999999999999999999990000"), big_int("-123456789012345678901234567890") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0.9999999999999999999999999999990000"), big_int("-123456789012345678901234567890") / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(big_int("0") / big_decimal("0")))
  }

}

