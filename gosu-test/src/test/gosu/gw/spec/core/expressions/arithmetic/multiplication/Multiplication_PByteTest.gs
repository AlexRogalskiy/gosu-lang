package gw.spec.core.expressions.arithmetic.multiplication
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Multiplication_PByteTest extends ArithmeticTestBase {

  function testPBytePByteMultiplication() {
    assertEquals(p_int(0), p_byte(0) !* p_byte(0))
    assertEquals(p_int(0), p_byte(0) !* p_byte(1))
    assertEquals(p_int(0), p_byte(0) !* p_byte(-1))
    assertEquals(p_int(0), p_byte(0) !* p_byte(23))
    assertEquals(p_int(0), p_byte(0) !* p_byte(-32))
    assertEquals(p_int(0), p_byte(0) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_byte(0) !* p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_byte(1) !* p_byte(0))
    assertEquals(p_int(1), p_byte(1) !* p_byte(1))
    assertEquals(p_int(-1), p_byte(1) !* p_byte(-1))
    assertEquals(p_int(23), p_byte(1) !* p_byte(23))
    assertEquals(p_int(-32), p_byte(1) !* p_byte(-32))
    assertEquals(p_int(127), p_byte(1) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-128), p_byte(1) !* p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_byte(-1) !* p_byte(0))
    assertEquals(p_int(-1), p_byte(-1) !* p_byte(1))
    assertEquals(p_int(1), p_byte(-1) !* p_byte(-1))
    assertEquals(p_int(-23), p_byte(-1) !* p_byte(23))
    assertEquals(p_int(32), p_byte(-1) !* p_byte(-32))
    assertEquals(p_int(-127), p_byte(-1) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(128), p_byte(-1) !* p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_byte(23) !* p_byte(0))
    assertEquals(p_int(23), p_byte(23) !* p_byte(1))
    assertEquals(p_int(-23), p_byte(23) !* p_byte(-1))
    assertEquals(p_int(529), p_byte(23) !* p_byte(23))
    assertEquals(p_int(-736), p_byte(23) !* p_byte(-32))
    assertEquals(p_int(2921), p_byte(23) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-2944), p_byte(23) !* p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_byte(-32) !* p_byte(0))
    assertEquals(p_int(-32), p_byte(-32) !* p_byte(1))
    assertEquals(p_int(32), p_byte(-32) !* p_byte(-1))
    assertEquals(p_int(-736), p_byte(-32) !* p_byte(23))
    assertEquals(p_int(1024), p_byte(-32) !* p_byte(-32))
    assertEquals(p_int(-4064), p_byte(-32) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(4096), p_byte(-32) !* p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MAX_VALUE) !* p_byte(0))
    assertEquals(p_int(127), p_byte(Byte.MAX_VALUE) !* p_byte(1))
    assertEquals(p_int(-127), p_byte(Byte.MAX_VALUE) !* p_byte(-1))
    assertEquals(p_int(2921), p_byte(Byte.MAX_VALUE) !* p_byte(23))
    assertEquals(p_int(-4064), p_byte(Byte.MAX_VALUE) !* p_byte(-32))
    assertEquals(p_int(16129), p_byte(Byte.MAX_VALUE) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-16256), p_byte(Byte.MAX_VALUE) !* p_byte(Byte.MIN_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MIN_VALUE) !* p_byte(0))
    assertEquals(p_int(-128), p_byte(Byte.MIN_VALUE) !* p_byte(1))
    assertEquals(p_int(128), p_byte(Byte.MIN_VALUE) !* p_byte(-1))
    assertEquals(p_int(-2944), p_byte(Byte.MIN_VALUE) !* p_byte(23))
    assertEquals(p_int(4096), p_byte(Byte.MIN_VALUE) !* p_byte(-32))
    assertEquals(p_int(-16256), p_byte(Byte.MIN_VALUE) !* p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(16384), p_byte(Byte.MIN_VALUE) !* p_byte(Byte.MIN_VALUE))

    assertEquals(int, statictypeof(p_byte(0) !* p_byte(0)))
  }

  function testPByteByteMultiplication() {
    assertEquals(b_int(0), p_byte(0) !* b_byte(0))
    assertEquals(p_int(0), p_byte(0) !* p_byte(1))
    assertEquals(p_int(0), p_byte(0) !* p_byte(-1))
    assertEquals(b_int(0), p_byte(0) !* b_byte(23))
    assertEquals(b_int(0), p_byte(0) !* b_byte(-32))
    assertEquals(b_int(0), p_byte(0) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_byte(0) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_byte(1) !* b_byte(0))
    assertEquals(p_int(1), p_byte(1) !* p_byte(1))
    assertEquals(p_int(-1), p_byte(1) !* p_byte(-1))
    assertEquals(b_int(23), p_byte(1) !* b_byte(23))
    assertEquals(b_int(-32), p_byte(1) !* b_byte(-32))
    assertEquals(b_int(127), p_byte(1) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-128), p_byte(1) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_byte(-1) !* b_byte(0))
    assertEquals(p_int(-1), p_byte(-1) !* p_byte(1))
    assertEquals(p_int(1), p_byte(-1) !* p_byte(-1))
    assertEquals(b_int(-23), p_byte(-1) !* b_byte(23))
    assertEquals(b_int(32), p_byte(-1) !* b_byte(-32))
    assertEquals(b_int(-127), p_byte(-1) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(128), p_byte(-1) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_byte(23) !* b_byte(0))
    assertEquals(p_int(23), p_byte(23) !* p_byte(1))
    assertEquals(p_int(-23), p_byte(23) !* p_byte(-1))
    assertEquals(b_int(529), p_byte(23) !* b_byte(23))
    assertEquals(b_int(-736), p_byte(23) !* b_byte(-32))
    assertEquals(b_int(2921), p_byte(23) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-2944), p_byte(23) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_byte(-32) !* b_byte(0))
    assertEquals(p_int(-32), p_byte(-32) !* p_byte(1))
    assertEquals(p_int(32), p_byte(-32) !* p_byte(-1))
    assertEquals(b_int(-736), p_byte(-32) !* b_byte(23))
    assertEquals(b_int(1024), p_byte(-32) !* b_byte(-32))
    assertEquals(b_int(-4064), p_byte(-32) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(4096), p_byte(-32) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MAX_VALUE) !* b_byte(0))
    assertEquals(p_int(127), p_byte(Byte.MAX_VALUE) !* p_byte(1))
    assertEquals(p_int(-127), p_byte(Byte.MAX_VALUE) !* p_byte(-1))
    assertEquals(b_int(2921), p_byte(Byte.MAX_VALUE) !* b_byte(23))
    assertEquals(b_int(-4064), p_byte(Byte.MAX_VALUE) !* b_byte(-32))
    assertEquals(b_int(16129), p_byte(Byte.MAX_VALUE) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-16256), p_byte(Byte.MAX_VALUE) !* b_byte(Byte.MIN_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MIN_VALUE) !* b_byte(0))
    assertEquals(p_int(-128), p_byte(Byte.MIN_VALUE) !* p_byte(1))
    assertEquals(p_int(128), p_byte(Byte.MIN_VALUE) !* p_byte(-1))
    assertEquals(b_int(-2944), p_byte(Byte.MIN_VALUE) !* b_byte(23))
    assertEquals(b_int(4096), p_byte(Byte.MIN_VALUE) !* b_byte(-32))
    assertEquals(b_int(-16256), p_byte(Byte.MIN_VALUE) !* b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(16384), p_byte(Byte.MIN_VALUE) !* b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_byte(0) !* b_byte(0)))
  }

  function testPBytePShortMultiplication() {
    assertEquals(p_int(0), p_byte(0) !* p_short(0))
    assertEquals(p_int(0), p_byte(0) !* p_short(1))
    assertEquals(p_int(0), p_byte(0) !* p_short(-1))
    assertEquals(p_int(0), p_byte(0) !* p_short(23))
    assertEquals(p_int(0), p_byte(0) !* p_short(-32))
    assertEquals(p_int(0), p_byte(0) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_byte(0) !* p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_byte(1) !* p_short(0))
    assertEquals(p_int(1), p_byte(1) !* p_short(1))
    assertEquals(p_int(-1), p_byte(1) !* p_short(-1))
    assertEquals(p_int(23), p_byte(1) !* p_short(23))
    assertEquals(p_int(-32), p_byte(1) !* p_short(-32))
    assertEquals(p_int(32767), p_byte(1) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(-32768), p_byte(1) !* p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_byte(-1) !* p_short(0))
    assertEquals(p_int(-1), p_byte(-1) !* p_short(1))
    assertEquals(p_int(1), p_byte(-1) !* p_short(-1))
    assertEquals(p_int(-23), p_byte(-1) !* p_short(23))
    assertEquals(p_int(32), p_byte(-1) !* p_short(-32))
    assertEquals(p_int(-32767), p_byte(-1) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(32768), p_byte(-1) !* p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_byte(23) !* p_short(0))
    assertEquals(p_int(23), p_byte(23) !* p_short(1))
    assertEquals(p_int(-23), p_byte(23) !* p_short(-1))
    assertEquals(p_int(529), p_byte(23) !* p_short(23))
    assertEquals(p_int(-736), p_byte(23) !* p_short(-32))
    assertEquals(p_int(753641), p_byte(23) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(-753664), p_byte(23) !* p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_byte(-32) !* p_short(0))
    assertEquals(p_int(-32), p_byte(-32) !* p_short(1))
    assertEquals(p_int(32), p_byte(-32) !* p_short(-1))
    assertEquals(p_int(-736), p_byte(-32) !* p_short(23))
    assertEquals(p_int(1024), p_byte(-32) !* p_short(-32))
    assertEquals(p_int(-1048544), p_byte(-32) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(1048576), p_byte(-32) !* p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MAX_VALUE) !* p_short(0))
    assertEquals(p_int(127), p_byte(Byte.MAX_VALUE) !* p_short(1))
    assertEquals(p_int(-127), p_byte(Byte.MAX_VALUE) !* p_short(-1))
    assertEquals(p_int(2921), p_byte(Byte.MAX_VALUE) !* p_short(23))
    assertEquals(p_int(-4064), p_byte(Byte.MAX_VALUE) !* p_short(-32))
    assertEquals(p_int(4161409), p_byte(Byte.MAX_VALUE) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(-4161536), p_byte(Byte.MAX_VALUE) !* p_short(Short.MIN_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MIN_VALUE) !* p_short(0))
    assertEquals(p_int(-128), p_byte(Byte.MIN_VALUE) !* p_short(1))
    assertEquals(p_int(128), p_byte(Byte.MIN_VALUE) !* p_short(-1))
    assertEquals(p_int(-2944), p_byte(Byte.MIN_VALUE) !* p_short(23))
    assertEquals(p_int(4096), p_byte(Byte.MIN_VALUE) !* p_short(-32))
    assertEquals(p_int(-4194176), p_byte(Byte.MIN_VALUE) !* p_short(Short.MAX_VALUE))
    assertEquals(p_int(4194304), p_byte(Byte.MIN_VALUE) !* p_short(Short.MIN_VALUE))

    assertEquals(int, statictypeof(p_byte(0) !* p_short(0)))
  }

  function testPByteShortMultiplication() {
    assertEquals(b_int(0), p_byte(0) !* b_short(0))
    assertEquals(b_int(0), p_byte(0) !* b_short(1))
    assertEquals(b_int(0), p_byte(0) !* b_short(-1))
    assertEquals(b_int(0), p_byte(0) !* b_short(23))
    assertEquals(b_int(0), p_byte(0) !* b_short(-32))
    assertEquals(b_int(0), p_byte(0) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_byte(0) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_byte(1) !* b_short(0))
    assertEquals(b_int(1), p_byte(1) !* b_short(1))
    assertEquals(b_int(-1), p_byte(1) !* b_short(-1))
    assertEquals(b_int(23), p_byte(1) !* b_short(23))
    assertEquals(b_int(-32), p_byte(1) !* b_short(-32))
    assertEquals(b_int(32767), p_byte(1) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(-32768), p_byte(1) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_byte(-1) !* b_short(0))
    assertEquals(b_int(-1), p_byte(-1) !* b_short(1))
    assertEquals(b_int(1), p_byte(-1) !* b_short(-1))
    assertEquals(b_int(-23), p_byte(-1) !* b_short(23))
    assertEquals(b_int(32), p_byte(-1) !* b_short(-32))
    assertEquals(b_int(-32767), p_byte(-1) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(32768), p_byte(-1) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_byte(23) !* b_short(0))
    assertEquals(b_int(23), p_byte(23) !* b_short(1))
    assertEquals(b_int(-23), p_byte(23) !* b_short(-1))
    assertEquals(b_int(529), p_byte(23) !* b_short(23))
    assertEquals(b_int(-736), p_byte(23) !* b_short(-32))
    assertEquals(b_int(753641), p_byte(23) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(-753664), p_byte(23) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_byte(-32) !* b_short(0))
    assertEquals(b_int(-32), p_byte(-32) !* b_short(1))
    assertEquals(b_int(32), p_byte(-32) !* b_short(-1))
    assertEquals(b_int(-736), p_byte(-32) !* b_short(23))
    assertEquals(b_int(1024), p_byte(-32) !* b_short(-32))
    assertEquals(b_int(-1048544), p_byte(-32) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(1048576), p_byte(-32) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MAX_VALUE) !* b_short(0))
    assertEquals(b_int(127), p_byte(Byte.MAX_VALUE) !* b_short(1))
    assertEquals(b_int(-127), p_byte(Byte.MAX_VALUE) !* b_short(-1))
    assertEquals(b_int(2921), p_byte(Byte.MAX_VALUE) !* b_short(23))
    assertEquals(b_int(-4064), p_byte(Byte.MAX_VALUE) !* b_short(-32))
    assertEquals(b_int(4161409), p_byte(Byte.MAX_VALUE) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(-4161536), p_byte(Byte.MAX_VALUE) !* b_short(Short.MIN_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MIN_VALUE) !* b_short(0))
    assertEquals(b_int(-128), p_byte(Byte.MIN_VALUE) !* b_short(1))
    assertEquals(b_int(128), p_byte(Byte.MIN_VALUE) !* b_short(-1))
    assertEquals(b_int(-2944), p_byte(Byte.MIN_VALUE) !* b_short(23))
    assertEquals(b_int(4096), p_byte(Byte.MIN_VALUE) !* b_short(-32))
    assertEquals(b_int(-4194176), p_byte(Byte.MIN_VALUE) !* b_short(Short.MAX_VALUE))
    assertEquals(b_int(4194304), p_byte(Byte.MIN_VALUE) !* b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_byte(0) !* b_short(0)))
  }

  function testPBytePCharMultiplication() {
    assertEquals(p_int(0), p_byte(0) !* p_char(0))
    assertEquals(p_int(0), p_byte(0) !* p_char(1))
    assertEquals(p_int(0), p_byte(0) !* p_char(23))
    assertEquals(p_int(0), p_byte(0) !* p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_byte(1) !* p_char(0))
    assertEquals(p_int(1), p_byte(1) !* p_char(1))
    assertEquals(p_int(23), p_byte(1) !* p_char(23))
    assertEquals(p_int(65535), p_byte(1) !* p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_byte(-1) !* p_char(0))
    assertEquals(p_int(-1), p_byte(-1) !* p_char(1))
    assertEquals(p_int(-23), p_byte(-1) !* p_char(23))
    assertEquals(p_int(-65535), p_byte(-1) !* p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_byte(23) !* p_char(0))
    assertEquals(p_int(23), p_byte(23) !* p_char(1))
    assertEquals(p_int(529), p_byte(23) !* p_char(23))
    assertEquals(p_int(1507305), p_byte(23) !* p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_byte(-32) !* p_char(0))
    assertEquals(p_int(-32), p_byte(-32) !* p_char(1))
    assertEquals(p_int(-736), p_byte(-32) !* p_char(23))
    assertEquals(p_int(-2097120), p_byte(-32) !* p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MAX_VALUE) !* p_char(0))
    assertEquals(p_int(127), p_byte(Byte.MAX_VALUE) !* p_char(1))
    assertEquals(p_int(2921), p_byte(Byte.MAX_VALUE) !* p_char(23))
    assertEquals(p_int(8322945), p_byte(Byte.MAX_VALUE) !* p_char(Character.MAX_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MIN_VALUE) !* p_char(0))
    assertEquals(p_int(-128), p_byte(Byte.MIN_VALUE) !* p_char(1))
    assertEquals(p_int(-2944), p_byte(Byte.MIN_VALUE) !* p_char(23))
    assertEquals(p_int(-8388480), p_byte(Byte.MIN_VALUE) !* p_char(Character.MAX_VALUE))

    assertEquals(int, statictypeof(p_byte(0) !* p_char(0)))
  }

  function testPByteCharacterMultiplication() {
    assertEquals(b_int(0), p_byte(0) !* b_char(0))
    assertEquals(b_int(0), p_byte(0) !* b_char(1))
    assertEquals(b_int(0), p_byte(0) !* b_char(23))
    assertEquals(b_int(0), p_byte(0) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_byte(1) !* b_char(0))
    assertEquals(b_int(1), p_byte(1) !* b_char(1))
    assertEquals(b_int(23), p_byte(1) !* b_char(23))
    assertEquals(b_int(65535), p_byte(1) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_byte(-1) !* b_char(0))
    assertEquals(b_int(-1), p_byte(-1) !* b_char(1))
    assertEquals(b_int(-23), p_byte(-1) !* b_char(23))
    assertEquals(b_int(-65535), p_byte(-1) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_byte(23) !* b_char(0))
    assertEquals(b_int(23), p_byte(23) !* b_char(1))
    assertEquals(b_int(529), p_byte(23) !* b_char(23))
    assertEquals(b_int(1507305), p_byte(23) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_byte(-32) !* b_char(0))
    assertEquals(b_int(-32), p_byte(-32) !* b_char(1))
    assertEquals(b_int(-736), p_byte(-32) !* b_char(23))
    assertEquals(b_int(-2097120), p_byte(-32) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MAX_VALUE) !* b_char(0))
    assertEquals(b_int(127), p_byte(Byte.MAX_VALUE) !* b_char(1))
    assertEquals(b_int(2921), p_byte(Byte.MAX_VALUE) !* b_char(23))
    assertEquals(b_int(8322945), p_byte(Byte.MAX_VALUE) !* b_char(Character.MAX_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MIN_VALUE) !* b_char(0))
    assertEquals(b_int(-128), p_byte(Byte.MIN_VALUE) !* b_char(1))
    assertEquals(b_int(-2944), p_byte(Byte.MIN_VALUE) !* b_char(23))
    assertEquals(b_int(-8388480), p_byte(Byte.MIN_VALUE) !* b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(p_byte(0) !* b_char(0)))
  }

  function testPBytePIntMultiplication() {
    assertEquals(p_int(0), p_byte(0) !* p_int(0))
    assertEquals(p_int(0), p_byte(0) !* p_int(1))
    assertEquals(p_int(0), p_byte(0) !* p_int(-1))
    assertEquals(p_int(0), p_byte(0) !* p_int(23))
    assertEquals(p_int(0), p_byte(0) !* p_int(-32))
    assertEquals(p_int(0), p_byte(0) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_byte(0) !* p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_byte(1) !* p_int(0))
    assertEquals(p_int(1), p_byte(1) !* p_int(1))
    assertEquals(p_int(-1), p_byte(1) !* p_int(-1))
    assertEquals(p_int(23), p_byte(1) !* p_int(23))
    assertEquals(p_int(-32), p_byte(1) !* p_int(-32))
    assertEquals(p_int(2147483647), p_byte(1) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_byte(1) !* p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_byte(-1) !* p_int(0))
    assertEquals(p_int(-1), p_byte(-1) !* p_int(1))
    assertEquals(p_int(1), p_byte(-1) !* p_int(-1))
    assertEquals(p_int(-23), p_byte(-1) !* p_int(23))
    assertEquals(p_int(32), p_byte(-1) !* p_int(-32))
    assertEquals(p_int(-2147483647), p_byte(-1) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_byte(-1) !* p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_byte(23) !* p_int(0))
    assertEquals(p_int(23), p_byte(23) !* p_int(1))
    assertEquals(p_int(-23), p_byte(23) !* p_int(-1))
    assertEquals(p_int(529), p_byte(23) !* p_int(23))
    assertEquals(p_int(-736), p_byte(23) !* p_int(-32))
    assertEquals(p_int(2147483625), p_byte(23) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_byte(23) !* p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_byte(-32) !* p_int(0))
    assertEquals(p_int(-32), p_byte(-32) !* p_int(1))
    assertEquals(p_int(32), p_byte(-32) !* p_int(-1))
    assertEquals(p_int(-736), p_byte(-32) !* p_int(23))
    assertEquals(p_int(1024), p_byte(-32) !* p_int(-32))
    assertEquals(p_int(32), p_byte(-32) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_byte(-32) !* p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MAX_VALUE) !* p_int(0))
    assertEquals(p_int(127), p_byte(Byte.MAX_VALUE) !* p_int(1))
    assertEquals(p_int(-127), p_byte(Byte.MAX_VALUE) !* p_int(-1))
    assertEquals(p_int(2921), p_byte(Byte.MAX_VALUE) !* p_int(23))
    assertEquals(p_int(-4064), p_byte(Byte.MAX_VALUE) !* p_int(-32))
    assertEquals(p_int(2147483521), p_byte(Byte.MAX_VALUE) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-2147483648), p_byte(Byte.MAX_VALUE) !* p_int(Integer.MIN_VALUE))

    assertEquals(p_int(0), p_byte(Byte.MIN_VALUE) !* p_int(0))
    assertEquals(p_int(-128), p_byte(Byte.MIN_VALUE) !* p_int(1))
    assertEquals(p_int(128), p_byte(Byte.MIN_VALUE) !* p_int(-1))
    assertEquals(p_int(-2944), p_byte(Byte.MIN_VALUE) !* p_int(23))
    assertEquals(p_int(4096), p_byte(Byte.MIN_VALUE) !* p_int(-32))
    assertEquals(p_int(128), p_byte(Byte.MIN_VALUE) !* p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_byte(Byte.MIN_VALUE) !* p_int(Integer.MIN_VALUE))

    assertEquals(int, statictypeof(p_byte(0) !* p_int(0)))
  }

  function testPByteIntegerMultiplication() {
    assertEquals(b_int(0), p_byte(0) !* b_int(0))
    assertEquals(b_int(0), p_byte(0) !* b_int(1))
    assertEquals(b_int(0), p_byte(0) !* b_int(-1))
    assertEquals(b_int(0), p_byte(0) !* b_int(23))
    assertEquals(b_int(0), p_byte(0) !* b_int(-32))
    assertEquals(b_int(0), p_byte(0) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_byte(0) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_byte(1) !* b_int(0))
    assertEquals(b_int(1), p_byte(1) !* b_int(1))
    assertEquals(b_int(-1), p_byte(1) !* b_int(-1))
    assertEquals(b_int(23), p_byte(1) !* b_int(23))
    assertEquals(b_int(-32), p_byte(1) !* b_int(-32))
    assertEquals(b_int(2147483647), p_byte(1) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_byte(1) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_byte(-1) !* b_int(0))
    assertEquals(b_int(-1), p_byte(-1) !* b_int(1))
    assertEquals(b_int(1), p_byte(-1) !* b_int(-1))
    assertEquals(b_int(-23), p_byte(-1) !* b_int(23))
    assertEquals(b_int(32), p_byte(-1) !* b_int(-32))
    assertEquals(b_int(-2147483647), p_byte(-1) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_byte(-1) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_byte(23) !* b_int(0))
    assertEquals(b_int(23), p_byte(23) !* b_int(1))
    assertEquals(b_int(-23), p_byte(23) !* b_int(-1))
    assertEquals(b_int(529), p_byte(23) !* b_int(23))
    assertEquals(b_int(-736), p_byte(23) !* b_int(-32))
    assertEquals(b_int(2147483625), p_byte(23) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_byte(23) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_byte(-32) !* b_int(0))
    assertEquals(b_int(-32), p_byte(-32) !* b_int(1))
    assertEquals(b_int(32), p_byte(-32) !* b_int(-1))
    assertEquals(b_int(-736), p_byte(-32) !* b_int(23))
    assertEquals(b_int(1024), p_byte(-32) !* b_int(-32))
    assertEquals(b_int(32), p_byte(-32) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_byte(-32) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MAX_VALUE) !* b_int(0))
    assertEquals(b_int(127), p_byte(Byte.MAX_VALUE) !* b_int(1))
    assertEquals(b_int(-127), p_byte(Byte.MAX_VALUE) !* b_int(-1))
    assertEquals(b_int(2921), p_byte(Byte.MAX_VALUE) !* b_int(23))
    assertEquals(b_int(-4064), p_byte(Byte.MAX_VALUE) !* b_int(-32))
    assertEquals(b_int(2147483521), p_byte(Byte.MAX_VALUE) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-2147483648), p_byte(Byte.MAX_VALUE) !* b_int(Integer.MIN_VALUE))

    assertEquals(b_int(0), p_byte(Byte.MIN_VALUE) !* b_int(0))
    assertEquals(b_int(-128), p_byte(Byte.MIN_VALUE) !* b_int(1))
    assertEquals(b_int(128), p_byte(Byte.MIN_VALUE) !* b_int(-1))
    assertEquals(b_int(-2944), p_byte(Byte.MIN_VALUE) !* b_int(23))
    assertEquals(b_int(4096), p_byte(Byte.MIN_VALUE) !* b_int(-32))
    assertEquals(b_int(128), p_byte(Byte.MIN_VALUE) !* b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_byte(Byte.MIN_VALUE) !* b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_byte(0) !* b_int(0)))
  }

  function testPBytePLongMultiplication() {
    assertEquals(p_long(0), p_byte(0) !* p_long(0))
    assertEquals(p_long(0), p_byte(0) !* p_long(1))
    assertEquals(p_long(0), p_byte(0) !* p_long(-1))
    assertEquals(p_long(0), p_byte(0) !* p_long(23))
    assertEquals(p_long(0), p_byte(0) !* p_long(-32))
    assertEquals(p_long(0), p_byte(0) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_byte(0) !* p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_byte(1) !* p_long(0))
    assertEquals(p_long(1), p_byte(1) !* p_long(1))
    assertEquals(p_long(-1), p_byte(1) !* p_long(-1))
    assertEquals(p_long(23), p_byte(1) !* p_long(23))
    assertEquals(p_long(-32), p_byte(1) !* p_long(-32))
    assertEquals(p_long(9223372036854775807), p_byte(1) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_byte(1) !* p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_byte(-1) !* p_long(0))
    assertEquals(p_long(-1), p_byte(-1) !* p_long(1))
    assertEquals(p_long(1), p_byte(-1) !* p_long(-1))
    assertEquals(p_long(-23), p_byte(-1) !* p_long(23))
    assertEquals(p_long(32), p_byte(-1) !* p_long(-32))
    assertEquals(p_long(-9223372036854775807), p_byte(-1) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_byte(-1) !* p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_byte(23) !* p_long(0))
    assertEquals(p_long(23), p_byte(23) !* p_long(1))
    assertEquals(p_long(-23), p_byte(23) !* p_long(-1))
    assertEquals(p_long(529), p_byte(23) !* p_long(23))
    assertEquals(p_long(-736), p_byte(23) !* p_long(-32))
    assertEquals(p_long(9223372036854775785), p_byte(23) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_byte(23) !* p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_byte(-32) !* p_long(0))
    assertEquals(p_long(-32), p_byte(-32) !* p_long(1))
    assertEquals(p_long(32), p_byte(-32) !* p_long(-1))
    assertEquals(p_long(-736), p_byte(-32) !* p_long(23))
    assertEquals(p_long(1024), p_byte(-32) !* p_long(-32))
    assertEquals(p_long(32), p_byte(-32) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_byte(-32) !* p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_byte(Byte.MAX_VALUE) !* p_long(0))
    assertEquals(p_long(127), p_byte(Byte.MAX_VALUE) !* p_long(1))
    assertEquals(p_long(-127), p_byte(Byte.MAX_VALUE) !* p_long(-1))
    assertEquals(p_long(2921), p_byte(Byte.MAX_VALUE) !* p_long(23))
    assertEquals(p_long(-4064), p_byte(Byte.MAX_VALUE) !* p_long(-32))
    assertEquals(p_long(9223372036854775681), p_byte(Byte.MAX_VALUE) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(-9223372036854775808), p_byte(Byte.MAX_VALUE) !* p_long(Long.MIN_VALUE))

    assertEquals(p_long(0), p_byte(Byte.MIN_VALUE) !* p_long(0))
    assertEquals(p_long(-128), p_byte(Byte.MIN_VALUE) !* p_long(1))
    assertEquals(p_long(128), p_byte(Byte.MIN_VALUE) !* p_long(-1))
    assertEquals(p_long(-2944), p_byte(Byte.MIN_VALUE) !* p_long(23))
    assertEquals(p_long(4096), p_byte(Byte.MIN_VALUE) !* p_long(-32))
    assertEquals(p_long(128), p_byte(Byte.MIN_VALUE) !* p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_byte(Byte.MIN_VALUE) !* p_long(Long.MIN_VALUE))

    assertEquals(long, statictypeof(p_byte(0) !* p_long(0)))
  }

  function testPByteLongMultiplication() {
    assertEquals(b_long(0), p_byte(0) !* b_long(0))
    assertEquals(b_long(0), p_byte(0) !* b_long(1))
    assertEquals(b_long(0), p_byte(0) !* b_long(-1))
    assertEquals(b_long(0), p_byte(0) !* b_long(23))
    assertEquals(b_long(0), p_byte(0) !* b_long(-32))
    assertEquals(b_long(0), p_byte(0) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_byte(0) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_byte(1) !* b_long(0))
    assertEquals(b_long(1), p_byte(1) !* b_long(1))
    assertEquals(b_long(-1), p_byte(1) !* b_long(-1))
    assertEquals(b_long(23), p_byte(1) !* b_long(23))
    assertEquals(b_long(-32), p_byte(1) !* b_long(-32))
    assertEquals(b_long(9223372036854775807), p_byte(1) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_byte(1) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_byte(-1) !* b_long(0))
    assertEquals(b_long(-1), p_byte(-1) !* b_long(1))
    assertEquals(b_long(1), p_byte(-1) !* b_long(-1))
    assertEquals(b_long(-23), p_byte(-1) !* b_long(23))
    assertEquals(b_long(32), p_byte(-1) !* b_long(-32))
    assertEquals(b_long(-9223372036854775807), p_byte(-1) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_byte(-1) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_byte(23) !* b_long(0))
    assertEquals(b_long(23), p_byte(23) !* b_long(1))
    assertEquals(b_long(-23), p_byte(23) !* b_long(-1))
    assertEquals(b_long(529), p_byte(23) !* b_long(23))
    assertEquals(b_long(-736), p_byte(23) !* b_long(-32))
    assertEquals(b_long(9223372036854775785), p_byte(23) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_byte(23) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_byte(-32) !* b_long(0))
    assertEquals(b_long(-32), p_byte(-32) !* b_long(1))
    assertEquals(b_long(32), p_byte(-32) !* b_long(-1))
    assertEquals(b_long(-736), p_byte(-32) !* b_long(23))
    assertEquals(b_long(1024), p_byte(-32) !* b_long(-32))
    assertEquals(b_long(32), p_byte(-32) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_byte(-32) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_byte(Byte.MAX_VALUE) !* b_long(0))
    assertEquals(b_long(127), p_byte(Byte.MAX_VALUE) !* b_long(1))
    assertEquals(b_long(-127), p_byte(Byte.MAX_VALUE) !* b_long(-1))
    assertEquals(b_long(2921), p_byte(Byte.MAX_VALUE) !* b_long(23))
    assertEquals(b_long(-4064), p_byte(Byte.MAX_VALUE) !* b_long(-32))
    assertEquals(b_long(9223372036854775681), p_byte(Byte.MAX_VALUE) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(-9223372036854775808), p_byte(Byte.MAX_VALUE) !* b_long(Long.MIN_VALUE))

    assertEquals(b_long(0), p_byte(Byte.MIN_VALUE) !* b_long(0))
    assertEquals(b_long(-128), p_byte(Byte.MIN_VALUE) !* b_long(1))
    assertEquals(b_long(128), p_byte(Byte.MIN_VALUE) !* b_long(-1))
    assertEquals(b_long(-2944), p_byte(Byte.MIN_VALUE) !* b_long(23))
    assertEquals(b_long(4096), p_byte(Byte.MIN_VALUE) !* b_long(-32))
    assertEquals(b_long(128), p_byte(Byte.MIN_VALUE) !* b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_byte(Byte.MIN_VALUE) !* b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(p_byte(0) !* b_long(0)))
  }

  function testPBytePFloatMultiplication() {
    assertEquals(p_float(0.0), p_byte(0) * p_float(0.0))
    assertEquals(p_float(0.0), p_byte(0) * p_float(1.0))
    assertEquals(p_float(-0.0), p_byte(0) * p_float(-1.0))
    assertEquals(p_float(0.0), p_byte(0) * p_float(23.0))
    assertEquals(p_float(0.0), p_byte(0) * p_float(23.123))
    assertEquals(p_float(-0.0), p_byte(0) * p_float(-32.0))
    assertEquals(p_float(-0.0), p_byte(0) * p_float(-32.456))
    assertEquals(p_float(Float.NaN_), p_byte(0) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(0) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(0) * p_float(Float.NaN_))
    assertEquals(p_float(0.0), p_byte(0) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_byte(0) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(0.0), p_byte(1) * p_float(0.0))
    assertEquals(p_float(1.0), p_byte(1) * p_float(1.0))
    assertEquals(p_float(-1.0), p_byte(1) * p_float(-1.0))
    assertEquals(p_float(23.0), p_byte(1) * p_float(23.0))
    assertEquals(p_float(23.123), p_byte(1) * p_float(23.123))
    assertEquals(p_float(-32.0), p_byte(1) * p_float(-32.0))
    assertEquals(p_float(-32.456), p_byte(1) * p_float(-32.456))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(1) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(1) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(1) * p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("3.4028235E38")), p_byte(1) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("1.4E-45")), p_byte(1) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(-0.0), p_byte(-1) * p_float(0.0))
    assertEquals(p_float(-1.0), p_byte(-1) * p_float(1.0))
    assertEquals(p_float(1.0), p_byte(-1) * p_float(-1.0))
    assertEquals(p_float(-23.0), p_byte(-1) * p_float(23.0))
    assertEquals(p_float(-23.123), p_byte(-1) * p_float(23.123))
    assertEquals(p_float(32.0), p_byte(-1) * p_float(-32.0))
    assertEquals(p_float(32.456), p_byte(-1) * p_float(-32.456))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(-1) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(-1) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(-1) * p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-3.4028235E38")), p_byte(-1) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("-1.4E-45")), p_byte(-1) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(0.0), p_byte(23) * p_float(0.0))
    assertEquals(p_float(23.0), p_byte(23) * p_float(1.0))
    assertEquals(p_float(-23.0), p_byte(23) * p_float(-1.0))
    assertEquals(p_float(529.0), p_byte(23) * p_float(23.0))
    assertEquals(p_float(531.829), p_byte(23) * p_float(23.123))
    assertEquals(p_float(-736.0), p_byte(23) * p_float(-32.0))
    assertEquals(p_float(-746.48804), p_byte(23) * p_float(-32.456))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(23) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(23) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(23) * p_float(Float.NaN_))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(23) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("3.2E-44")), p_byte(23) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(-0.0), p_byte(-32) * p_float(0.0))
    assertEquals(p_float(-32.0), p_byte(-32) * p_float(1.0))
    assertEquals(p_float(32.0), p_byte(-32) * p_float(-1.0))
    assertEquals(p_float(-736.0), p_byte(-32) * p_float(23.0))
    assertEquals(p_float(-739.936), p_byte(-32) * p_float(23.123))
    assertEquals(p_float(1024.0), p_byte(-32) * p_float(-32.0))
    assertEquals(p_float(1038.592), p_byte(-32) * p_float(-32.456))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(-32) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(-32) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(-32) * p_float(Float.NaN_))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(-32) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("-4.5E-44")), p_byte(-32) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(0.0), p_byte(Byte.MAX_VALUE) * p_float(0.0))
    assertEquals(p_float(127.0), p_byte(Byte.MAX_VALUE) * p_float(1.0))
    assertEquals(p_float(-127.0), p_byte(Byte.MAX_VALUE) * p_float(-1.0))
    assertEquals(p_float(2921.0), p_byte(Byte.MAX_VALUE) * p_float(23.0))
    assertEquals(p_float(2936.6208), p_byte(Byte.MAX_VALUE) * p_float(23.123))
    assertEquals(p_float(-4064.0), p_byte(Byte.MAX_VALUE) * p_float(-32.0))
    assertEquals(p_float(-4121.912), p_byte(Byte.MAX_VALUE) * p_float(-32.456))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(Byte.MAX_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(Byte.MAX_VALUE) * p_float(Float.NaN_))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("1.78E-43")), p_byte(Byte.MAX_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(p_float(-0.0), p_byte(Byte.MIN_VALUE) * p_float(0.0))
    assertEquals(p_float(-128.0), p_byte(Byte.MIN_VALUE) * p_float(1.0))
    assertEquals(p_float(128.0), p_byte(Byte.MIN_VALUE) * p_float(-1.0))
    assertEquals(p_float(-2944.0), p_byte(Byte.MIN_VALUE) * p_float(23.0))
    assertEquals(p_float(-2959.744), p_byte(Byte.MIN_VALUE) * p_float(23.123))
    assertEquals(p_float(4096.0), p_byte(Byte.MIN_VALUE) * p_float(-32.0))
    assertEquals(p_float(4154.368), p_byte(Byte.MIN_VALUE) * p_float(-32.456))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(Byte.MIN_VALUE) * p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(Byte.MIN_VALUE) * p_float(Float.NaN_))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.parseFloat("-1.794E-43")), p_byte(Byte.MIN_VALUE) * p_float(Float.MIN_VALUE))

    assertEquals(float, statictypeof(p_byte(0) * p_float(0.0)))
  }

  function testPByteFloatMultiplication() {
    assertEquals(b_float(0.0), p_byte(0) * b_float(0.0))
    assertEquals(b_float(0.0), p_byte(0) * b_float(1.0))
    assertEquals(b_float(-0.0), p_byte(0) * b_float(-1.0))
    assertEquals(b_float(0.0), p_byte(0) * b_float(23.0))
    assertEquals(b_float(0.0), p_byte(0) * b_float(23.123))
    assertEquals(b_float(-0.0), p_byte(0) * b_float(-32.0))
    assertEquals(b_float(-0.0), p_byte(0) * b_float(-32.456))
    assertEquals(b_float(Float.NaN_), p_byte(0) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(0) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(0) * b_float(Float.NaN_))
    assertEquals(b_float(0.0), p_byte(0) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_byte(0) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), p_byte(1) * b_float(0.0))
    assertEquals(b_float(1.0), p_byte(1) * b_float(1.0))
    assertEquals(b_float(-1.0), p_byte(1) * b_float(-1.0))
    assertEquals(b_float(23.0), p_byte(1) * b_float(23.0))
    assertEquals(b_float(23.123), p_byte(1) * b_float(23.123))
    assertEquals(b_float(-32.0), p_byte(1) * b_float(-32.0))
    assertEquals(b_float(-32.456), p_byte(1) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(1) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(1) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(1) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), p_byte(1) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), p_byte(1) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), p_byte(-1) * b_float(0.0))
    assertEquals(b_float(-1.0), p_byte(-1) * b_float(1.0))
    assertEquals(b_float(1.0), p_byte(-1) * b_float(-1.0))
    assertEquals(b_float(-23.0), p_byte(-1) * b_float(23.0))
    assertEquals(b_float(-23.123), p_byte(-1) * b_float(23.123))
    assertEquals(b_float(32.0), p_byte(-1) * b_float(-32.0))
    assertEquals(b_float(32.456), p_byte(-1) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(-1) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(-1) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(-1) * b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), p_byte(-1) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), p_byte(-1) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), p_byte(23) * b_float(0.0))
    assertEquals(b_float(23.0), p_byte(23) * b_float(1.0))
    assertEquals(b_float(-23.0), p_byte(23) * b_float(-1.0))
    assertEquals(b_float(529.0), p_byte(23) * b_float(23.0))
    assertEquals(b_float(531.829), p_byte(23) * b_float(23.123))
    assertEquals(b_float(-736.0), p_byte(23) * b_float(-32.0))
    assertEquals(b_float(-746.48804), p_byte(23) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(23) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(23) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(23) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(23) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.2E-44")), p_byte(23) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), p_byte(-32) * b_float(0.0))
    assertEquals(b_float(-32.0), p_byte(-32) * b_float(1.0))
    assertEquals(b_float(32.0), p_byte(-32) * b_float(-1.0))
    assertEquals(b_float(-736.0), p_byte(-32) * b_float(23.0))
    assertEquals(b_float(-739.936), p_byte(-32) * b_float(23.123))
    assertEquals(b_float(1024.0), p_byte(-32) * b_float(-32.0))
    assertEquals(b_float(1038.592), p_byte(-32) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(-32) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(-32) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(-32) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(-32) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.5E-44")), p_byte(-32) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(0.0), p_byte(Byte.MAX_VALUE) * b_float(0.0))
    assertEquals(b_float(127.0), p_byte(Byte.MAX_VALUE) * b_float(1.0))
    assertEquals(b_float(-127.0), p_byte(Byte.MAX_VALUE) * b_float(-1.0))
    assertEquals(b_float(2921.0), p_byte(Byte.MAX_VALUE) * b_float(23.0))
    assertEquals(b_float(2936.6208), p_byte(Byte.MAX_VALUE) * b_float(23.123))
    assertEquals(b_float(-4064.0), p_byte(Byte.MAX_VALUE) * b_float(-32.0))
    assertEquals(b_float(-4121.912), p_byte(Byte.MAX_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(Byte.MAX_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(Byte.MAX_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.78E-43")), p_byte(Byte.MAX_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(b_float(-0.0), p_byte(Byte.MIN_VALUE) * b_float(0.0))
    assertEquals(b_float(-128.0), p_byte(Byte.MIN_VALUE) * b_float(1.0))
    assertEquals(b_float(128.0), p_byte(Byte.MIN_VALUE) * b_float(-1.0))
    assertEquals(b_float(-2944.0), p_byte(Byte.MIN_VALUE) * b_float(23.0))
    assertEquals(b_float(-2959.744), p_byte(Byte.MIN_VALUE) * b_float(23.123))
    assertEquals(b_float(4096.0), p_byte(Byte.MIN_VALUE) * b_float(-32.0))
    assertEquals(b_float(4154.368), p_byte(Byte.MIN_VALUE) * b_float(-32.456))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(Byte.MIN_VALUE) * b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(Byte.MIN_VALUE) * b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.794E-43")), p_byte(Byte.MIN_VALUE) * b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(p_byte(0) * b_float(0.0)))
  }

  function testPBytePDoubleMultiplication() {
    assertEquals(p_double(0.0), p_byte(0) * p_double(0.0))
    assertEquals(p_double(0.0), p_byte(0) * p_double(1.0))
    assertEquals(p_double(-0.0), p_byte(0) * p_double(-1.0))
    assertEquals(p_double(0.0), p_byte(0) * p_double(23.0))
    assertEquals(p_double(0.0), p_byte(0) * p_double(23.123))
    assertEquals(p_double(-0.0), p_byte(0) * p_double(-32.0))
    assertEquals(p_double(-0.0), p_byte(0) * p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_byte(0) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(0) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(0) * p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_byte(0) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_byte(0) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(0.0), p_byte(1) * p_double(0.0))
    assertEquals(p_double(1.0), p_byte(1) * p_double(1.0))
    assertEquals(p_double(-1.0), p_byte(1) * p_double(-1.0))
    assertEquals(p_double(23.0), p_byte(1) * p_double(23.0))
    assertEquals(p_double(23.123), p_byte(1) * p_double(23.123))
    assertEquals(p_double(-32.0), p_byte(1) * p_double(-32.0))
    assertEquals(p_double(-32.456), p_byte(1) * p_double(-32.456))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(1) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(1) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(1) * p_double(Double.NaN_))
    assertEquals(p_double(Double.MAX_VALUE), p_byte(1) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_byte(1) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(-0.0), p_byte(-1) * p_double(0.0))
    assertEquals(p_double(-1.0), p_byte(-1) * p_double(1.0))
    assertEquals(p_double(1.0), p_byte(-1) * p_double(-1.0))
    assertEquals(p_double(-23.0), p_byte(-1) * p_double(23.0))
    assertEquals(p_double(-23.123), p_byte(-1) * p_double(23.123))
    assertEquals(p_double(32.0), p_byte(-1) * p_double(-32.0))
    assertEquals(p_double(32.456), p_byte(-1) * p_double(-32.456))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(-1) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(-1) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(-1) * p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.7976931348623157E308")), p_byte(-1) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-4.9E-324")), p_byte(-1) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(0.0), p_byte(23) * p_double(0.0))
    assertEquals(p_double(23.0), p_byte(23) * p_double(1.0))
    assertEquals(p_double(-23.0), p_byte(23) * p_double(-1.0))
    assertEquals(p_double(529.0), p_byte(23) * p_double(23.0))
    assertEquals(p_double(531.8290000000001), p_byte(23) * p_double(23.123))
    assertEquals(p_double(-736.0), p_byte(23) * p_double(-32.0))
    assertEquals(p_double(-746.488), p_byte(23) * p_double(-32.456))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(23) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(23) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(23) * p_double(Double.NaN_))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(23) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("1.14E-322")), p_byte(23) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(-0.0), p_byte(-32) * p_double(0.0))
    assertEquals(p_double(-32.0), p_byte(-32) * p_double(1.0))
    assertEquals(p_double(32.0), p_byte(-32) * p_double(-1.0))
    assertEquals(p_double(-736.0), p_byte(-32) * p_double(23.0))
    assertEquals(p_double(-739.936), p_byte(-32) * p_double(23.123))
    assertEquals(p_double(1024.0), p_byte(-32) * p_double(-32.0))
    assertEquals(p_double(1038.592), p_byte(-32) * p_double(-32.456))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(-32) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(-32) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(-32) * p_double(Double.NaN_))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(-32) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-1.58E-322")), p_byte(-32) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(0.0), p_byte(Byte.MAX_VALUE) * p_double(0.0))
    assertEquals(p_double(127.0), p_byte(Byte.MAX_VALUE) * p_double(1.0))
    assertEquals(p_double(-127.0), p_byte(Byte.MAX_VALUE) * p_double(-1.0))
    assertEquals(p_double(2921.0), p_byte(Byte.MAX_VALUE) * p_double(23.0))
    assertEquals(p_double(2936.621), p_byte(Byte.MAX_VALUE) * p_double(23.123))
    assertEquals(p_double(-4064.0), p_byte(Byte.MAX_VALUE) * p_double(-32.0))
    assertEquals(p_double(-4121.912), p_byte(Byte.MAX_VALUE) * p_double(-32.456))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(Byte.MAX_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(Byte.MAX_VALUE) * p_double(Double.NaN_))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("6.27E-322")), p_byte(Byte.MAX_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(p_double(-0.0), p_byte(Byte.MIN_VALUE) * p_double(0.0))
    assertEquals(p_double(-128.0), p_byte(Byte.MIN_VALUE) * p_double(1.0))
    assertEquals(p_double(128.0), p_byte(Byte.MIN_VALUE) * p_double(-1.0))
    assertEquals(p_double(-2944.0), p_byte(Byte.MIN_VALUE) * p_double(23.0))
    assertEquals(p_double(-2959.744), p_byte(Byte.MIN_VALUE) * p_double(23.123))
    assertEquals(p_double(4096.0), p_byte(Byte.MIN_VALUE) * p_double(-32.0))
    assertEquals(p_double(4154.368), p_byte(Byte.MIN_VALUE) * p_double(-32.456))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(Byte.MIN_VALUE) * p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(Byte.MIN_VALUE) * p_double(Double.NaN_))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.parseDouble("-6.32E-322")), p_byte(Byte.MIN_VALUE) * p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_byte(0) * p_double(0.0)))
  }

  function testPByteDoubleMultiplication() {
    assertEquals(b_double(0.0), p_byte(0) * b_double(0.0))
    assertEquals(b_double(0.0), p_byte(0) * b_double(1.0))
    assertEquals(b_double(-0.0), p_byte(0) * b_double(-1.0))
    assertEquals(b_double(0.0), p_byte(0) * b_double(23.0))
    assertEquals(b_double(0.0), p_byte(0) * b_double(23.123))
    assertEquals(b_double(-0.0), p_byte(0) * b_double(-32.0))
    assertEquals(b_double(-0.0), p_byte(0) * b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_byte(0) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(0) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(0) * b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_byte(0) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_byte(0) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), p_byte(1) * b_double(0.0))
    assertEquals(b_double(1.0), p_byte(1) * b_double(1.0))
    assertEquals(b_double(-1.0), p_byte(1) * b_double(-1.0))
    assertEquals(b_double(23.0), p_byte(1) * b_double(23.0))
    assertEquals(b_double(23.123), p_byte(1) * b_double(23.123))
    assertEquals(b_double(-32.0), p_byte(1) * b_double(-32.0))
    assertEquals(b_double(-32.456), p_byte(1) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(1) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(1) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(1) * b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), p_byte(1) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_byte(1) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), p_byte(-1) * b_double(0.0))
    assertEquals(b_double(-1.0), p_byte(-1) * b_double(1.0))
    assertEquals(b_double(1.0), p_byte(-1) * b_double(-1.0))
    assertEquals(b_double(-23.0), p_byte(-1) * b_double(23.0))
    assertEquals(b_double(-23.123), p_byte(-1) * b_double(23.123))
    assertEquals(b_double(32.0), p_byte(-1) * b_double(-32.0))
    assertEquals(b_double(32.456), p_byte(-1) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(-1) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(-1) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(-1) * b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7976931348623157E308")), p_byte(-1) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-4.9E-324")), p_byte(-1) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), p_byte(23) * b_double(0.0))
    assertEquals(b_double(23.0), p_byte(23) * b_double(1.0))
    assertEquals(b_double(-23.0), p_byte(23) * b_double(-1.0))
    assertEquals(b_double(529.0), p_byte(23) * b_double(23.0))
    assertEquals(b_double(531.8290000000001), p_byte(23) * b_double(23.123))
    assertEquals(b_double(-736.0), p_byte(23) * b_double(-32.0))
    assertEquals(b_double(-746.488), p_byte(23) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(23) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(23) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(23) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(23) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.14E-322")), p_byte(23) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), p_byte(-32) * b_double(0.0))
    assertEquals(b_double(-32.0), p_byte(-32) * b_double(1.0))
    assertEquals(b_double(32.0), p_byte(-32) * b_double(-1.0))
    assertEquals(b_double(-736.0), p_byte(-32) * b_double(23.0))
    assertEquals(b_double(-739.936), p_byte(-32) * b_double(23.123))
    assertEquals(b_double(1024.0), p_byte(-32) * b_double(-32.0))
    assertEquals(b_double(1038.592), p_byte(-32) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(-32) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(-32) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(-32) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(-32) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-1.58E-322")), p_byte(-32) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(0.0), p_byte(Byte.MAX_VALUE) * b_double(0.0))
    assertEquals(b_double(127.0), p_byte(Byte.MAX_VALUE) * b_double(1.0))
    assertEquals(b_double(-127.0), p_byte(Byte.MAX_VALUE) * b_double(-1.0))
    assertEquals(b_double(2921.0), p_byte(Byte.MAX_VALUE) * b_double(23.0))
    assertEquals(b_double(2936.621), p_byte(Byte.MAX_VALUE) * b_double(23.123))
    assertEquals(b_double(-4064.0), p_byte(Byte.MAX_VALUE) * b_double(-32.0))
    assertEquals(b_double(-4121.912), p_byte(Byte.MAX_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(Byte.MAX_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(Byte.MAX_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(Byte.MAX_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("6.27E-322")), p_byte(Byte.MAX_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(b_double(-0.0), p_byte(Byte.MIN_VALUE) * b_double(0.0))
    assertEquals(b_double(-128.0), p_byte(Byte.MIN_VALUE) * b_double(1.0))
    assertEquals(b_double(128.0), p_byte(Byte.MIN_VALUE) * b_double(-1.0))
    assertEquals(b_double(-2944.0), p_byte(Byte.MIN_VALUE) * b_double(23.0))
    assertEquals(b_double(-2959.744), p_byte(Byte.MIN_VALUE) * b_double(23.123))
    assertEquals(b_double(4096.0), p_byte(Byte.MIN_VALUE) * b_double(-32.0))
    assertEquals(b_double(4154.368), p_byte(Byte.MIN_VALUE) * b_double(-32.456))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(Byte.MIN_VALUE) * b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(Byte.MIN_VALUE) * b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(Byte.MIN_VALUE) * b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-6.32E-322")), p_byte(Byte.MIN_VALUE) * b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_byte(0) * b_double(0.0)))
  }

  function testPByteBigIntegerMultiplication() {
    assertEquals(big_int("0"), p_byte(0) * big_int("0"))
    assertEquals(big_int("0"), p_byte(0) * big_int("1"))
    assertEquals(big_int("0"), p_byte(0) * big_int("-1"))
    assertEquals(big_int("0"), p_byte(0) * big_int("23"))
    assertEquals(big_int("0"), p_byte(0) * big_int("-32"))
    assertEquals(big_int("0"), p_byte(0) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_byte(0) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_byte(1) * big_int("0"))
    assertEquals(big_int("1"), p_byte(1) * big_int("1"))
    assertEquals(big_int("-1"), p_byte(1) * big_int("-1"))
    assertEquals(big_int("23"), p_byte(1) * big_int("23"))
    assertEquals(big_int("-32"), p_byte(1) * big_int("-32"))
    assertEquals(big_int("123456789012345678901234567890"), p_byte(1) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-123456789012345678901234567890"), p_byte(1) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_byte(-1) * big_int("0"))
    assertEquals(big_int("-1"), p_byte(-1) * big_int("1"))
    assertEquals(big_int("1"), p_byte(-1) * big_int("-1"))
    assertEquals(big_int("-23"), p_byte(-1) * big_int("23"))
    assertEquals(big_int("32"), p_byte(-1) * big_int("-32"))
    assertEquals(big_int("-123456789012345678901234567890"), p_byte(-1) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("123456789012345678901234567890"), p_byte(-1) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_byte(23) * big_int("0"))
    assertEquals(big_int("23"), p_byte(23) * big_int("1"))
    assertEquals(big_int("-23"), p_byte(23) * big_int("-1"))
    assertEquals(big_int("529"), p_byte(23) * big_int("23"))
    assertEquals(big_int("-736"), p_byte(23) * big_int("-32"))
    assertEquals(big_int("2839506147283950614728395061470"), p_byte(23) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-2839506147283950614728395061470"), p_byte(23) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_byte(-32) * big_int("0"))
    assertEquals(big_int("-32"), p_byte(-32) * big_int("1"))
    assertEquals(big_int("32"), p_byte(-32) * big_int("-1"))
    assertEquals(big_int("-736"), p_byte(-32) * big_int("23"))
    assertEquals(big_int("1024"), p_byte(-32) * big_int("-32"))
    assertEquals(big_int("-3950617248395061724839506172480"), p_byte(-32) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("3950617248395061724839506172480"), p_byte(-32) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_byte(Byte.MAX_VALUE) * big_int("0"))
    assertEquals(big_int("127"), p_byte(Byte.MAX_VALUE) * big_int("1"))
    assertEquals(big_int("-127"), p_byte(Byte.MAX_VALUE) * big_int("-1"))
    assertEquals(big_int("2921"), p_byte(Byte.MAX_VALUE) * big_int("23"))
    assertEquals(big_int("-4064"), p_byte(Byte.MAX_VALUE) * big_int("-32"))
    assertEquals(big_int("15679012204567901220456790122030"), p_byte(Byte.MAX_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("-15679012204567901220456790122030"), p_byte(Byte.MAX_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(big_int("0"), p_byte(Byte.MIN_VALUE) * big_int("0"))
    assertEquals(big_int("-128"), p_byte(Byte.MIN_VALUE) * big_int("1"))
    assertEquals(big_int("128"), p_byte(Byte.MIN_VALUE) * big_int("-1"))
    assertEquals(big_int("-2944"), p_byte(Byte.MIN_VALUE) * big_int("23"))
    assertEquals(big_int("4096"), p_byte(Byte.MIN_VALUE) * big_int("-32"))
    assertEquals(big_int("-15802468993580246899358024689920"), p_byte(Byte.MIN_VALUE) * big_int("123456789012345678901234567890"))
    assertEquals(big_int("15802468993580246899358024689920"), p_byte(Byte.MIN_VALUE) * big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(p_byte(0) * big_int("0")))
  }

  function testPByteBigDecimalMultiplication() {
    assertEquals(big_decimal("0"), p_byte(0) * big_decimal("0"))
    assertEquals(big_decimal("0"), p_byte(0) * big_decimal("1"))
    assertEquals(big_decimal("0"), p_byte(0) * big_decimal("-1"))
    assertEquals(big_decimal("0"), p_byte(0) * big_decimal("23"))
    assertEquals(big_decimal("0.000"), p_byte(0) * big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_byte(0) * big_decimal("-32"))
    assertEquals(big_decimal("0.000"), p_byte(0) * big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), p_byte(0) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), p_byte(0) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_byte(1) * big_decimal("0"))
    assertEquals(big_decimal("1"), p_byte(1) * big_decimal("1"))
    assertEquals(big_decimal("-1"), p_byte(1) * big_decimal("-1"))
    assertEquals(big_decimal("23"), p_byte(1) * big_decimal("23"))
    assertEquals(big_decimal("23.123"), p_byte(1) * big_decimal("23.123"))
    assertEquals(big_decimal("-32"), p_byte(1) * big_decimal("-32"))
    assertEquals(big_decimal("-32.456"), p_byte(1) * big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), p_byte(1) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), p_byte(1) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_byte(-1) * big_decimal("0"))
    assertEquals(big_decimal("-1"), p_byte(-1) * big_decimal("1"))
    assertEquals(big_decimal("1"), p_byte(-1) * big_decimal("-1"))
    assertEquals(big_decimal("-23"), p_byte(-1) * big_decimal("23"))
    assertEquals(big_decimal("-23.123"), p_byte(-1) * big_decimal("23.123"))
    assertEquals(big_decimal("32"), p_byte(-1) * big_decimal("-32"))
    assertEquals(big_decimal("32.456"), p_byte(-1) * big_decimal("-32.456"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), p_byte(-1) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), p_byte(-1) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_byte(23) * big_decimal("0"))
    assertEquals(big_decimal("23"), p_byte(23) * big_decimal("1"))
    assertEquals(big_decimal("-23"), p_byte(23) * big_decimal("-1"))
    assertEquals(big_decimal("529"), p_byte(23) * big_decimal("23"))
    assertEquals(big_decimal("531.829"), p_byte(23) * big_decimal("23.123"))
    assertEquals(big_decimal("-736"), p_byte(23) * big_decimal("-32"))
    assertEquals(big_decimal("-746.488"), p_byte(23) * big_decimal("-32.456"))
    assertEquals(big_decimal("2839506147283950614728395061472.839506147"), p_byte(23) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2839506147283950614728395061472.839506147"), p_byte(23) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_byte(-32) * big_decimal("0"))
    assertEquals(big_decimal("-32"), p_byte(-32) * big_decimal("1"))
    assertEquals(big_decimal("32"), p_byte(-32) * big_decimal("-1"))
    assertEquals(big_decimal("-736"), p_byte(-32) * big_decimal("23"))
    assertEquals(big_decimal("-739.936"), p_byte(-32) * big_decimal("23.123"))
    assertEquals(big_decimal("1024"), p_byte(-32) * big_decimal("-32"))
    assertEquals(big_decimal("1038.592"), p_byte(-32) * big_decimal("-32.456"))
    assertEquals(big_decimal("-3950617248395061724839506172483.950617248"), p_byte(-32) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("3950617248395061724839506172483.950617248"), p_byte(-32) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_byte(Byte.MAX_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("127"), p_byte(Byte.MAX_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("-127"), p_byte(Byte.MAX_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("2921"), p_byte(Byte.MAX_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("2936.621"), p_byte(Byte.MAX_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("-4064"), p_byte(Byte.MAX_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("-4121.912"), p_byte(Byte.MAX_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("15679012204567901220456790122045.679012203"), p_byte(Byte.MAX_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-15679012204567901220456790122045.679012203"), p_byte(Byte.MAX_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("0"), p_byte(Byte.MIN_VALUE) * big_decimal("0"))
    assertEquals(big_decimal("-128"), p_byte(Byte.MIN_VALUE) * big_decimal("1"))
    assertEquals(big_decimal("128"), p_byte(Byte.MIN_VALUE) * big_decimal("-1"))
    assertEquals(big_decimal("-2944"), p_byte(Byte.MIN_VALUE) * big_decimal("23"))
    assertEquals(big_decimal("-2959.744"), p_byte(Byte.MIN_VALUE) * big_decimal("23.123"))
    assertEquals(big_decimal("4096"), p_byte(Byte.MIN_VALUE) * big_decimal("-32"))
    assertEquals(big_decimal("4154.368"), p_byte(Byte.MIN_VALUE) * big_decimal("-32.456"))
    assertEquals(big_decimal("-15802468993580246899358024689935.802468992"), p_byte(Byte.MIN_VALUE) * big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("15802468993580246899358024689935.802468992"), p_byte(Byte.MIN_VALUE) * big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_byte(0) * big_decimal("0")))
  }

}

