package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_BigDecimalTest extends ArithmeticTestBase {

  function testBigDecimalPByteDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(23))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_byte(0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_byte(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_byte(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_byte(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / p_byte(-32))
    assertEquals(big_decimal("0.007874015748031496062992125984251969"), big_decimal("1") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-0.0078125"), big_decimal("1") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_byte(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_byte(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_byte(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_byte(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / p_byte(-32))
    assertEquals(big_decimal("-0.007874015748031496062992125984251969"), big_decimal("-1") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0.0078125"), big_decimal("-1") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_byte(0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_byte(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_byte(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / p_byte(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / p_byte(-32))
    assertEquals(big_decimal("0.1811023622047244094488188976377953"), big_decimal("23") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-0.1796875"), big_decimal("23") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_byte(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_byte(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_byte(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_byte(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / p_byte(-32))
    assertEquals(big_decimal("0.1820708661417322834645669291338583"), big_decimal("23.123") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-0.1806484375"), big_decimal("23.123") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_byte(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_byte(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_byte(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_byte(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / p_byte(-32))
    assertEquals(big_decimal("-0.2519685039370078740157480314960630"), big_decimal("-32") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0.25"), big_decimal("-32") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_byte(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_byte(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_byte(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_byte(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / p_byte(-32))
    assertEquals(big_decimal("-0.2555590551181102362204724409448819"), big_decimal("-32.456") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0.2535625"), big_decimal("-32.456") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_byte(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_byte(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_byte(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_byte(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / p_byte(-32))
    assertEquals(big_decimal("972100700884611644891610770.7883737"), big_decimal("123456789012345678901234567890.123456789") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-964506164158950616415895061.6415895"), big_decimal("123456789012345678901234567890.123456789") / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_byte(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(-32))
    assertEquals(big_decimal("-972100700884611644891610770.7883737"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("964506164158950616415895061.6415895"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(Byte.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_byte(0)))
  }

  function testBigDecimalByteDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_byte(23))
    assertEquals(big_decimal("0"), big_decimal("0") / b_byte(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_byte(0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_byte(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_byte(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_byte(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / b_byte(-32))
    assertEquals(big_decimal("0.007874015748031496062992125984251969"), big_decimal("1") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-0.0078125"), big_decimal("1") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_byte(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_byte(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_byte(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_byte(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / b_byte(-32))
    assertEquals(big_decimal("-0.007874015748031496062992125984251969"), big_decimal("-1") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0.0078125"), big_decimal("-1") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_byte(0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_byte(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_byte(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / b_byte(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / b_byte(-32))
    assertEquals(big_decimal("0.1811023622047244094488188976377953"), big_decimal("23") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-0.1796875"), big_decimal("23") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_byte(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_byte(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_byte(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_byte(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / b_byte(-32))
    assertEquals(big_decimal("0.1820708661417322834645669291338583"), big_decimal("23.123") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-0.1806484375"), big_decimal("23.123") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_byte(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_byte(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_byte(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_byte(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / b_byte(-32))
    assertEquals(big_decimal("-0.2519685039370078740157480314960630"), big_decimal("-32") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0.25"), big_decimal("-32") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_byte(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_byte(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_byte(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_byte(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / b_byte(-32))
    assertEquals(big_decimal("-0.2555590551181102362204724409448819"), big_decimal("-32.456") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0.2535625"), big_decimal("-32.456") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_byte(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_byte(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_byte(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_byte(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / b_byte(-32))
    assertEquals(big_decimal("972100700884611644891610770.7883737"), big_decimal("123456789012345678901234567890.123456789") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("-964506164158950616415895061.6415895"), big_decimal("123456789012345678901234567890.123456789") / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_byte(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_byte(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_byte(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / b_byte(-32))
    assertEquals(big_decimal("-972100700884611644891610770.7883737"), big_decimal("-123456789012345678901234567890.123456789") / b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("964506164158950616415895061.6415895"), big_decimal("-123456789012345678901234567890.123456789") / b_byte(Byte.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_byte(0)))
  }

  function testBigDecimalPShortDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_short(0))
    assertEquals(big_decimal("0"), big_decimal("0") / p_short(1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_short(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_short(23))
    assertEquals(big_decimal("0"), big_decimal("0") / p_short(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_short(0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_short(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_short(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_short(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / p_short(-32))
    assertEquals(big_decimal("0.00003051850947599719229712820825830866"), big_decimal("1") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-0.000030517578125"), big_decimal("1") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_short(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_short(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_short(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_short(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / p_short(-32))
    assertEquals(big_decimal("-0.00003051850947599719229712820825830866"), big_decimal("-1") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0.000030517578125"), big_decimal("-1") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_short(0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_short(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_short(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / p_short(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / p_short(-32))
    assertEquals(big_decimal("0.0007019257179479354228339487899410993"), big_decimal("23") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-0.000701904296875"), big_decimal("23") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_short(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_short(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_short(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_short(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / p_short(-32))
    assertEquals(big_decimal("0.0007056794946134830774864955595568712"), big_decimal("23.123") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-0.000705657958984375"), big_decimal("23.123") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_short(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_short(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_short(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_short(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / p_short(-32))
    assertEquals(big_decimal("-0.0009765923032319101535081026642658773"), big_decimal("-32") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0.0009765625"), big_decimal("-32") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_short(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_short(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_short(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_short(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / p_short(-32))
    assertEquals(big_decimal("-0.0009905087435529648731955931272316660"), big_decimal("-32.456") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0.000990478515625"), big_decimal("-32.456") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_short(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_short(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_short(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_short(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / p_short(-32))
    assertEquals(big_decimal("3767717185349457652553928.278149463"), big_decimal("123456789012345678901234567890.123456789") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-3767602203745900845374590.084537459"), big_decimal("123456789012345678901234567890.123456789") / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_short(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_short(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_short(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_short(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / p_short(-32))
    assertEquals(big_decimal("-3767717185349457652553928.278149463"), big_decimal("-123456789012345678901234567890.123456789") / p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("3767602203745900845374590.084537459"), big_decimal("-123456789012345678901234567890.123456789") / p_short(Short.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_short(0)))
  }

  function testBigDecimalShortDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_short(0))
    assertEquals(big_decimal("0"), big_decimal("0") / b_short(1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_short(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_short(23))
    assertEquals(big_decimal("0"), big_decimal("0") / b_short(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_short(0))
    assertEquals(big_decimal("1"), big_decimal("1") / b_short(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / b_short(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_short(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / b_short(-32))
    assertEquals(big_decimal("0.00003051850947599719229712820825830866"), big_decimal("1") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-0.000030517578125"), big_decimal("1") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_short(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / b_short(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / b_short(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_short(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / b_short(-32))
    assertEquals(big_decimal("-0.00003051850947599719229712820825830866"), big_decimal("-1") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0.000030517578125"), big_decimal("-1") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_short(0))
    assertEquals(big_decimal("23"), big_decimal("23") / b_short(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / b_short(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / b_short(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / b_short(-32))
    assertEquals(big_decimal("0.0007019257179479354228339487899410993"), big_decimal("23") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-0.000701904296875"), big_decimal("23") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_short(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / b_short(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / b_short(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_short(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / b_short(-32))
    assertEquals(big_decimal("0.0007056794946134830774864955595568712"), big_decimal("23.123") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-0.000705657958984375"), big_decimal("23.123") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_short(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / b_short(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / b_short(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_short(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / b_short(-32))
    assertEquals(big_decimal("-0.0009765923032319101535081026642658773"), big_decimal("-32") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0.0009765625"), big_decimal("-32") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_short(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / b_short(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / b_short(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_short(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / b_short(-32))
    assertEquals(big_decimal("-0.0009905087435529648731955931272316660"), big_decimal("-32.456") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0.000990478515625"), big_decimal("-32.456") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_short(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_short(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_short(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_short(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / b_short(-32))
    assertEquals(big_decimal("3767717185349457652553928.278149463"), big_decimal("123456789012345678901234567890.123456789") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("-3767602203745900845374590.084537459"), big_decimal("123456789012345678901234567890.123456789") / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_short(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_short(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_short(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_short(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / b_short(-32))
    assertEquals(big_decimal("-3767717185349457652553928.278149463"), big_decimal("-123456789012345678901234567890.123456789") / b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("3767602203745900845374590.084537459"), big_decimal("-123456789012345678901234567890.123456789") / b_short(Short.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_short(0)))
  }

  function testBigDecimalPCharDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_char(0))
    assertEquals(big_decimal("0"), big_decimal("0") / p_char(1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_char(23))
    assertEquals(big_decimal("0"), big_decimal("0") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_char(0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_char(1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_char(23))
    assertEquals(big_decimal("0.00001525902189669642175936522468909743"), big_decimal("1") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_char(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_char(1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_char(23))
    assertEquals(big_decimal("-0.00001525902189669642175936522468909743"), big_decimal("-1") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_char(0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_char(1))
    assertEquals(big_decimal("1"), big_decimal("23") / p_char(23))
    assertEquals(big_decimal("0.0003509575036240177004654001678492409"), big_decimal("23") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_char(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_char(1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_char(23))
    assertEquals(big_decimal("0.0003528343633173113603418020904859998"), big_decimal("23.123") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_char(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_char(1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_char(23))
    assertEquals(big_decimal("-0.0004882887006942854962996871900511177"), big_decimal("-32") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_char(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_char(1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_char(23))
    assertEquals(big_decimal("-0.0004952468146791790646219577325093462"), big_decimal("-32.456") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_char(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_char(1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_char(23))
    assertEquals(big_decimal("1883829846835212922884482.610667940"), big_decimal("123456789012345678901234567890.123456789") / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_char(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_char(1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_char(23))
    assertEquals(big_decimal("-1883829846835212922884482.610667940"), big_decimal("-123456789012345678901234567890.123456789") / p_char(Character.MAX_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_char(0)))
  }

  function testBigDecimalCharacterDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_char(0))
    assertEquals(big_decimal("0"), big_decimal("0") / b_char(1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_char(23))
    assertEquals(big_decimal("0"), big_decimal("0") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_char(0))
    assertEquals(big_decimal("1"), big_decimal("1") / b_char(1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_char(23))
    assertEquals(big_decimal("0.00001525902189669642175936522468909743"), big_decimal("1") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_char(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / b_char(1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_char(23))
    assertEquals(big_decimal("-0.00001525902189669642175936522468909743"), big_decimal("-1") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_char(0))
    assertEquals(big_decimal("23"), big_decimal("23") / b_char(1))
    assertEquals(big_decimal("1"), big_decimal("23") / b_char(23))
    assertEquals(big_decimal("0.0003509575036240177004654001678492409"), big_decimal("23") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_char(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / b_char(1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_char(23))
    assertEquals(big_decimal("0.0003528343633173113603418020904859998"), big_decimal("23.123") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_char(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / b_char(1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_char(23))
    assertEquals(big_decimal("-0.0004882887006942854962996871900511177"), big_decimal("-32") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_char(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / b_char(1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_char(23))
    assertEquals(big_decimal("-0.0004952468146791790646219577325093462"), big_decimal("-32.456") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_char(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_char(1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_char(23))
    assertEquals(big_decimal("1883829846835212922884482.610667940"), big_decimal("123456789012345678901234567890.123456789") / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_char(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_char(1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_char(23))
    assertEquals(big_decimal("-1883829846835212922884482.610667940"), big_decimal("-123456789012345678901234567890.123456789") / b_char(Character.MAX_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_char(0)))
  }

  function testBigDecimalPIntDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_int(0))
    assertEquals(big_decimal("0"), big_decimal("0") / p_int(1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_int(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_int(23))
    assertEquals(big_decimal("0"), big_decimal("0") / p_int(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_int(0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_int(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_int(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_int(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / p_int(-32))
    assertEquals(big_decimal("4.656612875245796924105750827167998E-10"), big_decimal("1") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-4.656612873077392578125E-10"), big_decimal("1") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_int(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_int(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_int(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_int(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / p_int(-32))
    assertEquals(big_decimal("-4.656612875245796924105750827167998E-10"), big_decimal("-1") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("4.656612873077392578125E-10"), big_decimal("-1") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_int(0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_int(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_int(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / p_int(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / p_int(-32))
    assertEquals(big_decimal("1.071020961306533292544322690248640E-8"), big_decimal("23") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-1.07102096080780029296875E-8"), big_decimal("23") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_int(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_int(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_int(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_int(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / p_int(-32))
    assertEquals(big_decimal("1.076748595143085622760972763766056E-8"), big_decimal("23.123") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-1.07674859464168548583984375E-8"), big_decimal("23.123") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_int(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_int(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_int(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_int(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / p_int(-32))
    assertEquals(big_decimal("-1.490116120078655015713840264693760E-8"), big_decimal("-32") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1.490116119384765625E-8"), big_decimal("-32") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_int(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_int(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_int(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_int(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / p_int(-32))
    assertEquals(big_decimal("-1.511350274789775849687762488465646E-8"), big_decimal("-32.456") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1.51135027408599853515625E-8"), big_decimal("-32.456") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_int(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_int(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_int(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_int(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / p_int(-32))
    assertEquals(big_decimal("57489047325139272132.13119656883862"), big_decimal("123456789012345678901234567890.123456789") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-57489047298368848348.61129889736113"), big_decimal("123456789012345678901234567890.123456789") / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_int(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_int(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_int(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_int(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / p_int(-32))
    assertEquals(big_decimal("-57489047325139272132.13119656883862"), big_decimal("-123456789012345678901234567890.123456789") / p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("57489047298368848348.61129889736113"), big_decimal("-123456789012345678901234567890.123456789") / p_int(Integer.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_int(0)))
  }

  function testBigDecimalIntegerDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_int(0))
    assertEquals(big_decimal("0"), big_decimal("0") / b_int(1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_int(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_int(23))
    assertEquals(big_decimal("0"), big_decimal("0") / b_int(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_int(0))
    assertEquals(big_decimal("1"), big_decimal("1") / b_int(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / b_int(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_int(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / b_int(-32))
    assertEquals(big_decimal("4.656612875245796924105750827167998E-10"), big_decimal("1") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-4.656612873077392578125E-10"), big_decimal("1") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_int(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / b_int(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / b_int(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_int(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / b_int(-32))
    assertEquals(big_decimal("-4.656612875245796924105750827167998E-10"), big_decimal("-1") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("4.656612873077392578125E-10"), big_decimal("-1") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_int(0))
    assertEquals(big_decimal("23"), big_decimal("23") / b_int(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / b_int(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / b_int(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / b_int(-32))
    assertEquals(big_decimal("1.071020961306533292544322690248640E-8"), big_decimal("23") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-1.07102096080780029296875E-8"), big_decimal("23") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_int(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / b_int(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / b_int(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_int(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / b_int(-32))
    assertEquals(big_decimal("1.076748595143085622760972763766056E-8"), big_decimal("23.123") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-1.07674859464168548583984375E-8"), big_decimal("23.123") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_int(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / b_int(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / b_int(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_int(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / b_int(-32))
    assertEquals(big_decimal("-1.490116120078655015713840264693760E-8"), big_decimal("-32") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1.490116119384765625E-8"), big_decimal("-32") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_int(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / b_int(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / b_int(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_int(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / b_int(-32))
    assertEquals(big_decimal("-1.511350274789775849687762488465646E-8"), big_decimal("-32.456") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1.51135027408599853515625E-8"), big_decimal("-32.456") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_int(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_int(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_int(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_int(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / b_int(-32))
    assertEquals(big_decimal("57489047325139272132.13119656883862"), big_decimal("123456789012345678901234567890.123456789") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("-57489047298368848348.61129889736113"), big_decimal("123456789012345678901234567890.123456789") / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_int(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_int(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_int(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_int(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / b_int(-32))
    assertEquals(big_decimal("-57489047325139272132.13119656883862"), big_decimal("-123456789012345678901234567890.123456789") / b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("57489047298368848348.61129889736113"), big_decimal("-123456789012345678901234567890.123456789") / b_int(Integer.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_int(0)))
  }

  function testBigDecimalPLongDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_long(0))
    assertEquals(big_decimal("0"), big_decimal("0") / p_long(1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_long(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / p_long(23))
    assertEquals(big_decimal("0"), big_decimal("0") / p_long(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_long(0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_long(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_long(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_long(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / p_long(-32))
    assertEquals(big_decimal("1.084202172485504434125002235952170E-19"), big_decimal("1") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-1.084202172485504434007452800869942E-19"), big_decimal("1") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_long(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_long(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_long(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_long(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / p_long(-32))
    assertEquals(big_decimal("-1.084202172485504434125002235952170E-19"), big_decimal("-1") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1.084202172485504434007452800869942E-19"), big_decimal("-1") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_long(0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_long(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_long(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / p_long(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / p_long(-32))
    assertEquals(big_decimal("2.493664996716660198487505142689992E-18"), big_decimal("23") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-2.493664996716660198217141442000866E-18"), big_decimal("23") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_long(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_long(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_long(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_long(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / p_long(-32))
    assertEquals(big_decimal("2.507000683438231903027242670192204E-18"), big_decimal("23.123") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-2.507000683438231902755433111451566E-18"), big_decimal("23.123") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_long(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_long(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_long(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_long(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / p_long(-32))
    assertEquals(big_decimal("-3.469446951953614189200007155046945E-18"), big_decimal("-32") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("3.469446951953614188823848962783813E-18"), big_decimal("-32") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_long(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_long(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_long(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_long(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / p_long(-32))
    assertEquals(big_decimal("-3.518886571018953191396107257006364E-18"), big_decimal("-32.456") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("3.518886571018953191014588810503483E-18"), big_decimal("-32.456") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_long(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_long(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_long(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_long(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / p_long(-32))
    assertEquals(big_decimal("13385211885.52697383678617745052615"), big_decimal("123456789012345678901234567890.123456789") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-13385211885.52697383533494986997944"), big_decimal("123456789012345678901234567890.123456789") / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_long(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_long(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_long(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_long(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / p_long(-32))
    assertEquals(big_decimal("-13385211885.52697383678617745052615"), big_decimal("-123456789012345678901234567890.123456789") / p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("13385211885.52697383533494986997944"), big_decimal("-123456789012345678901234567890.123456789") / p_long(Long.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_long(0)))
  }

  function testBigDecimalLongDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_long(0))
    assertEquals(big_decimal("0"), big_decimal("0") / b_long(1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_long(-1))
    assertEquals(big_decimal("0"), big_decimal("0") / b_long(23))
    assertEquals(big_decimal("0"), big_decimal("0") / b_long(-32))
    assertEquals(big_decimal("0"), big_decimal("0") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_long(0))
    assertEquals(big_decimal("1"), big_decimal("1") / b_long(1))
    assertEquals(big_decimal("-1"), big_decimal("1") / b_long(-1))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_long(23))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / b_long(-32))
    assertEquals(big_decimal("1.084202172485504434125002235952170E-19"), big_decimal("1") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-1.084202172485504434007452800869942E-19"), big_decimal("1") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_long(0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / b_long(1))
    assertEquals(big_decimal("1"), big_decimal("-1") / b_long(-1))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_long(23))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / b_long(-32))
    assertEquals(big_decimal("-1.084202172485504434125002235952170E-19"), big_decimal("-1") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1.084202172485504434007452800869942E-19"), big_decimal("-1") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_long(0))
    assertEquals(big_decimal("23"), big_decimal("23") / b_long(1))
    assertEquals(big_decimal("-23"), big_decimal("23") / b_long(-1))
    assertEquals(big_decimal("1"), big_decimal("23") / b_long(23))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / b_long(-32))
    assertEquals(big_decimal("2.493664996716660198487505142689992E-18"), big_decimal("23") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-2.493664996716660198217141442000866E-18"), big_decimal("23") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_long(0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / b_long(1))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / b_long(-1))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_long(23))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / b_long(-32))
    assertEquals(big_decimal("2.507000683438231903027242670192204E-18"), big_decimal("23.123") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-2.507000683438231902755433111451566E-18"), big_decimal("23.123") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_long(0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / b_long(1))
    assertEquals(big_decimal("32"), big_decimal("-32") / b_long(-1))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_long(23))
    assertEquals(big_decimal("1"), big_decimal("-32") / b_long(-32))
    assertEquals(big_decimal("-3.469446951953614189200007155046945E-18"), big_decimal("-32") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("3.469446951953614188823848962783813E-18"), big_decimal("-32") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_long(0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / b_long(1))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / b_long(-1))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_long(23))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / b_long(-32))
    assertEquals(big_decimal("-3.518886571018953191396107257006364E-18"), big_decimal("-32.456") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("3.518886571018953191014588810503483E-18"), big_decimal("-32.456") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_long(0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_long(1))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_long(-1))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_long(23))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / b_long(-32))
    assertEquals(big_decimal("13385211885.52697383678617745052615"), big_decimal("123456789012345678901234567890.123456789") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("-13385211885.52697383533494986997944"), big_decimal("123456789012345678901234567890.123456789") / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_long(0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_long(1))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_long(-1))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_long(23))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / b_long(-32))
    assertEquals(big_decimal("-13385211885.52697383678617745052615"), big_decimal("-123456789012345678901234567890.123456789") / b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("13385211885.52697383533494986997944"), big_decimal("-123456789012345678901234567890.123456789") / b_long(Long.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_long(0)))
  }

  function testBigDecimalPFloatDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_float(0.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_float(1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_float(-1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_float(23.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / p_float(23.123))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_float(-32.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.NaN_))
    assertEquals(big_decimal("0E-31"), big_decimal("0") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E+46"), big_decimal("0") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_float(0.0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_float(1.0))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_float(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_float(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_decimal("1") / p_float(23.123))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / p_float(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_decimal("1") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.NaN_))
    assertEquals(big_decimal("2.938736023187802717361038561065539E-39"), big_decimal("1") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("7.142857142857142857142857142857143E+44"), big_decimal("1") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_float(0.0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_float(1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_float(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_float(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_decimal("-1") / p_float(23.123))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / p_float(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_decimal("-1") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.NaN_))
    assertEquals(big_decimal("-2.938736023187802717361038561065539E-39"), big_decimal("-1") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-7.142857142857142857142857142857143E+44"), big_decimal("-1") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_float(0.0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_float(1.0))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_float(-1.0))
    assertEquals(big_decimal("1"), big_decimal("23") / p_float(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_decimal("23") / p_float(23.123))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / p_float(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_decimal("23") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.NaN_))
    assertEquals(big_decimal("6.759092853331946249930388690450739E-38"), big_decimal("23") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.642857142857142857142857142857143E+46"), big_decimal("23") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_float(0.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_float(1.0))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_float(-1.0))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_float(23.0))
    assertEquals(big_decimal("1"), big_decimal("23.123") / p_float(23.123))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / p_float(-32.0))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), big_decimal("23.123") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.NaN_))
    assertEquals(big_decimal("6.795239306417156223353929464751845E-38"), big_decimal("23.123") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.651642857142857142857142857142857E+46"), big_decimal("23.123") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_float(0.0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_float(1.0))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_float(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_float(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_decimal("-32") / p_float(23.123))
    assertEquals(big_decimal("1"), big_decimal("-32") / p_float(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_decimal("-32") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.NaN_))
    assertEquals(big_decimal("-9.403955274200968695555323395409724E-38"), big_decimal("-32") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-2.285714285714285714285714285714286E+46"), big_decimal("-32") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_float(0.0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_float(1.0))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_float(-1.0))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_float(23.0))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), big_decimal("-32.456") / p_float(23.123))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / p_float(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-32.456") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.NaN_))
    assertEquals(big_decimal("-9.537961636858332499466986753794312E-38"), big_decimal("-32.456") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-2.318285714285714285714285714285714E+46"), big_decimal("-32.456") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_float(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_float(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_float(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_float(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.676922"), big_decimal("123456789012345678901234567890.123456789") / p_float(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / p_float(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.072081"), big_decimal("123456789012345678901234567890.123456789") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(big_decimal("3.628069131776763587686360103311954E-10"), big_decimal("123456789012345678901234567890.123456789") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("8.818342072310405635802469135008818E+73"), big_decimal("123456789012345678901234567890.123456789") / p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_float(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_float(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_float(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_float(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.676922"), big_decimal("-123456789012345678901234567890.123456789") / p_float(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / p_float(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.072081"), big_decimal("-123456789012345678901234567890.123456789") / p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(big_decimal("-3.628069131776763587686360103311954E-10"), big_decimal("-123456789012345678901234567890.123456789") / p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-8.818342072310405635802469135008818E+73"), big_decimal("-123456789012345678901234567890.123456789") / p_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_float(0.0)))
  }

  function testBigDecimalFloatDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_float(0.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_float(1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_float(-1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_float(23.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / b_float(23.123))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_float(-32.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.NaN_))
    assertEquals(big_decimal("0E-31"), big_decimal("0") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0E+46"), big_decimal("0") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_float(0.0))
    assertEquals(big_decimal("1"), big_decimal("1") / b_float(1.0))
    assertEquals(big_decimal("-1"), big_decimal("1") / b_float(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_float(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_decimal("1") / b_float(23.123))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / b_float(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_decimal("1") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.NaN_))
    assertEquals(big_decimal("2.938736023187802717361038561065539E-39"), big_decimal("1") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("7.142857142857142857142857142857143E+44"), big_decimal("1") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_float(0.0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / b_float(1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") / b_float(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_float(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_decimal("-1") / b_float(23.123))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / b_float(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_decimal("-1") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.NaN_))
    assertEquals(big_decimal("-2.938736023187802717361038561065539E-39"), big_decimal("-1") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-7.142857142857142857142857142857143E+44"), big_decimal("-1") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_float(0.0))
    assertEquals(big_decimal("23"), big_decimal("23") / b_float(1.0))
    assertEquals(big_decimal("-23"), big_decimal("23") / b_float(-1.0))
    assertEquals(big_decimal("1"), big_decimal("23") / b_float(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_decimal("23") / b_float(23.123))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / b_float(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_decimal("23") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.NaN_))
    assertEquals(big_decimal("6.759092853331946249930388690450739E-38"), big_decimal("23") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.642857142857142857142857142857143E+46"), big_decimal("23") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_float(0.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / b_float(1.0))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / b_float(-1.0))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_float(23.0))
    assertEquals(big_decimal("1"), big_decimal("23.123") / b_float(23.123))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / b_float(-32.0))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), big_decimal("23.123") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.NaN_))
    assertEquals(big_decimal("6.795239306417156223353929464751845E-38"), big_decimal("23.123") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("1.651642857142857142857142857142857E+46"), big_decimal("23.123") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_float(0.0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / b_float(1.0))
    assertEquals(big_decimal("32"), big_decimal("-32") / b_float(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_float(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_decimal("-32") / b_float(23.123))
    assertEquals(big_decimal("1"), big_decimal("-32") / b_float(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_decimal("-32") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.NaN_))
    assertEquals(big_decimal("-9.403955274200968695555323395409724E-38"), big_decimal("-32") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-2.285714285714285714285714285714286E+46"), big_decimal("-32") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_float(0.0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / b_float(1.0))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / b_float(-1.0))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_float(23.0))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), big_decimal("-32.456") / b_float(23.123))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / b_float(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-32.456") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.NaN_))
    assertEquals(big_decimal("-9.537961636858332499466986753794312E-38"), big_decimal("-32.456") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-2.318285714285714285714285714285714E+46"), big_decimal("-32.456") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_float(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_float(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_float(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_float(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.676922"), big_decimal("123456789012345678901234567890.123456789") / b_float(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / b_float(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.072081"), big_decimal("123456789012345678901234567890.123456789") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(big_decimal("3.628069131776763587686360103311954E-10"), big_decimal("123456789012345678901234567890.123456789") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("8.818342072310405635802469135008818E+73"), big_decimal("123456789012345678901234567890.123456789") / b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_float(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_float(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_float(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_float(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.676922"), big_decimal("-123456789012345678901234567890.123456789") / b_float(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / b_float(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.072081"), big_decimal("-123456789012345678901234567890.123456789") / b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(big_decimal("-3.628069131776763587686360103311954E-10"), big_decimal("-123456789012345678901234567890.123456789") / b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("-8.818342072310405635802469135008818E+73"), big_decimal("-123456789012345678901234567890.123456789") / b_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_float(0.0)))
  }

  function testBigDecimalPDoubleDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / p_double(0.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_double(1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_double(-1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_double(23.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / p_double(23.123))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / p_double(-32.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.NaN_))
    assertEquals(big_decimal("0E-292"), big_decimal("0") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E+325"), big_decimal("0") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / p_double(0.0))
    assertEquals(big_decimal("1"), big_decimal("1") / p_double(1.0))
    assertEquals(big_decimal("-1"), big_decimal("1") / p_double(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / p_double(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_decimal("1") / p_double(23.123))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / p_double(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_decimal("1") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.NaN_))
    assertEquals(big_decimal("5.562684646268004100511936235978403E-309"), big_decimal("1") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.040816326530612244897959183673469E+323"), big_decimal("1") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / p_double(0.0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / p_double(1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") / p_double(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / p_double(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_decimal("-1") / p_double(23.123))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / p_double(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_decimal("-1") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.NaN_))
    assertEquals(big_decimal("-5.562684646268004100511936235978403E-309"), big_decimal("-1") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.040816326530612244897959183673469E+323"), big_decimal("-1") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / p_double(0.0))
    assertEquals(big_decimal("23"), big_decimal("23") / p_double(1.0))
    assertEquals(big_decimal("-23"), big_decimal("23") / p_double(-1.0))
    assertEquals(big_decimal("1"), big_decimal("23") / p_double(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_decimal("23") / p_double(23.123))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / p_double(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_decimal("23") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.NaN_))
    assertEquals(big_decimal("1.279417468641640943117745334275033E-307"), big_decimal("23") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.693877551020408163265306122448980E+324"), big_decimal("23") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / p_double(0.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / p_double(1.0))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / p_double(-1.0))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / p_double(23.0))
    assertEquals(big_decimal("1"), big_decimal("23.123") / p_double(23.123))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / p_double(-32.0))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), big_decimal("23.123") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.NaN_))
    assertEquals(big_decimal("1.286259570756550588161375015845286E-307"), big_decimal("23.123") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.718979591836734693877551020408163E+324"), big_decimal("23.123") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / p_double(0.0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / p_double(1.0))
    assertEquals(big_decimal("32"), big_decimal("-32") / p_double(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / p_double(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_decimal("-32") / p_double(23.123))
    assertEquals(big_decimal("1"), big_decimal("-32") / p_double(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_decimal("-32") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.NaN_))
    assertEquals(big_decimal("-1.780059086805761312163819595513089E-307"), big_decimal("-32") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.530612244897959183673469387755102E+324"), big_decimal("-32") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / p_double(0.0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / p_double(1.0))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / p_double(-1.0))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / p_double(23.0))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), big_decimal("-32.456") / p_double(23.123))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / p_double(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-32.456") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.NaN_))
    assertEquals(big_decimal("-1.805424928792743410862154024749151E-307"), big_decimal("-32.456") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.623673469387755102040816326530612E+324"), big_decimal("-32.456") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / p_double(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_double(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / p_double(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / p_double(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.676922"), big_decimal("123456789012345678901234567890.123456789") / p_double(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / p_double(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.072081"), big_decimal("123456789012345678901234567890.123456789") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(big_decimal("6.867511847165237381596892776826089E-280"), big_decimal("123456789012345678901234567890.123456789") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.519526306374401610229276895716805E+352"), big_decimal("123456789012345678901234567890.123456789") / p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / p_double(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_double(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / p_double(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / p_double(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.676922"), big_decimal("-123456789012345678901234567890.123456789") / p_double(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / p_double(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.072081"), big_decimal("-123456789012345678901234567890.123456789") / p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(big_decimal("-6.867511847165237381596892776826089E-280"), big_decimal("-123456789012345678901234567890.123456789") / p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.519526306374401610229276895716805E+352"), big_decimal("-123456789012345678901234567890.123456789") / p_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / p_double(0.0)))
  }

  function testBigDecimalDoubleDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / b_double(0.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_double(1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_double(-1.0))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_double(23.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / b_double(23.123))
    assertEquals(big_decimal("0E+1"), big_decimal("0") / b_double(-32.0))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.NaN_))
    assertEquals(big_decimal("0E-292"), big_decimal("0") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0E+325"), big_decimal("0") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / b_double(0.0))
    assertEquals(big_decimal("1"), big_decimal("1") / b_double(1.0))
    assertEquals(big_decimal("-1"), big_decimal("1") / b_double(-1.0))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / b_double(23.0))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_decimal("1") / b_double(23.123))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / b_double(-32.0))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_decimal("1") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.NaN_))
    assertEquals(big_decimal("5.562684646268004100511936235978403E-309"), big_decimal("1") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.040816326530612244897959183673469E+323"), big_decimal("1") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / b_double(0.0))
    assertEquals(big_decimal("-1"), big_decimal("-1") / b_double(1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") / b_double(-1.0))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / b_double(23.0))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_decimal("-1") / b_double(23.123))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / b_double(-32.0))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_decimal("-1") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.NaN_))
    assertEquals(big_decimal("-5.562684646268004100511936235978403E-309"), big_decimal("-1") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.040816326530612244897959183673469E+323"), big_decimal("-1") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / b_double(0.0))
    assertEquals(big_decimal("23"), big_decimal("23") / b_double(1.0))
    assertEquals(big_decimal("-23"), big_decimal("23") / b_double(-1.0))
    assertEquals(big_decimal("1"), big_decimal("23") / b_double(23.0))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_decimal("23") / b_double(23.123))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / b_double(-32.0))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_decimal("23") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.NaN_))
    assertEquals(big_decimal("1.279417468641640943117745334275033E-307"), big_decimal("23") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.693877551020408163265306122448980E+324"), big_decimal("23") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / b_double(0.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / b_double(1.0))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / b_double(-1.0))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / b_double(23.0))
    assertEquals(big_decimal("1"), big_decimal("23.123") / b_double(23.123))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / b_double(-32.0))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), big_decimal("23.123") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.NaN_))
    assertEquals(big_decimal("1.286259570756550588161375015845286E-307"), big_decimal("23.123") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("4.718979591836734693877551020408163E+324"), big_decimal("23.123") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / b_double(0.0))
    assertEquals(big_decimal("-32"), big_decimal("-32") / b_double(1.0))
    assertEquals(big_decimal("32"), big_decimal("-32") / b_double(-1.0))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / b_double(23.0))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_decimal("-32") / b_double(23.123))
    assertEquals(big_decimal("1"), big_decimal("-32") / b_double(-32.0))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_decimal("-32") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.NaN_))
    assertEquals(big_decimal("-1.780059086805761312163819595513089E-307"), big_decimal("-32") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.530612244897959183673469387755102E+324"), big_decimal("-32") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / b_double(0.0))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / b_double(1.0))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / b_double(-1.0))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / b_double(23.0))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), big_decimal("-32.456") / b_double(23.123))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / b_double(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-32.456") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.NaN_))
    assertEquals(big_decimal("-1.805424928792743410862154024749151E-307"), big_decimal("-32.456") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-6.623673469387755102040816326530612E+324"), big_decimal("-32.456") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / b_double(0.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_double(1.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / b_double(-1.0))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / b_double(23.0))
    assertEquals(big_decimal("5339133720206966176587578077.676922"), big_decimal("123456789012345678901234567890.123456789") / b_double(23.123))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / b_double(-32.0))
    assertEquals(big_decimal("-3803820218521865876917505789.072081"), big_decimal("123456789012345678901234567890.123456789") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(big_decimal("6.867511847165237381596892776826089E-280"), big_decimal("123456789012345678901234567890.123456789") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("2.519526306374401610229276895716805E+352"), big_decimal("123456789012345678901234567890.123456789") / b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / b_double(0.0))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_double(1.0))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / b_double(-1.0))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / b_double(23.0))
    assertEquals(big_decimal("-5339133720206966176587578077.676922"), big_decimal("-123456789012345678901234567890.123456789") / b_double(23.123))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / b_double(-32.0))
    assertEquals(big_decimal("3803820218521865876917505789.072081"), big_decimal("-123456789012345678901234567890.123456789") / b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(big_decimal("-6.867511847165237381596892776826089E-280"), big_decimal("-123456789012345678901234567890.123456789") / b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("-2.519526306374401610229276895716805E+352"), big_decimal("-123456789012345678901234567890.123456789") / b_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / b_double(0.0)))
  }

  function testBigDecimalBigIntegerDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_int("-1"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_int("23"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_int("-32"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / big_int("0"))
    assertEquals(big_decimal("1"), big_decimal("1") / big_int("1"))
    assertEquals(big_decimal("-1"), big_decimal("1") / big_int("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / big_int("23"))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / big_int("-32"))
    assertEquals(big_decimal("8.100000072900000663390006036857155E-30"), big_decimal("1") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-8.100000072900000663390006036857155E-30"), big_decimal("1") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / big_int("0"))
    assertEquals(big_decimal("-1"), big_decimal("-1") / big_int("1"))
    assertEquals(big_decimal("1"), big_decimal("-1") / big_int("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / big_int("23"))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / big_int("-32"))
    assertEquals(big_decimal("-8.100000072900000663390006036857155E-30"), big_decimal("-1") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("8.100000072900000663390006036857155E-30"), big_decimal("-1") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / big_int("0"))
    assertEquals(big_decimal("23"), big_decimal("23") / big_int("1"))
    assertEquals(big_decimal("-23"), big_decimal("23") / big_int("-1"))
    assertEquals(big_decimal("1"), big_decimal("23") / big_int("23"))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / big_int("-32"))
    assertEquals(big_decimal("1.863000016767000152579701388477146E-28"), big_decimal("23") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.863000016767000152579701388477146E-28"), big_decimal("23") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / big_int("0"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / big_int("1"))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / big_int("-1"))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / big_int("23"))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / big_int("-32"))
    assertEquals(big_decimal("1.872963016856667153395671095902480E-28"), big_decimal("23.123") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.872963016856667153395671095902480E-28"), big_decimal("23.123") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / big_int("0"))
    assertEquals(big_decimal("-32"), big_decimal("-32") / big_int("1"))
    assertEquals(big_decimal("32"), big_decimal("-32") / big_int("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / big_int("23"))
    assertEquals(big_decimal("1"), big_decimal("-32") / big_int("-32"))
    assertEquals(big_decimal("-2.592000023328000212284801931794290E-28"), big_decimal("-32") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("2.592000023328000212284801931794290E-28"), big_decimal("-32") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / big_int("0"))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / big_int("1"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / big_int("-1"))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / big_int("23"))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / big_int("-32"))
    assertEquals(big_decimal("-2.628936023660424215309860359322358E-28"), big_decimal("-32.456") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("2.628936023660424215309860359322358E-28"), big_decimal("-32.456") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / big_int("0"))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / big_int("1"))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / big_int("-1"))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / big_int("23"))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / big_int("-32"))
    assertEquals(big_decimal("1.000000000000000000000000000001000"), big_decimal("123456789012345678901234567890.123456789") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.000000000000000000000000000001000"), big_decimal("123456789012345678901234567890.123456789") / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / big_int("0"))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / big_int("1"))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / big_int("-1"))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / big_int("23"))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / big_int("-32"))
    assertEquals(big_decimal("-1.000000000000000000000000000001000"), big_decimal("-123456789012345678901234567890.123456789") / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1.000000000000000000000000000001000"), big_decimal("-123456789012345678901234567890.123456789") / big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / big_int("0")))
  }

  function testBigDecimalBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") / big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_decimal("-1"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_decimal("0") / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), big_decimal("0") / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), big_decimal("0") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), big_decimal("0") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") / big_decimal("0"))
    assertEquals(big_decimal("1"), big_decimal("1") / big_decimal("1"))
    assertEquals(big_decimal("-1"), big_decimal("1") / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), big_decimal("1") / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), big_decimal("1") / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), big_decimal("1") / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), big_decimal("1") / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), big_decimal("1") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), big_decimal("1") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") / big_decimal("0"))
    assertEquals(big_decimal("-1"), big_decimal("-1") / big_decimal("1"))
    assertEquals(big_decimal("1"), big_decimal("-1") / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), big_decimal("-1") / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), big_decimal("-1") / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), big_decimal("-1") / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), big_decimal("-1") / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), big_decimal("-1") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), big_decimal("-1") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") / big_decimal("0"))
    assertEquals(big_decimal("23"), big_decimal("23") / big_decimal("1"))
    assertEquals(big_decimal("-23"), big_decimal("23") / big_decimal("-1"))
    assertEquals(big_decimal("1"), big_decimal("23") / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), big_decimal("23") / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), big_decimal("23") / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), big_decimal("23") / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), big_decimal("23") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), big_decimal("23") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") / big_decimal("0"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") / big_decimal("1"))
    assertEquals(big_decimal("-23.123"), big_decimal("23.123") / big_decimal("-1"))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), big_decimal("23.123") / big_decimal("23"))
    assertEquals(big_decimal("1"), big_decimal("23.123") / big_decimal("23.123"))
    assertEquals(big_decimal("-0.72259375"), big_decimal("23.123") / big_decimal("-32"))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), big_decimal("23.123") / big_decimal("-32.456"))
    assertEquals(big_decimal("1.872963016856667153395671095900607E-28"), big_decimal("23.123") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.872963016856667153395671095900607E-28"), big_decimal("23.123") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") / big_decimal("0"))
    assertEquals(big_decimal("-32"), big_decimal("-32") / big_decimal("1"))
    assertEquals(big_decimal("32"), big_decimal("-32") / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), big_decimal("-32") / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), big_decimal("-32") / big_decimal("23.123"))
    assertEquals(big_decimal("1"), big_decimal("-32") / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), big_decimal("-32") / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), big_decimal("-32") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), big_decimal("-32") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") / big_decimal("0"))
    assertEquals(big_decimal("-32.456"), big_decimal("-32.456") / big_decimal("1"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") / big_decimal("-1"))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), big_decimal("-32.456") / big_decimal("23"))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), big_decimal("-32.456") / big_decimal("23.123"))
    assertEquals(big_decimal("1.01425"), big_decimal("-32.456") / big_decimal("-32"))
    assertEquals(big_decimal("1"), big_decimal("-32.456") / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.628936023660424215309860359319729E-28"), big_decimal("-32.456") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.628936023660424215309860359319729E-28"), big_decimal("-32.456") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") / big_decimal("0"))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("1"))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("-1"))
    assertEquals(big_decimal("5367686478797638213097155125.657542"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("23"))
    assertEquals(big_decimal("5339133720206966176587578077.676922"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("23.123"))
    assertEquals(big_decimal("-3858024656635802465663580246.566358"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("-32"))
    assertEquals(big_decimal("-3803820218521865876917505789.072081"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("-32.456"))
    assertEquals(big_decimal("1"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1"), big_decimal("123456789012345678901234567890.123456789") / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") / big_decimal("0"))
    assertEquals(big_decimal("-123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("1"))
    assertEquals(big_decimal("123456789012345678901234567890.1235"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("-1"))
    assertEquals(big_decimal("-5367686478797638213097155125.657542"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("23"))
    assertEquals(big_decimal("-5339133720206966176587578077.676922"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("23.123"))
    assertEquals(big_decimal("3858024656635802465663580246.566358"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("-32"))
    assertEquals(big_decimal("3803820218521865876917505789.072081"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("-32.456"))
    assertEquals(big_decimal("-1"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), big_decimal("-123456789012345678901234567890.123456789") / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") / big_decimal("0")))
  }

}

