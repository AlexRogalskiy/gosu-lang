package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_FloatTest extends ArithmeticTestBase {

  function testFloatPByteDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_byte(0))
    assertEquals(b_float(0.0), b_float(0.0) / p_byte(1))
    assertEquals(b_float(-0.0), b_float(0.0) / p_byte(-1))
    assertEquals(b_float(0.0), b_float(0.0) / p_byte(23))
    assertEquals(b_float(-0.0), b_float(0.0) / p_byte(-32))
    assertEquals(b_float(0.0), b_float(0.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_byte(0))
    assertEquals(b_float(1.0), b_float(1.0) / p_byte(1))
    assertEquals(b_float(-1.0), b_float(1.0) / p_byte(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / p_byte(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / p_byte(-32))
    assertEquals(b_float(0.007874016), b_float(1.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0078125), b_float(1.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_byte(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_byte(1))
    assertEquals(b_float(1.0), b_float(-1.0) / p_byte(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / p_byte(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / p_byte(-32))
    assertEquals(b_float(-0.007874016), b_float(-1.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.0078125), b_float(-1.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_byte(0))
    assertEquals(b_float(23.0), b_float(23.0) / p_byte(1))
    assertEquals(b_float(-23.0), b_float(23.0) / p_byte(-1))
    assertEquals(b_float(1.0), b_float(23.0) / p_byte(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / p_byte(-32))
    assertEquals(b_float(0.18110237), b_float(23.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.1796875), b_float(23.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_byte(0))
    assertEquals(b_float(23.123), b_float(23.123) / p_byte(1))
    assertEquals(b_float(-23.123), b_float(23.123) / p_byte(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / p_byte(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / p_byte(-32))
    assertEquals(b_float(0.18207087), b_float(23.123) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.18064843), b_float(23.123) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_byte(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_byte(1))
    assertEquals(b_float(32.0), b_float(-32.0) / p_byte(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / p_byte(23))
    assertEquals(b_float(1.0), b_float(-32.0) / p_byte(-32))
    assertEquals(b_float(-0.2519685), b_float(-32.0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.25), b_float(-32.0) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_byte(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_byte(1))
    assertEquals(b_float(32.456), b_float(-32.456) / p_byte(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / p_byte(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / p_byte(-32))
    assertEquals(b_float(-0.25555906), b_float(-32.456) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.2535625), b_float(-32.456) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_byte(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_byte(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / p_byte(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / p_byte(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / p_byte(-32))
    assertEquals(b_float(Float.parseFloat("2.6793887E36")), b_float(Float.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.6584558E36")), b_float(Float.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_byte(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_byte(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / p_byte(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_byte(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_byte(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / p_byte(0)))
  }

  function testFloatByteDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_byte(0))
    assertEquals(b_float(0.0), b_float(0.0) / p_byte(1))
    assertEquals(b_float(-0.0), b_float(0.0) / p_byte(-1))
    assertEquals(b_float(0.0), b_float(0.0) / b_byte(23))
    assertEquals(b_float(-0.0), b_float(0.0) / b_byte(-32))
    assertEquals(b_float(0.0), b_float(0.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_byte(0))
    assertEquals(b_float(1.0), b_float(1.0) / p_byte(1))
    assertEquals(b_float(-1.0), b_float(1.0) / p_byte(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / b_byte(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / b_byte(-32))
    assertEquals(b_float(0.007874016), b_float(1.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0078125), b_float(1.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_byte(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_byte(1))
    assertEquals(b_float(1.0), b_float(-1.0) / p_byte(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / b_byte(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / b_byte(-32))
    assertEquals(b_float(-0.007874016), b_float(-1.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.0078125), b_float(-1.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_byte(0))
    assertEquals(b_float(23.0), b_float(23.0) / p_byte(1))
    assertEquals(b_float(-23.0), b_float(23.0) / p_byte(-1))
    assertEquals(b_float(1.0), b_float(23.0) / b_byte(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / b_byte(-32))
    assertEquals(b_float(0.18110237), b_float(23.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.1796875), b_float(23.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_byte(0))
    assertEquals(b_float(23.123), b_float(23.123) / p_byte(1))
    assertEquals(b_float(-23.123), b_float(23.123) / p_byte(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / b_byte(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / b_byte(-32))
    assertEquals(b_float(0.18207087), b_float(23.123) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.18064843), b_float(23.123) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_byte(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_byte(1))
    assertEquals(b_float(32.0), b_float(-32.0) / p_byte(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / b_byte(23))
    assertEquals(b_float(1.0), b_float(-32.0) / b_byte(-32))
    assertEquals(b_float(-0.2519685), b_float(-32.0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.25), b_float(-32.0) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_byte(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_byte(1))
    assertEquals(b_float(32.456), b_float(-32.456) / p_byte(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / b_byte(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / b_byte(-32))
    assertEquals(b_float(-0.25555906), b_float(-32.456) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(0.2535625), b_float(-32.456) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_byte(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_byte(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_byte(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_byte(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_byte(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_byte(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_byte(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_byte(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_byte(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_byte(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_byte(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_byte(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_byte(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_byte(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / p_byte(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / b_byte(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / b_byte(-32))
    assertEquals(b_float(Float.parseFloat("2.6793887E36")), b_float(Float.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.6584558E36")), b_float(Float.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_byte(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_byte(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / p_byte(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_byte(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_byte(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / b_byte(0)))
  }

  function testFloatPShortDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_short(0))
    assertEquals(b_float(0.0), b_float(0.0) / p_short(1))
    assertEquals(b_float(-0.0), b_float(0.0) / p_short(-1))
    assertEquals(b_float(0.0), b_float(0.0) / p_short(23))
    assertEquals(b_float(-0.0), b_float(0.0) / p_short(-32))
    assertEquals(b_float(0.0), b_float(0.0) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_short(0))
    assertEquals(b_float(1.0), b_float(1.0) / p_short(1))
    assertEquals(b_float(-1.0), b_float(1.0) / p_short(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / p_short(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("3.051851E-5")), b_float(1.0) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.0517578E-5")), b_float(1.0) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_short(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_short(1))
    assertEquals(b_float(1.0), b_float(-1.0) / p_short(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / p_short(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("-3.051851E-5")), b_float(-1.0) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.0517578E-5")), b_float(-1.0) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_short(0))
    assertEquals(b_float(23.0), b_float(23.0) / p_short(1))
    assertEquals(b_float(-23.0), b_float(23.0) / p_short(-1))
    assertEquals(b_float(1.0), b_float(23.0) / p_short(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("7.019257E-4")), b_float(23.0) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-7.019043E-4")), b_float(23.0) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_short(0))
    assertEquals(b_float(23.123), b_float(23.123) / p_short(1))
    assertEquals(b_float(-23.123), b_float(23.123) / p_short(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / p_short(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("7.056795E-4")), b_float(23.123) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-7.0565793E-4")), b_float(23.123) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_short(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_short(1))
    assertEquals(b_float(32.0), b_float(-32.0) / p_short(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / p_short(23))
    assertEquals(b_float(1.0), b_float(-32.0) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("-9.765923E-4")), b_float(-32.0) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("9.765625E-4")), b_float(-32.0) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_short(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_short(1))
    assertEquals(b_float(32.456), b_float(-32.456) / p_short(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / p_short(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("-9.905088E-4")), b_float(-32.456) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("9.904786E-4")), b_float(-32.456) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_short(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_short(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / p_short(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / p_short(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / p_short(-32))
    assertEquals(b_float(Float.parseFloat("1.0384911E34")), b_float(Float.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.0384593E34")), b_float(Float.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_short(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_short(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / p_short(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_short(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_short(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / p_short(0)))
  }

  function testFloatShortDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_short(0))
    assertEquals(b_float(0.0), b_float(0.0) / b_short(1))
    assertEquals(b_float(-0.0), b_float(0.0) / b_short(-1))
    assertEquals(b_float(0.0), b_float(0.0) / b_short(23))
    assertEquals(b_float(-0.0), b_float(0.0) / b_short(-32))
    assertEquals(b_float(0.0), b_float(0.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_short(0))
    assertEquals(b_float(1.0), b_float(1.0) / b_short(1))
    assertEquals(b_float(-1.0), b_float(1.0) / b_short(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / b_short(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("3.051851E-5")), b_float(1.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.0517578E-5")), b_float(1.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_short(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / b_short(1))
    assertEquals(b_float(1.0), b_float(-1.0) / b_short(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / b_short(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("-3.051851E-5")), b_float(-1.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.0517578E-5")), b_float(-1.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_short(0))
    assertEquals(b_float(23.0), b_float(23.0) / b_short(1))
    assertEquals(b_float(-23.0), b_float(23.0) / b_short(-1))
    assertEquals(b_float(1.0), b_float(23.0) / b_short(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("7.019257E-4")), b_float(23.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-7.019043E-4")), b_float(23.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_short(0))
    assertEquals(b_float(23.123), b_float(23.123) / b_short(1))
    assertEquals(b_float(-23.123), b_float(23.123) / b_short(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / b_short(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("7.056795E-4")), b_float(23.123) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-7.0565793E-4")), b_float(23.123) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_short(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / b_short(1))
    assertEquals(b_float(32.0), b_float(-32.0) / b_short(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / b_short(23))
    assertEquals(b_float(1.0), b_float(-32.0) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("-9.765923E-4")), b_float(-32.0) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("9.765625E-4")), b_float(-32.0) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_short(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / b_short(1))
    assertEquals(b_float(32.456), b_float(-32.456) / b_short(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / b_short(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("-9.905088E-4")), b_float(-32.456) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("9.904786E-4")), b_float(-32.456) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_short(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / b_short(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / b_short(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / b_short(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / b_short(-32))
    assertEquals(b_float(Float.parseFloat("1.0384911E34")), b_float(Float.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.0384593E34")), b_float(Float.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_short(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / b_short(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / b_short(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_short(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_short(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / b_short(0)))
  }

  function testFloatPCharDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_char(0))
    assertEquals(b_float(0.0), b_float(0.0) / p_char(1))
    assertEquals(b_float(0.0), b_float(0.0) / p_char(23))
    assertEquals(b_float(0.0), b_float(0.0) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_char(0))
    assertEquals(b_float(1.0), b_float(1.0) / p_char(1))
    assertEquals(b_float(0.04347826), b_float(1.0) / p_char(23))
    assertEquals(b_float(Float.parseFloat("1.5259022E-5")), b_float(1.0) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_char(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_char(1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / p_char(23))
    assertEquals(b_float(Float.parseFloat("-1.5259022E-5")), b_float(-1.0) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_char(0))
    assertEquals(b_float(23.0), b_float(23.0) / p_char(1))
    assertEquals(b_float(1.0), b_float(23.0) / p_char(23))
    assertEquals(b_float(Float.parseFloat("3.509575E-4")), b_float(23.0) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_char(0))
    assertEquals(b_float(23.123), b_float(23.123) / p_char(1))
    assertEquals(b_float(1.0053478), b_float(23.123) / p_char(23))
    assertEquals(b_float(Float.parseFloat("3.5283435E-4")), b_float(23.123) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_char(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_char(1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / p_char(23))
    assertEquals(b_float(Float.parseFloat("-4.882887E-4")), b_float(-32.0) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_char(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_char(1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / p_char(23))
    assertEquals(b_float(Float.parseFloat("-4.9524684E-4")), b_float(-32.456) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_char(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_char(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_char(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_char(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_char(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_char(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_char(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_char(1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / p_char(23))
    assertEquals(b_float(Float.parseFloat("5.192376E33")), b_float(Float.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_char(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_char(1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_char(23))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / p_char(0)))
  }

  function testFloatCharacterDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_char(0))
    assertEquals(b_float(0.0), b_float(0.0) / b_char(1))
    assertEquals(b_float(0.0), b_float(0.0) / b_char(23))
    assertEquals(b_float(0.0), b_float(0.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_char(0))
    assertEquals(b_float(1.0), b_float(1.0) / b_char(1))
    assertEquals(b_float(0.04347826), b_float(1.0) / b_char(23))
    assertEquals(b_float(Float.parseFloat("1.5259022E-5")), b_float(1.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_char(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / b_char(1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / b_char(23))
    assertEquals(b_float(Float.parseFloat("-1.5259022E-5")), b_float(-1.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_char(0))
    assertEquals(b_float(23.0), b_float(23.0) / b_char(1))
    assertEquals(b_float(1.0), b_float(23.0) / b_char(23))
    assertEquals(b_float(Float.parseFloat("3.509575E-4")), b_float(23.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_char(0))
    assertEquals(b_float(23.123), b_float(23.123) / b_char(1))
    assertEquals(b_float(1.0053478), b_float(23.123) / b_char(23))
    assertEquals(b_float(Float.parseFloat("3.5283435E-4")), b_float(23.123) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_char(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / b_char(1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / b_char(23))
    assertEquals(b_float(Float.parseFloat("-4.882887E-4")), b_float(-32.0) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_char(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / b_char(1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / b_char(23))
    assertEquals(b_float(Float.parseFloat("-4.9524684E-4")), b_float(-32.456) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_char(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_char(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_char(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_char(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_char(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_char(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_char(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_char(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_char(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_char(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / b_char(1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / b_char(23))
    assertEquals(b_float(Float.parseFloat("5.192376E33")), b_float(Float.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_char(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / b_char(1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_char(23))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / b_char(0)))
  }

  function testFloatPIntDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_int(0))
    assertEquals(b_float(0.0), b_float(0.0) / p_int(1))
    assertEquals(b_float(-0.0), b_float(0.0) / p_int(-1))
    assertEquals(b_float(0.0), b_float(0.0) / p_int(23))
    assertEquals(b_float(-0.0), b_float(0.0) / p_int(-32))
    assertEquals(b_float(0.0), b_float(0.0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_int(0))
    assertEquals(b_float(1.0), b_float(1.0) / p_int(1))
    assertEquals(b_float(-1.0), b_float(1.0) / p_int(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / p_int(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("4.656613E-10")), b_float(1.0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.656613E-10")), b_float(1.0) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_int(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_int(1))
    assertEquals(b_float(1.0), b_float(-1.0) / p_int(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / p_int(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("-4.656613E-10")), b_float(-1.0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("4.656613E-10")), b_float(-1.0) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_int(0))
    assertEquals(b_float(23.0), b_float(23.0) / p_int(1))
    assertEquals(b_float(-23.0), b_float(23.0) / p_int(-1))
    assertEquals(b_float(1.0), b_float(23.0) / p_int(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("1.071021E-8")), b_float(23.0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.071021E-8")), b_float(23.0) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_int(0))
    assertEquals(b_float(23.123), b_float(23.123) / p_int(1))
    assertEquals(b_float(-23.123), b_float(23.123) / p_int(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / p_int(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("1.0767486E-8")), b_float(23.123) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.0767486E-8")), b_float(23.123) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_int(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_int(1))
    assertEquals(b_float(32.0), b_float(-32.0) / p_int(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / p_int(23))
    assertEquals(b_float(1.0), b_float(-32.0) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("-1.4901161E-8")), b_float(-32.0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4901161E-8")), b_float(-32.0) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_int(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_int(1))
    assertEquals(b_float(32.456), b_float(-32.456) / p_int(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / p_int(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("-1.5113503E-8")), b_float(-32.456) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.5113503E-8")), b_float(-32.456) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_int(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_int(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / p_int(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / p_int(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / p_int(-32))
    assertEquals(b_float(Float.parseFloat("1.5845632E29")), b_float(Float.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.5845632E29")), b_float(Float.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_int(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_int(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / p_int(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_int(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_int(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / p_int(0)))
  }

  function testFloatIntegerDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_int(0))
    assertEquals(b_float(0.0), b_float(0.0) / b_int(1))
    assertEquals(b_float(-0.0), b_float(0.0) / b_int(-1))
    assertEquals(b_float(0.0), b_float(0.0) / b_int(23))
    assertEquals(b_float(-0.0), b_float(0.0) / b_int(-32))
    assertEquals(b_float(0.0), b_float(0.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_int(0))
    assertEquals(b_float(1.0), b_float(1.0) / b_int(1))
    assertEquals(b_float(-1.0), b_float(1.0) / b_int(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / b_int(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("4.656613E-10")), b_float(1.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-4.656613E-10")), b_float(1.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_int(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / b_int(1))
    assertEquals(b_float(1.0), b_float(-1.0) / b_int(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / b_int(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("-4.656613E-10")), b_float(-1.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("4.656613E-10")), b_float(-1.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_int(0))
    assertEquals(b_float(23.0), b_float(23.0) / b_int(1))
    assertEquals(b_float(-23.0), b_float(23.0) / b_int(-1))
    assertEquals(b_float(1.0), b_float(23.0) / b_int(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("1.071021E-8")), b_float(23.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.071021E-8")), b_float(23.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_int(0))
    assertEquals(b_float(23.123), b_float(23.123) / b_int(1))
    assertEquals(b_float(-23.123), b_float(23.123) / b_int(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / b_int(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("1.0767486E-8")), b_float(23.123) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.0767486E-8")), b_float(23.123) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_int(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / b_int(1))
    assertEquals(b_float(32.0), b_float(-32.0) / b_int(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / b_int(23))
    assertEquals(b_float(1.0), b_float(-32.0) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("-1.4901161E-8")), b_float(-32.0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.4901161E-8")), b_float(-32.0) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_int(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / b_int(1))
    assertEquals(b_float(32.456), b_float(-32.456) / b_int(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / b_int(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("-1.5113503E-8")), b_float(-32.456) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.5113503E-8")), b_float(-32.456) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_int(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / b_int(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / b_int(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / b_int(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / b_int(-32))
    assertEquals(b_float(Float.parseFloat("1.5845632E29")), b_float(Float.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.5845632E29")), b_float(Float.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_int(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / b_int(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / b_int(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_int(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_int(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / b_int(0)))
  }

  function testFloatPLongDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_long(0))
    assertEquals(b_float(0.0), b_float(0.0) / p_long(1))
    assertEquals(b_float(-0.0), b_float(0.0) / p_long(-1))
    assertEquals(b_float(0.0), b_float(0.0) / p_long(23))
    assertEquals(b_float(-0.0), b_float(0.0) / p_long(-32))
    assertEquals(b_float(0.0), b_float(0.0) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_long(0))
    assertEquals(b_float(1.0), b_float(1.0) / p_long(1))
    assertEquals(b_float(-1.0), b_float(1.0) / p_long(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / p_long(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("1.0842022E-19")), b_float(1.0) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.0842022E-19")), b_float(1.0) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_long(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_long(1))
    assertEquals(b_float(1.0), b_float(-1.0) / p_long(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / p_long(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("-1.0842022E-19")), b_float(-1.0) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.0842022E-19")), b_float(-1.0) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_long(0))
    assertEquals(b_float(23.0), b_float(23.0) / p_long(1))
    assertEquals(b_float(-23.0), b_float(23.0) / p_long(-1))
    assertEquals(b_float(1.0), b_float(23.0) / p_long(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("2.493665E-18")), b_float(23.0) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.493665E-18")), b_float(23.0) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_long(0))
    assertEquals(b_float(23.123), b_float(23.123) / p_long(1))
    assertEquals(b_float(-23.123), b_float(23.123) / p_long(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / p_long(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("2.5070006E-18")), b_float(23.123) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.5070006E-18")), b_float(23.123) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_long(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_long(1))
    assertEquals(b_float(32.0), b_float(-32.0) / p_long(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / p_long(23))
    assertEquals(b_float(1.0), b_float(-32.0) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("-3.469447E-18")), b_float(-32.0) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.469447E-18")), b_float(-32.0) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_long(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_long(1))
    assertEquals(b_float(32.456), b_float(-32.456) / p_long(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / p_long(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("-3.5188867E-18")), b_float(-32.456) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.5188867E-18")), b_float(-32.456) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_long(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_long(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / p_long(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / p_long(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / p_long(-32))
    assertEquals(b_float(Float.parseFloat("3.6893486E19")), b_float(Float.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.6893486E19")), b_float(Float.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_long(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_long(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / p_long(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_long(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_long(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / p_long(0)))
  }

  function testFloatLongDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_long(0))
    assertEquals(b_float(0.0), b_float(0.0) / b_long(1))
    assertEquals(b_float(-0.0), b_float(0.0) / b_long(-1))
    assertEquals(b_float(0.0), b_float(0.0) / b_long(23))
    assertEquals(b_float(-0.0), b_float(0.0) / b_long(-32))
    assertEquals(b_float(0.0), b_float(0.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(0.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_long(0))
    assertEquals(b_float(1.0), b_float(1.0) / b_long(1))
    assertEquals(b_float(-1.0), b_float(1.0) / b_long(-1))
    assertEquals(b_float(0.04347826), b_float(1.0) / b_long(23))
    assertEquals(b_float(-0.03125), b_float(1.0) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("1.0842022E-19")), b_float(1.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-1.0842022E-19")), b_float(1.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_long(0))
    assertEquals(b_float(-1.0), b_float(-1.0) / b_long(1))
    assertEquals(b_float(1.0), b_float(-1.0) / b_long(-1))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / b_long(23))
    assertEquals(b_float(0.03125), b_float(-1.0) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("-1.0842022E-19")), b_float(-1.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("1.0842022E-19")), b_float(-1.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_long(0))
    assertEquals(b_float(23.0), b_float(23.0) / b_long(1))
    assertEquals(b_float(-23.0), b_float(23.0) / b_long(-1))
    assertEquals(b_float(1.0), b_float(23.0) / b_long(23))
    assertEquals(b_float(-0.71875), b_float(23.0) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("2.493665E-18")), b_float(23.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.493665E-18")), b_float(23.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_long(0))
    assertEquals(b_float(23.123), b_float(23.123) / b_long(1))
    assertEquals(b_float(-23.123), b_float(23.123) / b_long(-1))
    assertEquals(b_float(1.0053478), b_float(23.123) / b_long(23))
    assertEquals(b_float(-0.7225937), b_float(23.123) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("2.5070006E-18")), b_float(23.123) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-2.5070006E-18")), b_float(23.123) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_long(0))
    assertEquals(b_float(-32.0), b_float(-32.0) / b_long(1))
    assertEquals(b_float(32.0), b_float(-32.0) / b_long(-1))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / b_long(23))
    assertEquals(b_float(1.0), b_float(-32.0) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("-3.469447E-18")), b_float(-32.0) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.469447E-18")), b_float(-32.0) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_long(0))
    assertEquals(b_float(-32.456), b_float(-32.456) / b_long(1))
    assertEquals(b_float(32.456), b_float(-32.456) / b_long(-1))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / b_long(23))
    assertEquals(b_float(1.01425), b_float(-32.456) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("-3.5188867E-18")), b_float(-32.456) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("3.5188867E-18")), b_float(-32.456) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(-1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(23))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(-32))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(1))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(-1))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(23))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(-32))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(-1))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(23))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(-32))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_long(0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / b_long(1))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / b_long(-1))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / b_long(23))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / b_long(-32))
    assertEquals(b_float(Float.parseFloat("3.6893486E19")), b_float(Float.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(Float.parseFloat("-3.6893486E19")), b_float(Float.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_long(0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / b_long(1))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / b_long(-1))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_long(23))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_long(-32))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / b_long(0)))
  }

  function testFloatPFloatDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_float(0.0))
    assertEquals(b_float(0.0), b_float(0.0) / p_float(1.0))
    assertEquals(b_float(-0.0), b_float(0.0) / p_float(-1.0))
    assertEquals(b_float(0.0), b_float(0.0) / p_float(23.0))
    assertEquals(b_float(0.0), b_float(0.0) / p_float(23.123))
    assertEquals(b_float(-0.0), b_float(0.0) / p_float(-32.0))
    assertEquals(b_float(-0.0), b_float(0.0) / p_float(-32.456))
    assertEquals(b_float(0.0), b_float(0.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(0.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) / p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(0.0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_float(0.0))
    assertEquals(b_float(1.0), b_float(1.0) / p_float(1.0))
    assertEquals(b_float(-1.0), b_float(1.0) / p_float(-1.0))
    assertEquals(b_float(0.04347826), b_float(1.0) / p_float(23.0))
    assertEquals(b_float(0.043246984), b_float(1.0) / p_float(23.123))
    assertEquals(b_float(-0.03125), b_float(1.0) / p_float(-32.0))
    assertEquals(b_float(-0.030810943), b_float(1.0) / p_float(-32.456))
    assertEquals(b_float(0.0), b_float(1.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(1.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(1.0) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), b_float(1.0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_float(0.0))
    assertEquals(b_float(-1.0), b_float(-1.0) / p_float(1.0))
    assertEquals(b_float(1.0), b_float(-1.0) / p_float(-1.0))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / p_float(23.0))
    assertEquals(b_float(-0.043246984), b_float(-1.0) / p_float(23.123))
    assertEquals(b_float(0.03125), b_float(-1.0) / p_float(-32.0))
    assertEquals(b_float(0.030810943), b_float(-1.0) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_float(-1.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(-1.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-1.0) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), b_float(-1.0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_float(0.0))
    assertEquals(b_float(23.0), b_float(23.0) / p_float(1.0))
    assertEquals(b_float(-23.0), b_float(23.0) / p_float(-1.0))
    assertEquals(b_float(1.0), b_float(23.0) / p_float(23.0))
    assertEquals(b_float(0.99468064), b_float(23.0) / p_float(23.123))
    assertEquals(b_float(-0.71875), b_float(23.0) / p_float(-32.0))
    assertEquals(b_float(-0.70865166), b_float(23.0) / p_float(-32.456))
    assertEquals(b_float(0.0), b_float(23.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(23.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.0) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), b_float(23.0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_float(0.0))
    assertEquals(b_float(23.123), b_float(23.123) / p_float(1.0))
    assertEquals(b_float(-23.123), b_float(23.123) / p_float(-1.0))
    assertEquals(b_float(1.0053478), b_float(23.123) / p_float(23.0))
    assertEquals(b_float(1.0), b_float(23.123) / p_float(23.123))
    assertEquals(b_float(-0.7225937), b_float(23.123) / p_float(-32.0))
    assertEquals(b_float(-0.7124414), b_float(23.123) / p_float(-32.456))
    assertEquals(b_float(0.0), b_float(23.123) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(23.123) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.123) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.7952393E-38")), b_float(23.123) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_float(0.0))
    assertEquals(b_float(-32.0), b_float(-32.0) / p_float(1.0))
    assertEquals(b_float(32.0), b_float(-32.0) / p_float(-1.0))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / p_float(23.0))
    assertEquals(b_float(-1.3839035), b_float(-32.0) / p_float(23.123))
    assertEquals(b_float(1.0), b_float(-32.0) / p_float(-32.0))
    assertEquals(b_float(0.9859502), b_float(-32.0) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_float(-32.0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(-32.0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.0) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), b_float(-32.0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_float(0.0))
    assertEquals(b_float(-32.456), b_float(-32.456) / p_float(1.0))
    assertEquals(b_float(32.456), b_float(-32.456) / p_float(-1.0))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / p_float(23.0))
    assertEquals(b_float(-1.4036242), b_float(-32.456) / p_float(23.123))
    assertEquals(b_float(1.01425), b_float(-32.456) / p_float(-32.0))
    assertEquals(b_float(1.0), b_float(-32.456) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_float(-32.456) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(-32.456) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.456) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.537963E-38")), b_float(-32.456) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(0.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(-1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(23.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(23.123))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(-32.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) / p_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(0.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(-1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(23.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(23.123))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(-32.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) / p_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_float(0.0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / p_float(1.0))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / p_float(-1.0))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / p_float(23.0))
    assertEquals(b_float(Float.parseFloat("1.4716185E37")), b_float(Float.MAX_VALUE) / p_float(23.123))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / p_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-1.048442E37")), b_float(Float.MAX_VALUE) / p_float(-32.456))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(Float.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(b_float(1.0), b_float(Float.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_float(0.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / p_float(1.0))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / p_float(-1.0))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_float(23.0))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_float(23.123))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_float(-32.0))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_float(-32.456))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(Float.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / p_float(0.0)))
  }

  function testFloatFloatDivision() {
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_float(0.0))
    assertEquals(b_float(0.0), b_float(0.0) / b_float(1.0))
    assertEquals(b_float(-0.0), b_float(0.0) / b_float(-1.0))
    assertEquals(b_float(0.0), b_float(0.0) / b_float(23.0))
    assertEquals(b_float(0.0), b_float(0.0) / b_float(23.123))
    assertEquals(b_float(-0.0), b_float(0.0) / b_float(-32.0))
    assertEquals(b_float(-0.0), b_float(0.0) / b_float(-32.456))
    assertEquals(b_float(0.0), b_float(0.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(0.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(0.0) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(0.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_float(0.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_float(0.0))
    assertEquals(b_float(1.0), b_float(1.0) / b_float(1.0))
    assertEquals(b_float(-1.0), b_float(1.0) / b_float(-1.0))
    assertEquals(b_float(0.04347826), b_float(1.0) / b_float(23.0))
    assertEquals(b_float(0.043246984), b_float(1.0) / b_float(23.123))
    assertEquals(b_float(-0.03125), b_float(1.0) / b_float(-32.0))
    assertEquals(b_float(-0.030810943), b_float(1.0) / b_float(-32.456))
    assertEquals(b_float(0.0), b_float(1.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(1.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(1.0) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), b_float(1.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(1.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_float(0.0))
    assertEquals(b_float(-1.0), b_float(-1.0) / b_float(1.0))
    assertEquals(b_float(1.0), b_float(-1.0) / b_float(-1.0))
    assertEquals(b_float(-0.04347826), b_float(-1.0) / b_float(23.0))
    assertEquals(b_float(-0.043246984), b_float(-1.0) / b_float(23.123))
    assertEquals(b_float(0.03125), b_float(-1.0) / b_float(-32.0))
    assertEquals(b_float(0.030810943), b_float(-1.0) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_float(-1.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(-1.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-1.0) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), b_float(-1.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-1.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_float(0.0))
    assertEquals(b_float(23.0), b_float(23.0) / b_float(1.0))
    assertEquals(b_float(-23.0), b_float(23.0) / b_float(-1.0))
    assertEquals(b_float(1.0), b_float(23.0) / b_float(23.0))
    assertEquals(b_float(0.99468064), b_float(23.0) / b_float(23.123))
    assertEquals(b_float(-0.71875), b_float(23.0) / b_float(-32.0))
    assertEquals(b_float(-0.70865166), b_float(23.0) / b_float(-32.456))
    assertEquals(b_float(0.0), b_float(23.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(23.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.0) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), b_float(23.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_float(0.0))
    assertEquals(b_float(23.123), b_float(23.123) / b_float(1.0))
    assertEquals(b_float(-23.123), b_float(23.123) / b_float(-1.0))
    assertEquals(b_float(1.0053478), b_float(23.123) / b_float(23.0))
    assertEquals(b_float(1.0), b_float(23.123) / b_float(23.123))
    assertEquals(b_float(-0.7225937), b_float(23.123) / b_float(-32.0))
    assertEquals(b_float(-0.7124414), b_float(23.123) / b_float(-32.456))
    assertEquals(b_float(0.0), b_float(23.123) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(23.123) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(23.123) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.7952393E-38")), b_float(23.123) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(23.123) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_float(0.0))
    assertEquals(b_float(-32.0), b_float(-32.0) / b_float(1.0))
    assertEquals(b_float(32.0), b_float(-32.0) / b_float(-1.0))
    assertEquals(b_float(-1.3913044), b_float(-32.0) / b_float(23.0))
    assertEquals(b_float(-1.3839035), b_float(-32.0) / b_float(23.123))
    assertEquals(b_float(1.0), b_float(-32.0) / b_float(-32.0))
    assertEquals(b_float(0.9859502), b_float(-32.0) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_float(-32.0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(-32.0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.0) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), b_float(-32.0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_float(0.0))
    assertEquals(b_float(-32.456), b_float(-32.456) / b_float(1.0))
    assertEquals(b_float(32.456), b_float(-32.456) / b_float(-1.0))
    assertEquals(b_float(-1.4111305), b_float(-32.456) / b_float(23.0))
    assertEquals(b_float(-1.4036242), b_float(-32.456) / b_float(23.123))
    assertEquals(b_float(1.01425), b_float(-32.456) / b_float(-32.0))
    assertEquals(b_float(1.0), b_float(-32.456) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_float(-32.456) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_float(-32.456) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(-32.456) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.537963E-38")), b_float(-32.456) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(-32.456) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(0.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(-1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(23.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(23.123))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(-32.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.POSITIVE_INFINITY) / b_float(Float.NaN_))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(0.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(1.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(-1.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(23.0))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(23.123))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(-32.0))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NEGATIVE_INFINITY) / b_float(Float.NaN_))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(0.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(-1.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(23.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(23.123))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(-32.0))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(-32.456))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(Float.NaN_))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NaN_), b_float(Float.NaN_) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_float(0.0))
    assertEquals(b_float(Float.parseFloat("3.4028235E38")), b_float(Float.MAX_VALUE) / b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-3.4028235E38")), b_float(Float.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("1.4794885E37")), b_float(Float.MAX_VALUE) / b_float(23.0))
    assertEquals(b_float(Float.parseFloat("1.4716185E37")), b_float(Float.MAX_VALUE) / b_float(23.123))
    assertEquals(b_float(Float.parseFloat("-1.06338233E37")), b_float(Float.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-1.048442E37")), b_float(Float.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), b_float(Float.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(Float.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(1.0), b_float(Float.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_float(0.0))
    assertEquals(b_float(Float.parseFloat("1.4E-45")), b_float(Float.MIN_VALUE) / b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-1.4E-45")), b_float(Float.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_float(23.0))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_float(23.123))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_float(Float.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_float(Float.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_float(Float.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(1.0), b_float(Float.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_float(0.0) / b_float(0.0)))
  }

  function testFloatPDoubleDivision() {
    assertEquals(b_double(Double.NaN_), b_float(0.0) / p_double(0.0))
    assertEquals(b_double(0.0), b_float(0.0) / p_double(1.0))
    assertEquals(b_double(-0.0), b_float(0.0) / p_double(-1.0))
    assertEquals(b_double(0.0), b_float(0.0) / p_double(23.0))
    assertEquals(b_double(0.0), b_float(0.0) / p_double(23.123))
    assertEquals(b_double(-0.0), b_float(0.0) / p_double(-32.0))
    assertEquals(b_double(-0.0), b_float(0.0) / p_double(-32.456))
    assertEquals(b_double(0.0), b_float(0.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(0.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) / p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(0.0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(0.0) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(1.0) / p_double(0.0))
    assertEquals(b_double(1.0), b_float(1.0) / p_double(1.0))
    assertEquals(b_double(-1.0), b_float(1.0) / p_double(-1.0))
    assertEquals(b_double(0.043478260869565216), b_float(1.0) / p_double(23.0))
    assertEquals(b_double(0.043246983522899275), b_float(1.0) / p_double(23.123))
    assertEquals(b_double(-0.03125), b_float(1.0) / p_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), b_float(1.0) / p_double(-32.456))
    assertEquals(b_double(0.0), b_float(1.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(1.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(1.0) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), b_float(1.0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(1.0) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-1.0) / p_double(0.0))
    assertEquals(b_double(-1.0), b_float(-1.0) / p_double(1.0))
    assertEquals(b_double(1.0), b_float(-1.0) / p_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), b_float(-1.0) / p_double(23.0))
    assertEquals(b_double(-0.043246983522899275), b_float(-1.0) / p_double(23.123))
    assertEquals(b_double(0.03125), b_float(-1.0) / p_double(-32.0))
    assertEquals(b_double(0.03081094404732561), b_float(-1.0) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_float(-1.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(-1.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-1.0) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), b_float(-1.0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-1.0) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) / p_double(0.0))
    assertEquals(b_double(23.0), b_float(23.0) / p_double(1.0))
    assertEquals(b_double(-23.0), b_float(23.0) / p_double(-1.0))
    assertEquals(b_double(1.0), b_float(23.0) / p_double(23.0))
    assertEquals(b_double(0.9946806210266833), b_float(23.0) / p_double(23.123))
    assertEquals(b_double(-0.71875), b_float(23.0) / p_double(-32.0))
    assertEquals(b_double(-0.708651713088489), b_float(23.0) / p_double(-32.456))
    assertEquals(b_double(0.0), b_float(23.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(23.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.0) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), b_float(23.0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) / p_double(0.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) / p_double(1.0))
    assertEquals(b_double(-23.12299919128418), b_float(23.123) / p_double(-1.0))
    assertEquals(b_double(1.0053477909253992), b_float(23.123) / p_double(23.0))
    assertEquals(b_double(0.9999999650254802), b_float(23.123) / p_double(23.123))
    assertEquals(b_double(-0.7225937247276306), b_float(23.123) / p_double(-32.0))
    assertEquals(b_double(-0.7124414342890121), b_float(23.123) / p_double(-32.456))
    assertEquals(b_double(0.0), b_float(23.123) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(23.123) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.123) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.2862595257702399E-307")), b_float(23.123) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) / p_double(0.0))
    assertEquals(b_double(-32.0), b_float(-32.0) / p_double(1.0))
    assertEquals(b_double(32.0), b_float(-32.0) / p_double(-1.0))
    assertEquals(b_double(-1.391304347826087), b_float(-32.0) / p_double(23.0))
    assertEquals(b_double(-1.3839034727327768), b_float(-32.0) / p_double(23.123))
    assertEquals(b_double(1.0), b_float(-32.0) / p_double(-32.0))
    assertEquals(b_double(0.9859502095144195), b_float(-32.0) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_float(-32.0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(-32.0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.0) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), b_float(-32.0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) / p_double(0.0))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) / p_double(1.0))
    assertEquals(b_double(32.45600128173828), b_float(-32.456) / p_double(-1.0))
    assertEquals(b_double(-1.41113049051036), b_float(-32.456) / p_double(23.0))
    assertEquals(b_double(-1.4036241526505333), b_float(-32.456) / p_double(23.123))
    assertEquals(b_double(1.0142500400543213), b_float(-32.456) / p_double(-32.0))
    assertEquals(b_double(1.0000000394915665), b_float(-32.456) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_float(-32.456) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(-32.456) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.456) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.805425000091802E-307")), b_float(-32.456) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(-1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) / p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(-1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) / p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_double(0.0))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) / p_double(1.0))
    assertEquals(b_double(Double.parseDouble("-3.4028234663852886E38")), b_float(Float.MAX_VALUE) / p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("1.4794884636457776E37")), b_float(Float.MAX_VALUE) / p_double(23.0))
    assertEquals(b_double(Double.parseDouble("1.4716185038209957E37")), b_float(Float.MAX_VALUE) / p_double(23.123))
    assertEquals(b_double(Double.parseDouble("-1.0633823332454027E37")), b_float(Float.MAX_VALUE) / p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-1.0484420342572369E37")), b_float(Float.MAX_VALUE) / p_double(-32.456))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(Float.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.8928833850421913E-270")), b_float(Float.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / p_double(0.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) / p_double(1.0))
    assertEquals(b_double(Double.parseDouble("-1.401298464324817E-45")), b_float(Float.MIN_VALUE) / p_double(-1.0))
    assertEquals(b_double(Double.parseDouble("6.092602018803552E-47")), b_float(Float.MIN_VALUE) / p_double(23.0))
    assertEquals(b_double(Double.parseDouble("6.060193159731942E-47")), b_float(Float.MIN_VALUE) / p_double(23.123))
    assertEquals(b_double(Double.parseDouble("-4.3790577010150533E-47")), b_float(Float.MIN_VALUE) / p_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-4.317532857791524E-47")), b_float(Float.MIN_VALUE) / p_double(-32.456))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(Float.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("2.83625966735417E278")), b_float(Float.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_float(0.0) / p_double(0.0)))
  }

  function testFloatDoubleDivision() {
    assertEquals(b_double(Double.NaN_), b_float(0.0) / b_double(0.0))
    assertEquals(b_double(0.0), b_float(0.0) / b_double(1.0))
    assertEquals(b_double(-0.0), b_float(0.0) / b_double(-1.0))
    assertEquals(b_double(0.0), b_float(0.0) / b_double(23.0))
    assertEquals(b_double(0.0), b_float(0.0) / b_double(23.123))
    assertEquals(b_double(-0.0), b_float(0.0) / b_double(-32.0))
    assertEquals(b_double(-0.0), b_float(0.0) / b_double(-32.456))
    assertEquals(b_double(0.0), b_float(0.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(0.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(0.0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(0.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_float(0.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(1.0) / b_double(0.0))
    assertEquals(b_double(1.0), b_float(1.0) / b_double(1.0))
    assertEquals(b_double(-1.0), b_float(1.0) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), b_float(1.0) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), b_float(1.0) / b_double(23.123))
    assertEquals(b_double(-0.03125), b_float(1.0) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), b_float(1.0) / b_double(-32.456))
    assertEquals(b_double(0.0), b_float(1.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(1.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(1.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), b_float(1.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(1.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-1.0) / b_double(0.0))
    assertEquals(b_double(-1.0), b_float(-1.0) / b_double(1.0))
    assertEquals(b_double(1.0), b_float(-1.0) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), b_float(-1.0) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), b_float(-1.0) / b_double(23.123))
    assertEquals(b_double(0.03125), b_float(-1.0) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), b_float(-1.0) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_float(-1.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(-1.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-1.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), b_float(-1.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-1.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) / b_double(0.0))
    assertEquals(b_double(23.0), b_float(23.0) / b_double(1.0))
    assertEquals(b_double(-23.0), b_float(23.0) / b_double(-1.0))
    assertEquals(b_double(1.0), b_float(23.0) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), b_float(23.0) / b_double(23.123))
    assertEquals(b_double(-0.71875), b_float(23.0) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), b_float(23.0) / b_double(-32.456))
    assertEquals(b_double(0.0), b_float(23.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(23.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), b_float(23.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) / b_double(0.0))
    assertEquals(b_double(23.12299919128418), b_float(23.123) / b_double(1.0))
    assertEquals(b_double(-23.12299919128418), b_float(23.123) / b_double(-1.0))
    assertEquals(b_double(1.0053477909253992), b_float(23.123) / b_double(23.0))
    assertEquals(b_double(0.9999999650254802), b_float(23.123) / b_double(23.123))
    assertEquals(b_double(-0.7225937247276306), b_float(23.123) / b_double(-32.0))
    assertEquals(b_double(-0.7124414342890121), b_float(23.123) / b_double(-32.456))
    assertEquals(b_double(0.0), b_float(23.123) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(23.123) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(23.123) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.2862595257702399E-307")), b_float(23.123) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(23.123) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) / b_double(0.0))
    assertEquals(b_double(-32.0), b_float(-32.0) / b_double(1.0))
    assertEquals(b_double(32.0), b_float(-32.0) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), b_float(-32.0) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), b_float(-32.0) / b_double(23.123))
    assertEquals(b_double(1.0), b_float(-32.0) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), b_float(-32.0) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_float(-32.0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(-32.0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.0) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), b_float(-32.0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) / b_double(0.0))
    assertEquals(b_double(-32.45600128173828), b_float(-32.456) / b_double(1.0))
    assertEquals(b_double(32.45600128173828), b_float(-32.456) / b_double(-1.0))
    assertEquals(b_double(-1.41113049051036), b_float(-32.456) / b_double(23.0))
    assertEquals(b_double(-1.4036241526505333), b_float(-32.456) / b_double(23.123))
    assertEquals(b_double(1.0142500400543213), b_float(-32.456) / b_double(-32.0))
    assertEquals(b_double(1.0000000394915665), b_float(-32.456) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_float(-32.456) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_float(-32.456) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(-32.456) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.805425000091802E-307")), b_float(-32.456) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(-32.456) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(-1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.POSITIVE_INFINITY) / b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.POSITIVE_INFINITY) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(1.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(-1.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NEGATIVE_INFINITY) / b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_float(Float.NEGATIVE_INFINITY) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(0.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(-1.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(23.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(23.123))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_float(Float.NaN_) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_float(Float.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-3.4028234663852886E38")), b_float(Float.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("1.4794884636457776E37")), b_float(Float.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("1.4716185038209957E37")), b_float(Float.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-1.0633823332454027E37")), b_float(Float.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-1.0484420342572369E37")), b_float(Float.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), b_float(Float.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(Float.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.8928833850421913E-270")), b_float(Float.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_float(Float.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_float(Float.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-1.401298464324817E-45")), b_float(Float.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("6.092602018803552E-47")), b_float(Float.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("6.060193159731942E-47")), b_float(Float.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-4.3790577010150533E-47")), b_float(Float.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-4.317532857791524E-47")), b_float(Float.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_float(Float.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_float(Float.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_float(Float.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("2.83625966735417E278")), b_float(Float.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_float(0.0) / b_double(0.0)))
  }

  function testFloatBigIntegerDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> b_float(0.0) / big_int("0"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_int("1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_int("-1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_int("23"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_int("-32"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(1.0) / big_int("0"))
    assertEquals(big_decimal("1.0"), b_float(1.0) / big_int("1"))
    assertEquals(big_decimal("-1.0"), b_float(1.0) / big_int("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), b_float(1.0) / big_int("23"))
    assertEquals(big_decimal("-0.03125"), b_float(1.0) / big_int("-32"))
    assertEquals(big_decimal("8.100000072900000663390006036857155E-30"), b_float(1.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-8.100000072900000663390006036857155E-30"), b_float(1.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-1.0) / big_int("0"))
    assertEquals(big_decimal("-1.0"), b_float(-1.0) / big_int("1"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) / big_int("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), b_float(-1.0) / big_int("23"))
    assertEquals(big_decimal("0.03125"), b_float(-1.0) / big_int("-32"))
    assertEquals(big_decimal("-8.100000072900000663390006036857155E-30"), b_float(-1.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("8.100000072900000663390006036857155E-30"), b_float(-1.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.0) / big_int("0"))
    assertEquals(big_decimal("23.0"), b_float(23.0) / big_int("1"))
    assertEquals(big_decimal("-23.0"), b_float(23.0) / big_int("-1"))
    assertEquals(big_decimal("1.0"), b_float(23.0) / big_int("23"))
    assertEquals(big_decimal("-0.71875"), b_float(23.0) / big_int("-32"))
    assertEquals(big_decimal("1.863000016767000152579701388477146E-28"), b_float(23.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.863000016767000152579701388477146E-28"), b_float(23.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.123) / big_int("0"))
    assertEquals(big_decimal("23.123"), b_float(23.123) / big_int("1"))
    assertEquals(big_decimal("-23.123"), b_float(23.123) / big_int("-1"))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), b_float(23.123) / big_int("23"))
    assertEquals(big_decimal("-0.72259375"), b_float(23.123) / big_int("-32"))
    assertEquals(big_decimal("1.872963016856667153395671095902480E-28"), b_float(23.123) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.872963016856667153395671095902480E-28"), b_float(23.123) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.0) / big_int("0"))
    assertEquals(big_decimal("-32.0"), b_float(-32.0) / big_int("1"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) / big_int("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), b_float(-32.0) / big_int("23"))
    assertEquals(big_decimal("1.0"), b_float(-32.0) / big_int("-32"))
    assertEquals(big_decimal("-2.592000023328000212284801931794290E-28"), b_float(-32.0) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("2.592000023328000212284801931794290E-28"), b_float(-32.0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.456) / big_int("0"))
    assertEquals(big_decimal("-32.456"), b_float(-32.456) / big_int("1"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) / big_int("-1"))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), b_float(-32.456) / big_int("23"))
    assertEquals(big_decimal("1.01425"), b_float(-32.456) / big_int("-32"))
    assertEquals(big_decimal("-2.628936023660424215309860359322358E-28"), b_float(-32.456) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("2.628936023660424215309860359322358E-28"), b_float(-32.456) / big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("0"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("23"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-32"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MAX_VALUE) / big_int("0"))
    assertEquals(big_decimal("3.4028235E+38"), b_float(Float.MAX_VALUE) / big_int("1"))
    assertEquals(big_decimal("-3.4028235E+38"), b_float(Float.MAX_VALUE) / big_int("-1"))
    assertEquals(big_decimal("1.479488478260869565217391304347826E+37"), b_float(Float.MAX_VALUE) / big_int("23"))
    assertEquals(big_decimal("-1.06338234375E+37"), b_float(Float.MAX_VALUE) / big_int("-32"))
    assertEquals(big_decimal("2756287059.806583540739910220735939"), b_float(Float.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-2756287059.806583540739910220735939"), b_float(Float.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MIN_VALUE) / big_int("0"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) / big_int("1"))
    assertEquals(big_decimal("-1.4E-45"), b_float(Float.MIN_VALUE) / big_int("-1"))
    assertEquals(big_decimal("6.086956521739130434782608695652174E-47"), b_float(Float.MIN_VALUE) / big_int("23"))
    assertEquals(big_decimal("-4.375E-47"), b_float(Float.MIN_VALUE) / big_int("-32"))
    assertEquals(big_decimal("1.134000010206000092874600845160002E-74"), b_float(Float.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-1.134000010206000092874600845160002E-74"), b_float(Float.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(b_float(0.0) / big_int("0")))
  }

  function testFloatBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> b_float(0.0) / big_decimal("0"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_decimal("1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_decimal("-1"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_decimal("23"))
    assertEquals(big_decimal("0E+2"), b_float(0.0) / big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), b_float(0.0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+2"), b_float(0.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+8"), b_float(0.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+8"), b_float(0.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(1.0) / big_decimal("0"))
    assertEquals(big_decimal("1.0"), b_float(1.0) / big_decimal("1"))
    assertEquals(big_decimal("-1.0"), b_float(1.0) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), b_float(1.0) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), b_float(1.0) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), b_float(1.0) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), b_float(1.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), b_float(1.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), b_float(1.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-1.0) / big_decimal("0"))
    assertEquals(big_decimal("-1.0"), b_float(-1.0) / big_decimal("1"))
    assertEquals(big_decimal("1.0"), b_float(-1.0) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), b_float(-1.0) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), b_float(-1.0) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), b_float(-1.0) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), b_float(-1.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), b_float(-1.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), b_float(-1.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.0) / big_decimal("0"))
    assertEquals(big_decimal("23.0"), b_float(23.0) / big_decimal("1"))
    assertEquals(big_decimal("-23.0"), b_float(23.0) / big_decimal("-1"))
    assertEquals(big_decimal("1.0"), b_float(23.0) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), b_float(23.0) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), b_float(23.0) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), b_float(23.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), b_float(23.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), b_float(23.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(23.123) / big_decimal("0"))
    assertEquals(big_decimal("23.123"), b_float(23.123) / big_decimal("1"))
    assertEquals(big_decimal("-23.123"), b_float(23.123) / big_decimal("-1"))
    assertEquals(big_decimal("1.005347826086956521739130434782609"), b_float(23.123) / big_decimal("23"))
    assertEquals(big_decimal("1"), b_float(23.123) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.72259375"), b_float(23.123) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7124414592063100813408922849396105"), b_float(23.123) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.872963016856667153395671095900607E-28"), b_float(23.123) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.872963016856667153395671095900607E-28"), b_float(23.123) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.0) / big_decimal("0"))
    assertEquals(big_decimal("-32.0"), b_float(-32.0) / big_decimal("1"))
    assertEquals(big_decimal("32.0"), b_float(-32.0) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), b_float(-32.0) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), b_float(-32.0) / big_decimal("23.123"))
    assertEquals(big_decimal("1.0"), b_float(-32.0) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), b_float(-32.0) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), b_float(-32.0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), b_float(-32.0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(-32.456) / big_decimal("0"))
    assertEquals(big_decimal("-32.456"), b_float(-32.456) / big_decimal("1"))
    assertEquals(big_decimal("32.456"), b_float(-32.456) / big_decimal("-1"))
    assertEquals(big_decimal("-1.411130434782608695652173913043478"), b_float(-32.456) / big_decimal("23"))
    assertEquals(big_decimal("-1.403624097219218959477576439043377"), b_float(-32.456) / big_decimal("23.123"))
    assertEquals(big_decimal("1.01425"), b_float(-32.456) / big_decimal("-32"))
    assertEquals(big_decimal("1"), b_float(-32.456) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.628936023660424215309860359319729E-28"), b_float(-32.456) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.628936023660424215309860359319729E-28"), b_float(-32.456) / big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.POSITIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.NEGATIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("0"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-1"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("23"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_float(Float.NaN_) - big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("3.4028235E+38"), b_float(Float.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-3.4028235E+38"), b_float(Float.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("1.479488478260869565217391304347826E+37"), b_float(Float.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("1.471618518358344505470743415646759E+37"), b_float(Float.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-1.06338234375E+37"), b_float(Float.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-1.048442044614246980527483362090214E+37"), b_float(Float.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("2756287059.806583540739910220733183"), b_float(Float.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2756287059.806583540739910220733183"), b_float(Float.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_float(Float.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("1.4E-45"), b_float(Float.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-1.4E-45"), b_float(Float.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("6.086956521739130434782608695652174E-47"), b_float(Float.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("6.054577693205898888552523461488561E-47"), b_float(Float.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-4.375E-47"), b_float(Float.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-4.313532166625585407936899186591077E-47"), b_float(Float.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.134000010206000092874600845158868E-74"), b_float(Float.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.134000010206000092874600845158868E-74"), b_float(Float.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_float(0.0) / big_decimal("0")))
  }

}

