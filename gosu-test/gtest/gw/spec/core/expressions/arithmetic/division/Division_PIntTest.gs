package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_PIntTest extends ArithmeticTestBase {

  function testPIntPByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / p_byte(0))
    assertEquals(p_int(0), p_int(0) / p_byte(1))
    assertEquals(p_int(0), p_int(0) / p_byte(-1))
    assertEquals(p_int(0), p_int(0) / p_byte(23))
    assertEquals(p_int(0), p_int(0) / p_byte(-32))
    assertEquals(p_int(0), p_int(0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_int(0) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / p_byte(0))
    assertEquals(p_int(1), p_int(1) / p_byte(1))
    assertEquals(p_int(-1), p_int(1) / p_byte(-1))
    assertEquals(p_int(0), p_int(1) / p_byte(23))
    assertEquals(p_int(0), p_int(1) / p_byte(-32))
    assertEquals(p_int(0), p_int(1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_int(1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / p_byte(0))
    assertEquals(p_int(-1), p_int(-1) / p_byte(1))
    assertEquals(p_int(1), p_int(-1) / p_byte(-1))
    assertEquals(p_int(0), p_int(-1) / p_byte(23))
    assertEquals(p_int(0), p_int(-1) / p_byte(-32))
    assertEquals(p_int(0), p_int(-1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_int(-1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / p_byte(0))
    assertEquals(p_int(23), p_int(23) / p_byte(1))
    assertEquals(p_int(-23), p_int(23) / p_byte(-1))
    assertEquals(p_int(1), p_int(23) / p_byte(23))
    assertEquals(p_int(0), p_int(23) / p_byte(-32))
    assertEquals(p_int(0), p_int(23) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_int(23) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / p_byte(0))
    assertEquals(p_int(-32), p_int(-32) / p_byte(1))
    assertEquals(p_int(32), p_int(-32) / p_byte(-1))
    assertEquals(p_int(-1), p_int(-32) / p_byte(23))
    assertEquals(p_int(1), p_int(-32) / p_byte(-32))
    assertEquals(p_int(0), p_int(-32) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_int(-32) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / p_byte(0))
    assertEquals(p_int(2147483647), p_int(Integer.MAX_VALUE) / p_byte(1))
    assertEquals(p_int(-2147483647), p_int(Integer.MAX_VALUE) / p_byte(-1))
    assertEquals(p_int(93368854), p_int(Integer.MAX_VALUE) / p_byte(23))
    assertEquals(p_int(-67108863), p_int(Integer.MAX_VALUE) / p_byte(-32))
    assertEquals(p_int(16909320), p_int(Integer.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-16777215), p_int(Integer.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / p_byte(0))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_byte(1))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_byte(-1))
    assertEquals(p_int(-93368854), p_int(Integer.MIN_VALUE) / p_byte(23))
    assertEquals(p_int(67108864), p_int(Integer.MIN_VALUE) / p_byte(-32))
    assertEquals(p_int(-16909320), p_int(Integer.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(16777216), p_int(Integer.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(int, statictypeof(p_int(0) / p_byte(0)))
  }

  function testPIntByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / b_byte(0))
    assertEquals(p_int(0), p_int(0) / p_byte(1))
    assertEquals(p_int(0), p_int(0) / p_byte(-1))
    assertEquals(b_int(0), p_int(0) / b_byte(23))
    assertEquals(b_int(0), p_int(0) / b_byte(-32))
    assertEquals(b_int(0), p_int(0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_int(0) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / b_byte(0))
    assertEquals(p_int(1), p_int(1) / p_byte(1))
    assertEquals(p_int(-1), p_int(1) / p_byte(-1))
    assertEquals(b_int(0), p_int(1) / b_byte(23))
    assertEquals(b_int(0), p_int(1) / b_byte(-32))
    assertEquals(b_int(0), p_int(1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_int(1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / b_byte(0))
    assertEquals(p_int(-1), p_int(-1) / p_byte(1))
    assertEquals(p_int(1), p_int(-1) / p_byte(-1))
    assertEquals(b_int(0), p_int(-1) / b_byte(23))
    assertEquals(b_int(0), p_int(-1) / b_byte(-32))
    assertEquals(b_int(0), p_int(-1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_int(-1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / b_byte(0))
    assertEquals(p_int(23), p_int(23) / p_byte(1))
    assertEquals(p_int(-23), p_int(23) / p_byte(-1))
    assertEquals(b_int(1), p_int(23) / b_byte(23))
    assertEquals(b_int(0), p_int(23) / b_byte(-32))
    assertEquals(b_int(0), p_int(23) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_int(23) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / b_byte(0))
    assertEquals(p_int(-32), p_int(-32) / p_byte(1))
    assertEquals(p_int(32), p_int(-32) / p_byte(-1))
    assertEquals(b_int(-1), p_int(-32) / b_byte(23))
    assertEquals(b_int(1), p_int(-32) / b_byte(-32))
    assertEquals(b_int(0), p_int(-32) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_int(-32) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / b_byte(0))
    assertEquals(p_int(2147483647), p_int(Integer.MAX_VALUE) / p_byte(1))
    assertEquals(p_int(-2147483647), p_int(Integer.MAX_VALUE) / p_byte(-1))
    assertEquals(b_int(93368854), p_int(Integer.MAX_VALUE) / b_byte(23))
    assertEquals(b_int(-67108863), p_int(Integer.MAX_VALUE) / b_byte(-32))
    assertEquals(b_int(16909320), p_int(Integer.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-16777215), p_int(Integer.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / b_byte(0))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_byte(1))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_byte(-1))
    assertEquals(b_int(-93368854), p_int(Integer.MIN_VALUE) / b_byte(23))
    assertEquals(b_int(67108864), p_int(Integer.MIN_VALUE) / b_byte(-32))
    assertEquals(b_int(-16909320), p_int(Integer.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(16777216), p_int(Integer.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_int(0) / b_byte(0)))
  }

  function testPIntPShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / p_short(0))
    assertEquals(p_int(0), p_int(0) / p_short(1))
    assertEquals(p_int(0), p_int(0) / p_short(-1))
    assertEquals(p_int(0), p_int(0) / p_short(23))
    assertEquals(p_int(0), p_int(0) / p_short(-32))
    assertEquals(p_int(0), p_int(0) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_int(0) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / p_short(0))
    assertEquals(p_int(1), p_int(1) / p_short(1))
    assertEquals(p_int(-1), p_int(1) / p_short(-1))
    assertEquals(p_int(0), p_int(1) / p_short(23))
    assertEquals(p_int(0), p_int(1) / p_short(-32))
    assertEquals(p_int(0), p_int(1) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_int(1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / p_short(0))
    assertEquals(p_int(-1), p_int(-1) / p_short(1))
    assertEquals(p_int(1), p_int(-1) / p_short(-1))
    assertEquals(p_int(0), p_int(-1) / p_short(23))
    assertEquals(p_int(0), p_int(-1) / p_short(-32))
    assertEquals(p_int(0), p_int(-1) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_int(-1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / p_short(0))
    assertEquals(p_int(23), p_int(23) / p_short(1))
    assertEquals(p_int(-23), p_int(23) / p_short(-1))
    assertEquals(p_int(1), p_int(23) / p_short(23))
    assertEquals(p_int(0), p_int(23) / p_short(-32))
    assertEquals(p_int(0), p_int(23) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_int(23) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / p_short(0))
    assertEquals(p_int(-32), p_int(-32) / p_short(1))
    assertEquals(p_int(32), p_int(-32) / p_short(-1))
    assertEquals(p_int(-1), p_int(-32) / p_short(23))
    assertEquals(p_int(1), p_int(-32) / p_short(-32))
    assertEquals(p_int(0), p_int(-32) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_int(-32) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / p_short(0))
    assertEquals(p_int(2147483647), p_int(Integer.MAX_VALUE) / p_short(1))
    assertEquals(p_int(-2147483647), p_int(Integer.MAX_VALUE) / p_short(-1))
    assertEquals(p_int(93368854), p_int(Integer.MAX_VALUE) / p_short(23))
    assertEquals(p_int(-67108863), p_int(Integer.MAX_VALUE) / p_short(-32))
    assertEquals(p_int(65538), p_int(Integer.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(-65535), p_int(Integer.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / p_short(0))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_short(1))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_short(-1))
    assertEquals(p_int(-93368854), p_int(Integer.MIN_VALUE) / p_short(23))
    assertEquals(p_int(67108864), p_int(Integer.MIN_VALUE) / p_short(-32))
    assertEquals(p_int(-65538), p_int(Integer.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(65536), p_int(Integer.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(int, statictypeof(p_int(0) / p_short(0)))
  }

  function testPIntShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / b_short(0))
    assertEquals(b_int(0), p_int(0) / b_short(1))
    assertEquals(b_int(0), p_int(0) / b_short(-1))
    assertEquals(b_int(0), p_int(0) / b_short(23))
    assertEquals(b_int(0), p_int(0) / b_short(-32))
    assertEquals(b_int(0), p_int(0) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_int(0) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / b_short(0))
    assertEquals(b_int(1), p_int(1) / b_short(1))
    assertEquals(b_int(-1), p_int(1) / b_short(-1))
    assertEquals(b_int(0), p_int(1) / b_short(23))
    assertEquals(b_int(0), p_int(1) / b_short(-32))
    assertEquals(b_int(0), p_int(1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_int(1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / b_short(0))
    assertEquals(b_int(-1), p_int(-1) / b_short(1))
    assertEquals(b_int(1), p_int(-1) / b_short(-1))
    assertEquals(b_int(0), p_int(-1) / b_short(23))
    assertEquals(b_int(0), p_int(-1) / b_short(-32))
    assertEquals(b_int(0), p_int(-1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_int(-1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / b_short(0))
    assertEquals(b_int(23), p_int(23) / b_short(1))
    assertEquals(b_int(-23), p_int(23) / b_short(-1))
    assertEquals(b_int(1), p_int(23) / b_short(23))
    assertEquals(b_int(0), p_int(23) / b_short(-32))
    assertEquals(b_int(0), p_int(23) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_int(23) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / b_short(0))
    assertEquals(b_int(-32), p_int(-32) / b_short(1))
    assertEquals(b_int(32), p_int(-32) / b_short(-1))
    assertEquals(b_int(-1), p_int(-32) / b_short(23))
    assertEquals(b_int(1), p_int(-32) / b_short(-32))
    assertEquals(b_int(0), p_int(-32) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_int(-32) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / b_short(0))
    assertEquals(b_int(2147483647), p_int(Integer.MAX_VALUE) / b_short(1))
    assertEquals(b_int(-2147483647), p_int(Integer.MAX_VALUE) / b_short(-1))
    assertEquals(b_int(93368854), p_int(Integer.MAX_VALUE) / b_short(23))
    assertEquals(b_int(-67108863), p_int(Integer.MAX_VALUE) / b_short(-32))
    assertEquals(b_int(65538), p_int(Integer.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(-65535), p_int(Integer.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / b_short(0))
    assertEquals(b_int(-2147483648), p_int(Integer.MIN_VALUE) / b_short(1))
    assertEquals(b_int(-2147483648), p_int(Integer.MIN_VALUE) / b_short(-1))
    assertEquals(b_int(-93368854), p_int(Integer.MIN_VALUE) / b_short(23))
    assertEquals(b_int(67108864), p_int(Integer.MIN_VALUE) / b_short(-32))
    assertEquals(b_int(-65538), p_int(Integer.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(65536), p_int(Integer.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_int(0) / b_short(0)))
  }

  function testPIntPCharDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / p_char(0))
    assertEquals(p_int(0), p_int(0) / p_char(1))
    assertEquals(p_int(0), p_int(0) / p_char(23))
    assertEquals(p_int(0), p_int(0) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / p_char(0))
    assertEquals(p_int(1), p_int(1) / p_char(1))
    assertEquals(p_int(0), p_int(1) / p_char(23))
    assertEquals(p_int(0), p_int(1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / p_char(0))
    assertEquals(p_int(-1), p_int(-1) / p_char(1))
    assertEquals(p_int(0), p_int(-1) / p_char(23))
    assertEquals(p_int(0), p_int(-1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / p_char(0))
    assertEquals(p_int(23), p_int(23) / p_char(1))
    assertEquals(p_int(1), p_int(23) / p_char(23))
    assertEquals(p_int(0), p_int(23) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / p_char(0))
    assertEquals(p_int(-32), p_int(-32) / p_char(1))
    assertEquals(p_int(-1), p_int(-32) / p_char(23))
    assertEquals(p_int(0), p_int(-32) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / p_char(0))
    assertEquals(p_int(2147483647), p_int(Integer.MAX_VALUE) / p_char(1))
    assertEquals(p_int(93368854), p_int(Integer.MAX_VALUE) / p_char(23))
    assertEquals(p_int(32768), p_int(Integer.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / p_char(0))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_char(1))
    assertEquals(p_int(-93368854), p_int(Integer.MIN_VALUE) / p_char(23))
    assertEquals(p_int(-32768), p_int(Integer.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(int, statictypeof(p_int(0) / p_char(0)))
  }

  function testPIntCharacterDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / b_char(0))
    assertEquals(b_int(0), p_int(0) / b_char(1))
    assertEquals(b_int(0), p_int(0) / b_char(23))
    assertEquals(b_int(0), p_int(0) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / b_char(0))
    assertEquals(b_int(1), p_int(1) / b_char(1))
    assertEquals(b_int(0), p_int(1) / b_char(23))
    assertEquals(b_int(0), p_int(1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / b_char(0))
    assertEquals(b_int(-1), p_int(-1) / b_char(1))
    assertEquals(b_int(0), p_int(-1) / b_char(23))
    assertEquals(b_int(0), p_int(-1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / b_char(0))
    assertEquals(b_int(23), p_int(23) / b_char(1))
    assertEquals(b_int(1), p_int(23) / b_char(23))
    assertEquals(b_int(0), p_int(23) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / b_char(0))
    assertEquals(b_int(-32), p_int(-32) / b_char(1))
    assertEquals(b_int(-1), p_int(-32) / b_char(23))
    assertEquals(b_int(0), p_int(-32) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / b_char(0))
    assertEquals(b_int(2147483647), p_int(Integer.MAX_VALUE) / b_char(1))
    assertEquals(b_int(93368854), p_int(Integer.MAX_VALUE) / b_char(23))
    assertEquals(b_int(32768), p_int(Integer.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / b_char(0))
    assertEquals(b_int(-2147483648), p_int(Integer.MIN_VALUE) / b_char(1))
    assertEquals(b_int(-93368854), p_int(Integer.MIN_VALUE) / b_char(23))
    assertEquals(b_int(-32768), p_int(Integer.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(p_int(0) / b_char(0)))
  }

  function testPIntPIntDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / p_int(0))
    assertEquals(p_int(0), p_int(0) / p_int(1))
    assertEquals(p_int(0), p_int(0) / p_int(-1))
    assertEquals(p_int(0), p_int(0) / p_int(23))
    assertEquals(p_int(0), p_int(0) / p_int(-32))
    assertEquals(p_int(0), p_int(0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_int(0) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / p_int(0))
    assertEquals(p_int(1), p_int(1) / p_int(1))
    assertEquals(p_int(-1), p_int(1) / p_int(-1))
    assertEquals(p_int(0), p_int(1) / p_int(23))
    assertEquals(p_int(0), p_int(1) / p_int(-32))
    assertEquals(p_int(0), p_int(1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_int(1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / p_int(0))
    assertEquals(p_int(-1), p_int(-1) / p_int(1))
    assertEquals(p_int(1), p_int(-1) / p_int(-1))
    assertEquals(p_int(0), p_int(-1) / p_int(23))
    assertEquals(p_int(0), p_int(-1) / p_int(-32))
    assertEquals(p_int(0), p_int(-1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_int(-1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / p_int(0))
    assertEquals(p_int(23), p_int(23) / p_int(1))
    assertEquals(p_int(-23), p_int(23) / p_int(-1))
    assertEquals(p_int(1), p_int(23) / p_int(23))
    assertEquals(p_int(0), p_int(23) / p_int(-32))
    assertEquals(p_int(0), p_int(23) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_int(23) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / p_int(0))
    assertEquals(p_int(-32), p_int(-32) / p_int(1))
    assertEquals(p_int(32), p_int(-32) / p_int(-1))
    assertEquals(p_int(-1), p_int(-32) / p_int(23))
    assertEquals(p_int(1), p_int(-32) / p_int(-32))
    assertEquals(p_int(0), p_int(-32) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_int(-32) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / p_int(0))
    assertEquals(p_int(2147483647), p_int(Integer.MAX_VALUE) / p_int(1))
    assertEquals(p_int(-2147483647), p_int(Integer.MAX_VALUE) / p_int(-1))
    assertEquals(p_int(93368854), p_int(Integer.MAX_VALUE) / p_int(23))
    assertEquals(p_int(-67108863), p_int(Integer.MAX_VALUE) / p_int(-32))
    assertEquals(p_int(1), p_int(Integer.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_int(Integer.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / p_int(0))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_int(1))
    assertEquals(p_int(-2147483648), p_int(Integer.MIN_VALUE) / p_int(-1))
    assertEquals(p_int(-93368854), p_int(Integer.MIN_VALUE) / p_int(23))
    assertEquals(p_int(67108864), p_int(Integer.MIN_VALUE) / p_int(-32))
    assertEquals(p_int(-1), p_int(Integer.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(1), p_int(Integer.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(int, statictypeof(p_int(0) / p_int(0)))
  }

  function testPIntIntegerDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / b_int(0))
    assertEquals(b_int(0), p_int(0) / b_int(1))
    assertEquals(b_int(0), p_int(0) / b_int(-1))
    assertEquals(b_int(0), p_int(0) / b_int(23))
    assertEquals(b_int(0), p_int(0) / b_int(-32))
    assertEquals(b_int(0), p_int(0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_int(0) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / b_int(0))
    assertEquals(b_int(1), p_int(1) / b_int(1))
    assertEquals(b_int(-1), p_int(1) / b_int(-1))
    assertEquals(b_int(0), p_int(1) / b_int(23))
    assertEquals(b_int(0), p_int(1) / b_int(-32))
    assertEquals(b_int(0), p_int(1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_int(1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / b_int(0))
    assertEquals(b_int(-1), p_int(-1) / b_int(1))
    assertEquals(b_int(1), p_int(-1) / b_int(-1))
    assertEquals(b_int(0), p_int(-1) / b_int(23))
    assertEquals(b_int(0), p_int(-1) / b_int(-32))
    assertEquals(b_int(0), p_int(-1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_int(-1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / b_int(0))
    assertEquals(b_int(23), p_int(23) / b_int(1))
    assertEquals(b_int(-23), p_int(23) / b_int(-1))
    assertEquals(b_int(1), p_int(23) / b_int(23))
    assertEquals(b_int(0), p_int(23) / b_int(-32))
    assertEquals(b_int(0), p_int(23) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_int(23) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / b_int(0))
    assertEquals(b_int(-32), p_int(-32) / b_int(1))
    assertEquals(b_int(32), p_int(-32) / b_int(-1))
    assertEquals(b_int(-1), p_int(-32) / b_int(23))
    assertEquals(b_int(1), p_int(-32) / b_int(-32))
    assertEquals(b_int(0), p_int(-32) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_int(-32) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / b_int(0))
    assertEquals(b_int(2147483647), p_int(Integer.MAX_VALUE) / b_int(1))
    assertEquals(b_int(-2147483647), p_int(Integer.MAX_VALUE) / b_int(-1))
    assertEquals(b_int(93368854), p_int(Integer.MAX_VALUE) / b_int(23))
    assertEquals(b_int(-67108863), p_int(Integer.MAX_VALUE) / b_int(-32))
    assertEquals(b_int(1), p_int(Integer.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_int(Integer.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / b_int(0))
    assertEquals(b_int(-2147483648), p_int(Integer.MIN_VALUE) / b_int(1))
    assertEquals(b_int(-2147483648), p_int(Integer.MIN_VALUE) / b_int(-1))
    assertEquals(b_int(-93368854), p_int(Integer.MIN_VALUE) / b_int(23))
    assertEquals(b_int(67108864), p_int(Integer.MIN_VALUE) / b_int(-32))
    assertEquals(b_int(-1), p_int(Integer.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(1), p_int(Integer.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_int(0) / b_int(0)))
  }

  function testPIntPLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / p_long(0))
    assertEquals(p_long(0), p_int(0) / p_long(1))
    assertEquals(p_long(0), p_int(0) / p_long(-1))
    assertEquals(p_long(0), p_int(0) / p_long(23))
    assertEquals(p_long(0), p_int(0) / p_long(-32))
    assertEquals(p_long(0), p_int(0) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(0) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / p_long(0))
    assertEquals(p_long(1), p_int(1) / p_long(1))
    assertEquals(p_long(-1), p_int(1) / p_long(-1))
    assertEquals(p_long(0), p_int(1) / p_long(23))
    assertEquals(p_long(0), p_int(1) / p_long(-32))
    assertEquals(p_long(0), p_int(1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / p_long(0))
    assertEquals(p_long(-1), p_int(-1) / p_long(1))
    assertEquals(p_long(1), p_int(-1) / p_long(-1))
    assertEquals(p_long(0), p_int(-1) / p_long(23))
    assertEquals(p_long(0), p_int(-1) / p_long(-32))
    assertEquals(p_long(0), p_int(-1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(-1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / p_long(0))
    assertEquals(p_long(23), p_int(23) / p_long(1))
    assertEquals(p_long(-23), p_int(23) / p_long(-1))
    assertEquals(p_long(1), p_int(23) / p_long(23))
    assertEquals(p_long(0), p_int(23) / p_long(-32))
    assertEquals(p_long(0), p_int(23) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(23) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / p_long(0))
    assertEquals(p_long(-32), p_int(-32) / p_long(1))
    assertEquals(p_long(32), p_int(-32) / p_long(-1))
    assertEquals(p_long(-1), p_int(-32) / p_long(23))
    assertEquals(p_long(1), p_int(-32) / p_long(-32))
    assertEquals(p_long(0), p_int(-32) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(-32) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / p_long(0))
    assertEquals(p_long(2147483647), p_int(Integer.MAX_VALUE) / p_long(1))
    assertEquals(p_long(-2147483647), p_int(Integer.MAX_VALUE) / p_long(-1))
    assertEquals(p_long(93368854), p_int(Integer.MAX_VALUE) / p_long(23))
    assertEquals(p_long(-67108863), p_int(Integer.MAX_VALUE) / p_long(-32))
    assertEquals(p_long(0), p_int(Integer.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(Integer.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / p_long(0))
    assertEquals(p_long(-2147483648), p_int(Integer.MIN_VALUE) / p_long(1))
    assertEquals(p_long(2147483648), p_int(Integer.MIN_VALUE) / p_long(-1))
    assertEquals(p_long(-93368854), p_int(Integer.MIN_VALUE) / p_long(23))
    assertEquals(p_long(67108864), p_int(Integer.MIN_VALUE) / p_long(-32))
    assertEquals(p_long(0), p_int(Integer.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_int(Integer.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(long, statictypeof(p_int(0) / p_long(0)))
  }

  function testPIntLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_int(0) / b_long(0))
    assertEquals(b_long(0), p_int(0) / b_long(1))
    assertEquals(b_long(0), p_int(0) / b_long(-1))
    assertEquals(b_long(0), p_int(0) / b_long(23))
    assertEquals(b_long(0), p_int(0) / b_long(-32))
    assertEquals(b_long(0), p_int(0) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(0) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(1) / b_long(0))
    assertEquals(b_long(1), p_int(1) / b_long(1))
    assertEquals(b_long(-1), p_int(1) / b_long(-1))
    assertEquals(b_long(0), p_int(1) / b_long(23))
    assertEquals(b_long(0), p_int(1) / b_long(-32))
    assertEquals(b_long(0), p_int(1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-1) / b_long(0))
    assertEquals(b_long(-1), p_int(-1) / b_long(1))
    assertEquals(b_long(1), p_int(-1) / b_long(-1))
    assertEquals(b_long(0), p_int(-1) / b_long(23))
    assertEquals(b_long(0), p_int(-1) / b_long(-32))
    assertEquals(b_long(0), p_int(-1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(-1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(23) / b_long(0))
    assertEquals(b_long(23), p_int(23) / b_long(1))
    assertEquals(b_long(-23), p_int(23) / b_long(-1))
    assertEquals(b_long(1), p_int(23) / b_long(23))
    assertEquals(b_long(0), p_int(23) / b_long(-32))
    assertEquals(b_long(0), p_int(23) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(23) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(-32) / b_long(0))
    assertEquals(b_long(-32), p_int(-32) / b_long(1))
    assertEquals(b_long(32), p_int(-32) / b_long(-1))
    assertEquals(b_long(-1), p_int(-32) / b_long(23))
    assertEquals(b_long(1), p_int(-32) / b_long(-32))
    assertEquals(b_long(0), p_int(-32) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(-32) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MAX_VALUE) / b_long(0))
    assertEquals(b_long(2147483647), p_int(Integer.MAX_VALUE) / b_long(1))
    assertEquals(b_long(-2147483647), p_int(Integer.MAX_VALUE) / b_long(-1))
    assertEquals(b_long(93368854), p_int(Integer.MAX_VALUE) / b_long(23))
    assertEquals(b_long(-67108863), p_int(Integer.MAX_VALUE) / b_long(-32))
    assertEquals(b_long(0), p_int(Integer.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(Integer.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_int(Integer.MIN_VALUE) / b_long(0))
    assertEquals(b_long(-2147483648), p_int(Integer.MIN_VALUE) / b_long(1))
    assertEquals(b_long(2147483648), p_int(Integer.MIN_VALUE) / b_long(-1))
    assertEquals(b_long(-93368854), p_int(Integer.MIN_VALUE) / b_long(23))
    assertEquals(b_long(67108864), p_int(Integer.MIN_VALUE) / b_long(-32))
    assertEquals(b_long(0), p_int(Integer.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_int(Integer.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(p_int(0) / b_long(0)))
  }

  function testPIntPFloatDivision() {
    assertEquals(p_float(Float.NaN_), p_int(0) / p_float(0.0))
    assertEquals(p_float(0.0), p_int(0) / p_float(1.0))
    assertEquals(p_float(-0.0), p_int(0) / p_float(-1.0))
    assertEquals(p_float(0.0), p_int(0) / p_float(23.0))
    assertEquals(p_float(0.0), p_int(0) / p_float(23.123))
    assertEquals(p_float(-0.0), p_int(0) / p_float(-32.0))
    assertEquals(p_float(-0.0), p_int(0) / p_float(-32.456))
    assertEquals(p_float(0.0), p_int(0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_int(0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(0) / p_float(Float.NaN_))
    assertEquals(p_float(0.0), p_int(0) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_int(0) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_int(1) / p_float(0.0))
    assertEquals(p_float(1.0), p_int(1) / p_float(1.0))
    assertEquals(p_float(-1.0), p_int(1) / p_float(-1.0))
    assertEquals(p_float(0.04347826), p_int(1) / p_float(23.0))
    assertEquals(p_float(0.043246984), p_int(1) / p_float(23.123))
    assertEquals(p_float(-0.03125), p_int(1) / p_float(-32.0))
    assertEquals(p_float(-0.030810943), p_int(1) / p_float(-32.456))
    assertEquals(p_float(0.0), p_int(1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_int(1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("2.938736E-39")), p_int(1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_int(1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_int(-1) / p_float(0.0))
    assertEquals(p_float(-1.0), p_int(-1) / p_float(1.0))
    assertEquals(p_float(1.0), p_int(-1) / p_float(-1.0))
    assertEquals(p_float(-0.04347826), p_int(-1) / p_float(23.0))
    assertEquals(p_float(-0.043246984), p_int(-1) / p_float(23.123))
    assertEquals(p_float(0.03125), p_int(-1) / p_float(-32.0))
    assertEquals(p_float(0.030810943), p_int(-1) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_int(-1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_int(-1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(-1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-2.938736E-39")), p_int(-1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_int(-1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_int(23) / p_float(0.0))
    assertEquals(p_float(23.0), p_int(23) / p_float(1.0))
    assertEquals(p_float(-23.0), p_int(23) / p_float(-1.0))
    assertEquals(p_float(1.0), p_int(23) / p_float(23.0))
    assertEquals(p_float(0.99468064), p_int(23) / p_float(23.123))
    assertEquals(p_float(-0.71875), p_int(23) / p_float(-32.0))
    assertEquals(p_float(-0.70865166), p_int(23) / p_float(-32.456))
    assertEquals(p_float(0.0), p_int(23) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_int(23) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(23) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("6.759093E-38")), p_int(23) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_int(23) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_int(-32) / p_float(0.0))
    assertEquals(p_float(-32.0), p_int(-32) / p_float(1.0))
    assertEquals(p_float(32.0), p_int(-32) / p_float(-1.0))
    assertEquals(p_float(-1.3913044), p_int(-32) / p_float(23.0))
    assertEquals(p_float(-1.3839035), p_int(-32) / p_float(23.123))
    assertEquals(p_float(1.0), p_int(-32) / p_float(-32.0))
    assertEquals(p_float(0.9859502), p_int(-32) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_int(-32) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_int(-32) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(-32) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-9.403956E-38")), p_int(-32) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_int(-32) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / p_float(0.0))
    assertEquals(p_float(Float.parseFloat("2.14748365E9")), p_int(Integer.MAX_VALUE) / p_float(1.0))
    assertEquals(p_float(Float.parseFloat("-2.14748365E9")), p_int(Integer.MAX_VALUE) / p_float(-1.0))
    assertEquals(p_float(Float.parseFloat("9.3368856E7")), p_int(Integer.MAX_VALUE) / p_float(23.0))
    assertEquals(p_float(Float.parseFloat("9.2872192E7")), p_int(Integer.MAX_VALUE) / p_float(23.123))
    assertEquals(p_float(Float.parseFloat("-6.7108864E7")), p_int(Integer.MAX_VALUE) / p_float(-32.0))
    assertEquals(p_float(Float.parseFloat("-6.6165996E7")), p_int(Integer.MAX_VALUE) / p_float(-32.456))
    assertEquals(p_float(0.0), p_int(Integer.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_int(Integer.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(Integer.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("6.310888E-30")), p_int(Integer.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / p_float(0.0))
    assertEquals(p_float(Float.parseFloat("-2.14748365E9")), p_int(Integer.MIN_VALUE) / p_float(1.0))
    assertEquals(p_float(Float.parseFloat("2.14748365E9")), p_int(Integer.MIN_VALUE) / p_float(-1.0))
    assertEquals(p_float(Float.parseFloat("-9.3368856E7")), p_int(Integer.MIN_VALUE) / p_float(23.0))
    assertEquals(p_float(Float.parseFloat("-9.2872192E7")), p_int(Integer.MIN_VALUE) / p_float(23.123))
    assertEquals(p_float(Float.parseFloat("6.7108864E7")), p_int(Integer.MIN_VALUE) / p_float(-32.0))
    assertEquals(p_float(Float.parseFloat("6.6165996E7")), p_int(Integer.MIN_VALUE) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_int(Integer.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_int(Integer.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_int(Integer.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-6.310888E-30")), p_int(Integer.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(float, statictypeof(p_int(0) / p_float(0.0)))
  }

  function testPIntFloatDivision() {
    assertEquals(b_float(Float.NaN_), p_int(0) / b_float(0.0))
    assertEquals(b_float(0.0), p_int(0) / b_float(1.0))
    assertEquals(b_float(-0.0), p_int(0) / b_float(-1.0))
    assertEquals(b_float(0.0), p_int(0) / b_float(23.0))
    assertEquals(b_float(0.0), p_int(0) / b_float(23.123))
    assertEquals(b_float(-0.0), p_int(0) / b_float(-32.0))
    assertEquals(b_float(-0.0), p_int(0) / b_float(-32.456))
    assertEquals(b_float(0.0), p_int(0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_int(0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(0) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), p_int(0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_int(0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_int(1) / b_float(0.0))
    assertEquals(b_float(1.0), p_int(1) / b_float(1.0))
    assertEquals(b_float(-1.0), p_int(1) / b_float(-1.0))
    assertEquals(b_float(0.04347826), p_int(1) / b_float(23.0))
    assertEquals(b_float(0.043246984), p_int(1) / b_float(23.123))
    assertEquals(b_float(-0.03125), p_int(1) / b_float(-32.0))
    assertEquals(b_float(-0.030810943), p_int(1) / b_float(-32.456))
    assertEquals(b_float(0.0), p_int(1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_int(1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), p_int(1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_int(1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_int(-1) / b_float(0.0))
    assertEquals(b_float(-1.0), p_int(-1) / b_float(1.0))
    assertEquals(b_float(1.0), p_int(-1) / b_float(-1.0))
    assertEquals(b_float(-0.04347826), p_int(-1) / b_float(23.0))
    assertEquals(b_float(-0.043246984), p_int(-1) / b_float(23.123))
    assertEquals(b_float(0.03125), p_int(-1) / b_float(-32.0))
    assertEquals(b_float(0.030810943), p_int(-1) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_int(-1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_int(-1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(-1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), p_int(-1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_int(-1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_int(23) / b_float(0.0))
    assertEquals(b_float(23.0), p_int(23) / b_float(1.0))
    assertEquals(b_float(-23.0), p_int(23) / b_float(-1.0))
    assertEquals(b_float(1.0), p_int(23) / b_float(23.0))
    assertEquals(b_float(0.99468064), p_int(23) / b_float(23.123))
    assertEquals(b_float(-0.71875), p_int(23) / b_float(-32.0))
    assertEquals(b_float(-0.70865166), p_int(23) / b_float(-32.456))
    assertEquals(b_float(0.0), p_int(23) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_int(23) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(23) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), p_int(23) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_int(23) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_int(-32) / b_float(0.0))
    assertEquals(b_float(-32.0), p_int(-32) / b_float(1.0))
    assertEquals(b_float(32.0), p_int(-32) / b_float(-1.0))
    assertEquals(b_float(-1.3913044), p_int(-32) / b_float(23.0))
    assertEquals(b_float(-1.3839035), p_int(-32) / b_float(23.123))
    assertEquals(b_float(1.0), p_int(-32) / b_float(-32.0))
    assertEquals(b_float(0.9859502), p_int(-32) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_int(-32) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_int(-32) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(-32) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), p_int(-32) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_int(-32) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / b_float(0.0))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), p_int(Integer.MAX_VALUE) / b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), p_int(Integer.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("9.3368856E7")), p_int(Integer.MAX_VALUE) / b_float(23.0))
    assertEquals(b_float(Float.parseFloat("9.2872192E7")), p_int(Integer.MAX_VALUE) / b_float(23.123))
    assertEquals(b_float(Float.parseFloat("-6.7108864E7")), p_int(Integer.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-6.6165996E7")), p_int(Integer.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), p_int(Integer.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_int(Integer.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(Integer.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.310888E-30")), p_int(Integer.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / b_float(0.0))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), p_int(Integer.MIN_VALUE) / b_float(1.0))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), p_int(Integer.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("-9.3368856E7")), p_int(Integer.MIN_VALUE) / b_float(23.0))
    assertEquals(b_float(Float.parseFloat("-9.2872192E7")), p_int(Integer.MIN_VALUE) / b_float(23.123))
    assertEquals(b_float(Float.parseFloat("6.7108864E7")), p_int(Integer.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("6.6165996E7")), p_int(Integer.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_int(Integer.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_int(Integer.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_int(Integer.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-6.310888E-30")), p_int(Integer.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(p_int(0) / b_float(0.0)))
  }

  function testPIntPDoubleDivision() {
    assertEquals(p_double(Double.NaN_), p_int(0) / p_double(0.0))
    assertEquals(p_double(0.0), p_int(0) / p_double(1.0))
    assertEquals(p_double(-0.0), p_int(0) / p_double(-1.0))
    assertEquals(p_double(0.0), p_int(0) / p_double(23.0))
    assertEquals(p_double(0.0), p_int(0) / p_double(23.123))
    assertEquals(p_double(-0.0), p_int(0) / p_double(-32.0))
    assertEquals(p_double(-0.0), p_int(0) / p_double(-32.456))
    assertEquals(p_double(0.0), p_int(0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_int(0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(0) / p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_int(0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_int(0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_int(1) / p_double(0.0))
    assertEquals(p_double(1.0), p_int(1) / p_double(1.0))
    assertEquals(p_double(-1.0), p_int(1) / p_double(-1.0))
    assertEquals(p_double(0.043478260869565216), p_int(1) / p_double(23.0))
    assertEquals(p_double(0.043246983522899275), p_int(1) / p_double(23.123))
    assertEquals(p_double(-0.03125), p_int(1) / p_double(-32.0))
    assertEquals(p_double(-0.03081094404732561), p_int(1) / p_double(-32.456))
    assertEquals(p_double(0.0), p_int(1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_int(1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("5.562684646268003E-309")), p_int(1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_int(1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_int(-1) / p_double(0.0))
    assertEquals(p_double(-1.0), p_int(-1) / p_double(1.0))
    assertEquals(p_double(1.0), p_int(-1) / p_double(-1.0))
    assertEquals(p_double(-0.043478260869565216), p_int(-1) / p_double(23.0))
    assertEquals(p_double(-0.043246983522899275), p_int(-1) / p_double(23.123))
    assertEquals(p_double(0.03125), p_int(-1) / p_double(-32.0))
    assertEquals(p_double(0.03081094404732561), p_int(-1) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_int(-1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_int(-1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(-1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-5.562684646268003E-309")), p_int(-1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_int(-1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_int(23) / p_double(0.0))
    assertEquals(p_double(23.0), p_int(23) / p_double(1.0))
    assertEquals(p_double(-23.0), p_int(23) / p_double(-1.0))
    assertEquals(p_double(1.0), p_int(23) / p_double(23.0))
    assertEquals(p_double(0.9946806210266833), p_int(23) / p_double(23.123))
    assertEquals(p_double(-0.71875), p_int(23) / p_double(-32.0))
    assertEquals(p_double(-0.708651713088489), p_int(23) / p_double(-32.456))
    assertEquals(p_double(0.0), p_int(23) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_int(23) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(23) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.279417468641641E-307")), p_int(23) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_int(23) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_int(-32) / p_double(0.0))
    assertEquals(p_double(-32.0), p_int(-32) / p_double(1.0))
    assertEquals(p_double(32.0), p_int(-32) / p_double(-1.0))
    assertEquals(p_double(-1.391304347826087), p_int(-32) / p_double(23.0))
    assertEquals(p_double(-1.3839034727327768), p_int(-32) / p_double(23.123))
    assertEquals(p_double(1.0), p_int(-32) / p_double(-32.0))
    assertEquals(p_double(0.9859502095144195), p_int(-32) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_int(-32) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_int(-32) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(-32) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.7800590868057615E-307")), p_int(-32) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_int(-32) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / p_double(0.0))
    assertEquals(p_double(Double.parseDouble("2.147483647E9")), p_int(Integer.MAX_VALUE) / p_double(1.0))
    assertEquals(p_double(Double.parseDouble("-2.147483647E9")), p_int(Integer.MAX_VALUE) / p_double(-1.0))
    assertEquals(p_double(Double.parseDouble("9.33688542173913E7")), p_int(Integer.MAX_VALUE) / p_double(23.0))
    assertEquals(p_double(Double.parseDouble("9.287218989750464E7")), p_int(Integer.MAX_VALUE) / p_double(23.123))
    assertEquals(p_double(Double.parseDouble("-6.710886396875E7")), p_int(Integer.MAX_VALUE) / p_double(-32.0))
    assertEquals(p_double(Double.parseDouble("-6.616599849026374E7")), p_int(Integer.MAX_VALUE) / p_double(-32.456))
    assertEquals(p_double(0.0), p_int(Integer.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_int(Integer.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(Integer.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.1945774311278518E-299")), p_int(Integer.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / p_double(0.0))
    assertEquals(p_double(Double.parseDouble("-2.147483648E9")), p_int(Integer.MIN_VALUE) / p_double(1.0))
    assertEquals(p_double(Double.parseDouble("2.147483648E9")), p_int(Integer.MIN_VALUE) / p_double(-1.0))
    assertEquals(p_double(Double.parseDouble("-9.336885426086956E7")), p_int(Integer.MIN_VALUE) / p_double(23.0))
    assertEquals(p_double(Double.parseDouble("-9.287218994075163E7")), p_int(Integer.MIN_VALUE) / p_double(23.123))
    assertEquals(p_double(Double.parseDouble("6.7108864E7")), p_int(Integer.MIN_VALUE) / p_double(-32.0))
    assertEquals(p_double(Double.parseDouble("6.616599852107468E7")), p_int(Integer.MIN_VALUE) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_int(Integer.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_int(Integer.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_int(Integer.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.1945774316841204E-299")), p_int(Integer.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_int(0) / p_double(0.0)))
  }

  function testPIntDoubleDivision() {
    assertEquals(b_double(Double.NaN_), p_int(0) / b_double(0.0))
    assertEquals(b_double(0.0), p_int(0) / b_double(1.0))
    assertEquals(b_double(-0.0), p_int(0) / b_double(-1.0))
    assertEquals(b_double(0.0), p_int(0) / b_double(23.0))
    assertEquals(b_double(0.0), p_int(0) / b_double(23.123))
    assertEquals(b_double(-0.0), p_int(0) / b_double(-32.0))
    assertEquals(b_double(-0.0), p_int(0) / b_double(-32.456))
    assertEquals(b_double(0.0), p_int(0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_int(0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_int(0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_int(0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_int(1) / b_double(0.0))
    assertEquals(b_double(1.0), p_int(1) / b_double(1.0))
    assertEquals(b_double(-1.0), p_int(1) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), p_int(1) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), p_int(1) / b_double(23.123))
    assertEquals(b_double(-0.03125), p_int(1) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), p_int(1) / b_double(-32.456))
    assertEquals(b_double(0.0), p_int(1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_int(1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), p_int(1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_int(1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_int(-1) / b_double(0.0))
    assertEquals(b_double(-1.0), p_int(-1) / b_double(1.0))
    assertEquals(b_double(1.0), p_int(-1) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), p_int(-1) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), p_int(-1) / b_double(23.123))
    assertEquals(b_double(0.03125), p_int(-1) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), p_int(-1) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_int(-1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_int(-1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(-1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), p_int(-1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_int(-1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_int(23) / b_double(0.0))
    assertEquals(b_double(23.0), p_int(23) / b_double(1.0))
    assertEquals(b_double(-23.0), p_int(23) / b_double(-1.0))
    assertEquals(b_double(1.0), p_int(23) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), p_int(23) / b_double(23.123))
    assertEquals(b_double(-0.71875), p_int(23) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), p_int(23) / b_double(-32.456))
    assertEquals(b_double(0.0), p_int(23) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_int(23) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(23) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), p_int(23) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_int(23) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_int(-32) / b_double(0.0))
    assertEquals(b_double(-32.0), p_int(-32) / b_double(1.0))
    assertEquals(b_double(32.0), p_int(-32) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), p_int(-32) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), p_int(-32) / b_double(23.123))
    assertEquals(b_double(1.0), p_int(-32) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), p_int(-32) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_int(-32) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_int(-32) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(-32) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), p_int(-32) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_int(-32) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), p_int(Integer.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-2.147483647E9")), p_int(Integer.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("9.33688542173913E7")), p_int(Integer.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("9.287218989750464E7")), p_int(Integer.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-6.710886396875E7")), p_int(Integer.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-6.616599849026374E7")), p_int(Integer.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), p_int(Integer.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_int(Integer.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(Integer.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.1945774311278518E-299")), p_int(Integer.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_int(Integer.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), p_int(Integer.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("2.147483648E9")), p_int(Integer.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("-9.336885426086956E7")), p_int(Integer.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("-9.287218994075163E7")), p_int(Integer.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("6.7108864E7")), p_int(Integer.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("6.616599852107468E7")), p_int(Integer.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_int(Integer.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_int(Integer.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_int(Integer.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.1945774316841204E-299")), p_int(Integer.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_int(Integer.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_int(0) / b_double(0.0)))
  }

  function testPIntBigIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(0) / big_int("0"))
    assertEquals(big_int("0"), p_int(0) / big_int("1"))
    assertEquals(big_int("0"), p_int(0) / big_int("-1"))
    assertEquals(big_int("0"), p_int(0) / big_int("23"))
    assertEquals(big_int("0"), p_int(0) / big_int("-32"))
    assertEquals(big_int("0"), p_int(0) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(1) / big_int("0"))
    assertEquals(big_int("1"), p_int(1) / big_int("1"))
    assertEquals(big_int("-1"), p_int(1) / big_int("-1"))
    assertEquals(big_int("0"), p_int(1) / big_int("23"))
    assertEquals(big_int("0"), p_int(1) / big_int("-32"))
    assertEquals(big_int("0"), p_int(1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(-1) / big_int("0"))
    assertEquals(big_int("-1"), p_int(-1) / big_int("1"))
    assertEquals(big_int("1"), p_int(-1) / big_int("-1"))
    assertEquals(big_int("0"), p_int(-1) / big_int("23"))
    assertEquals(big_int("0"), p_int(-1) / big_int("-32"))
    assertEquals(big_int("0"), p_int(-1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(-1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(23) / big_int("0"))
    assertEquals(big_int("23"), p_int(23) / big_int("1"))
    assertEquals(big_int("-23"), p_int(23) / big_int("-1"))
    assertEquals(big_int("1"), p_int(23) / big_int("23"))
    assertEquals(big_int("0"), p_int(23) / big_int("-32"))
    assertEquals(big_int("0"), p_int(23) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(23) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(-32) / big_int("0"))
    assertEquals(big_int("-32"), p_int(-32) / big_int("1"))
    assertEquals(big_int("32"), p_int(-32) / big_int("-1"))
    assertEquals(big_int("-1"), p_int(-32) / big_int("23"))
    assertEquals(big_int("1"), p_int(-32) / big_int("-32"))
    assertEquals(big_int("0"), p_int(-32) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(-32) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(Integer.MAX_VALUE) / big_int("0"))
    assertEquals(big_int("2147483647"), p_int(Integer.MAX_VALUE) / big_int("1"))
    assertEquals(big_int("-2147483647"), p_int(Integer.MAX_VALUE) / big_int("-1"))
    assertEquals(big_int("93368854"), p_int(Integer.MAX_VALUE) / big_int("23"))
    assertEquals(big_int("-67108863"), p_int(Integer.MAX_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), p_int(Integer.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(Integer.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_int(Integer.MIN_VALUE) / big_int("0"))
    assertEquals(big_int("-2147483648"), p_int(Integer.MIN_VALUE) / big_int("1"))
    assertEquals(big_int("2147483648"), p_int(Integer.MIN_VALUE) / big_int("-1"))
    assertEquals(big_int("-93368854"), p_int(Integer.MIN_VALUE) / big_int("23"))
    assertEquals(big_int("67108864"), p_int(Integer.MIN_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), p_int(Integer.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_int(Integer.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(p_int(0) / big_int("0")))
  }

  function testPIntBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> p_int(0) / big_decimal("0"))
    assertEquals(big_decimal("0"), p_int(0) / big_decimal("1"))
    assertEquals(big_decimal("0"), p_int(0) / big_decimal("-1"))
    assertEquals(big_decimal("0"), p_int(0) / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), p_int(0) / big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_int(0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), p_int(0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), p_int(0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), p_int(0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_int(1) / big_decimal("0"))
    assertEquals(big_decimal("1"), p_int(1) / big_decimal("1"))
    assertEquals(big_decimal("-1"), p_int(1) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), p_int(1) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), p_int(1) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), p_int(1) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), p_int(1) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_int(1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_int(1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_int(-1) / big_decimal("0"))
    assertEquals(big_decimal("-1"), p_int(-1) / big_decimal("1"))
    assertEquals(big_decimal("1"), p_int(-1) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), p_int(-1) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), p_int(-1) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), p_int(-1) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), p_int(-1) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_int(-1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_int(-1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_int(23) / big_decimal("0"))
    assertEquals(big_decimal("23"), p_int(23) / big_decimal("1"))
    assertEquals(big_decimal("-23"), p_int(23) / big_decimal("-1"))
    assertEquals(big_decimal("1"), p_int(23) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), p_int(23) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), p_int(23) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), p_int(23) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), p_int(23) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), p_int(23) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_int(-32) / big_decimal("0"))
    assertEquals(big_decimal("-32"), p_int(-32) / big_decimal("1"))
    assertEquals(big_decimal("32"), p_int(-32) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), p_int(-32) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), p_int(-32) / big_decimal("23.123"))
    assertEquals(big_decimal("1"), p_int(-32) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), p_int(-32) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), p_int(-32) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), p_int(-32) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_int(Integer.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("2147483647"), p_int(Integer.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-2147483647"), p_int(Integer.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("93368854.21739130434782608695652174"), p_int(Integer.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("92872189.89750464905072871167236085"), p_int(Integer.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-67108863.96875"), p_int(Integer.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-66165998.49026374168104510722208528"), p_int(Integer.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.739461769725155929091918954736462E-20"), p_int(Integer.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.739461769725155929091918954736462E-20"), p_int(Integer.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_int(Integer.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("-2147483648"), p_int(Integer.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("2147483648"), p_int(Integer.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("-93368854.26086956521739130434782609"), p_int(Integer.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("-92872189.94075163257362798944773602"), p_int(Integer.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("67108864"), p_int(Integer.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("66165998.52107468572837071727877742"), p_int(Integer.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("-1.739461770535155936381919021075463E-20"), p_int(Integer.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.739461770535155936381919021075463E-20"), p_int(Integer.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_int(0) / big_decimal("0")))
  }

}

