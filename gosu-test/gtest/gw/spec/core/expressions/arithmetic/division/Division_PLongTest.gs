package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_PLongTest extends ArithmeticTestBase {

  function testPLongPByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / p_byte(0))
    assertEquals(p_long(0), p_long(0) / p_byte(1))
    assertEquals(p_long(0), p_long(0) / p_byte(-1))
    assertEquals(p_long(0), p_long(0) / p_byte(23))
    assertEquals(p_long(0), p_long(0) / p_byte(-32))
    assertEquals(p_long(0), p_long(0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(0), p_long(0) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / p_byte(0))
    assertEquals(p_long(1), p_long(1) / p_byte(1))
    assertEquals(p_long(-1), p_long(1) / p_byte(-1))
    assertEquals(p_long(0), p_long(1) / p_byte(23))
    assertEquals(p_long(0), p_long(1) / p_byte(-32))
    assertEquals(p_long(0), p_long(1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(0), p_long(1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / p_byte(0))
    assertEquals(p_long(-1), p_long(-1) / p_byte(1))
    assertEquals(p_long(1), p_long(-1) / p_byte(-1))
    assertEquals(p_long(0), p_long(-1) / p_byte(23))
    assertEquals(p_long(0), p_long(-1) / p_byte(-32))
    assertEquals(p_long(0), p_long(-1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(0), p_long(-1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / p_byte(0))
    assertEquals(p_long(23), p_long(23) / p_byte(1))
    assertEquals(p_long(-23), p_long(23) / p_byte(-1))
    assertEquals(p_long(1), p_long(23) / p_byte(23))
    assertEquals(p_long(0), p_long(23) / p_byte(-32))
    assertEquals(p_long(0), p_long(23) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(0), p_long(23) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / p_byte(0))
    assertEquals(p_long(-32), p_long(-32) / p_byte(1))
    assertEquals(p_long(32), p_long(-32) / p_byte(-1))
    assertEquals(p_long(-1), p_long(-32) / p_byte(23))
    assertEquals(p_long(1), p_long(-32) / p_byte(-32))
    assertEquals(p_long(0), p_long(-32) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(0), p_long(-32) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / p_byte(0))
    assertEquals(p_long(9223372036854775807), p_long(Long.MAX_VALUE) / p_byte(1))
    assertEquals(p_long(-9223372036854775807), p_long(Long.MAX_VALUE) / p_byte(-1))
    assertEquals(p_long(401016175515425035), p_long(Long.MAX_VALUE) / p_byte(23))
    assertEquals(p_long(-288230376151711743), p_long(Long.MAX_VALUE) / p_byte(-32))
    assertEquals(p_long(72624976668147841), p_long(Long.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(-72057594037927935), p_long(Long.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / p_byte(0))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_byte(1))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_byte(-1))
    assertEquals(p_long(-401016175515425035), p_long(Long.MIN_VALUE) / p_byte(23))
    assertEquals(p_long(288230376151711744), p_long(Long.MIN_VALUE) / p_byte(-32))
    assertEquals(p_long(-72624976668147841), p_long(Long.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_long(72057594037927936), p_long(Long.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(long, statictypeof(p_long(0) / p_byte(0)))
  }

  function testPLongByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / b_byte(0))
    assertEquals(p_long(0), p_long(0) / p_byte(1))
    assertEquals(p_long(0), p_long(0) / p_byte(-1))
    assertEquals(b_long(0), p_long(0) / b_byte(23))
    assertEquals(b_long(0), p_long(0) / b_byte(-32))
    assertEquals(b_long(0), p_long(0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(0), p_long(0) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / b_byte(0))
    assertEquals(p_long(1), p_long(1) / p_byte(1))
    assertEquals(p_long(-1), p_long(1) / p_byte(-1))
    assertEquals(b_long(0), p_long(1) / b_byte(23))
    assertEquals(b_long(0), p_long(1) / b_byte(-32))
    assertEquals(b_long(0), p_long(1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(0), p_long(1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / b_byte(0))
    assertEquals(p_long(-1), p_long(-1) / p_byte(1))
    assertEquals(p_long(1), p_long(-1) / p_byte(-1))
    assertEquals(b_long(0), p_long(-1) / b_byte(23))
    assertEquals(b_long(0), p_long(-1) / b_byte(-32))
    assertEquals(b_long(0), p_long(-1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(0), p_long(-1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / b_byte(0))
    assertEquals(p_long(23), p_long(23) / p_byte(1))
    assertEquals(p_long(-23), p_long(23) / p_byte(-1))
    assertEquals(b_long(1), p_long(23) / b_byte(23))
    assertEquals(b_long(0), p_long(23) / b_byte(-32))
    assertEquals(b_long(0), p_long(23) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(0), p_long(23) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / b_byte(0))
    assertEquals(p_long(-32), p_long(-32) / p_byte(1))
    assertEquals(p_long(32), p_long(-32) / p_byte(-1))
    assertEquals(b_long(-1), p_long(-32) / b_byte(23))
    assertEquals(b_long(1), p_long(-32) / b_byte(-32))
    assertEquals(b_long(0), p_long(-32) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(0), p_long(-32) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / b_byte(0))
    assertEquals(p_long(9223372036854775807), p_long(Long.MAX_VALUE) / p_byte(1))
    assertEquals(p_long(-9223372036854775807), p_long(Long.MAX_VALUE) / p_byte(-1))
    assertEquals(b_long(401016175515425035), p_long(Long.MAX_VALUE) / b_byte(23))
    assertEquals(b_long(-288230376151711743), p_long(Long.MAX_VALUE) / b_byte(-32))
    assertEquals(b_long(72624976668147841), p_long(Long.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(-72057594037927935), p_long(Long.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / b_byte(0))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_byte(1))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_byte(-1))
    assertEquals(b_long(-401016175515425035), p_long(Long.MIN_VALUE) / b_byte(23))
    assertEquals(b_long(288230376151711744), p_long(Long.MIN_VALUE) / b_byte(-32))
    assertEquals(b_long(-72624976668147841), p_long(Long.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_long(72057594037927936), p_long(Long.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Long, statictypeof(p_long(0) / b_byte(0)))
  }

  function testPLongPShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / p_short(0))
    assertEquals(p_long(0), p_long(0) / p_short(1))
    assertEquals(p_long(0), p_long(0) / p_short(-1))
    assertEquals(p_long(0), p_long(0) / p_short(23))
    assertEquals(p_long(0), p_long(0) / p_short(-32))
    assertEquals(p_long(0), p_long(0) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(0), p_long(0) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / p_short(0))
    assertEquals(p_long(1), p_long(1) / p_short(1))
    assertEquals(p_long(-1), p_long(1) / p_short(-1))
    assertEquals(p_long(0), p_long(1) / p_short(23))
    assertEquals(p_long(0), p_long(1) / p_short(-32))
    assertEquals(p_long(0), p_long(1) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(0), p_long(1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / p_short(0))
    assertEquals(p_long(-1), p_long(-1) / p_short(1))
    assertEquals(p_long(1), p_long(-1) / p_short(-1))
    assertEquals(p_long(0), p_long(-1) / p_short(23))
    assertEquals(p_long(0), p_long(-1) / p_short(-32))
    assertEquals(p_long(0), p_long(-1) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(0), p_long(-1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / p_short(0))
    assertEquals(p_long(23), p_long(23) / p_short(1))
    assertEquals(p_long(-23), p_long(23) / p_short(-1))
    assertEquals(p_long(1), p_long(23) / p_short(23))
    assertEquals(p_long(0), p_long(23) / p_short(-32))
    assertEquals(p_long(0), p_long(23) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(0), p_long(23) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / p_short(0))
    assertEquals(p_long(-32), p_long(-32) / p_short(1))
    assertEquals(p_long(32), p_long(-32) / p_short(-1))
    assertEquals(p_long(-1), p_long(-32) / p_short(23))
    assertEquals(p_long(1), p_long(-32) / p_short(-32))
    assertEquals(p_long(0), p_long(-32) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(0), p_long(-32) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / p_short(0))
    assertEquals(p_long(9223372036854775807), p_long(Long.MAX_VALUE) / p_short(1))
    assertEquals(p_long(-9223372036854775807), p_long(Long.MAX_VALUE) / p_short(-1))
    assertEquals(p_long(401016175515425035), p_long(Long.MAX_VALUE) / p_short(23))
    assertEquals(p_long(-288230376151711743), p_long(Long.MAX_VALUE) / p_short(-32))
    assertEquals(p_long(281483566907400), p_long(Long.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(-281474976710655), p_long(Long.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / p_short(0))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_short(1))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_short(-1))
    assertEquals(p_long(-401016175515425035), p_long(Long.MIN_VALUE) / p_short(23))
    assertEquals(p_long(288230376151711744), p_long(Long.MIN_VALUE) / p_short(-32))
    assertEquals(p_long(-281483566907400), p_long(Long.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_long(281474976710656), p_long(Long.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(long, statictypeof(p_long(0) / p_short(0)))
  }

  function testPLongShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / b_short(0))
    assertEquals(b_long(0), p_long(0) / b_short(1))
    assertEquals(b_long(0), p_long(0) / b_short(-1))
    assertEquals(b_long(0), p_long(0) / b_short(23))
    assertEquals(b_long(0), p_long(0) / b_short(-32))
    assertEquals(b_long(0), p_long(0) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(0), p_long(0) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / b_short(0))
    assertEquals(b_long(1), p_long(1) / b_short(1))
    assertEquals(b_long(-1), p_long(1) / b_short(-1))
    assertEquals(b_long(0), p_long(1) / b_short(23))
    assertEquals(b_long(0), p_long(1) / b_short(-32))
    assertEquals(b_long(0), p_long(1) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(0), p_long(1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / b_short(0))
    assertEquals(b_long(-1), p_long(-1) / b_short(1))
    assertEquals(b_long(1), p_long(-1) / b_short(-1))
    assertEquals(b_long(0), p_long(-1) / b_short(23))
    assertEquals(b_long(0), p_long(-1) / b_short(-32))
    assertEquals(b_long(0), p_long(-1) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(0), p_long(-1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / b_short(0))
    assertEquals(b_long(23), p_long(23) / b_short(1))
    assertEquals(b_long(-23), p_long(23) / b_short(-1))
    assertEquals(b_long(1), p_long(23) / b_short(23))
    assertEquals(b_long(0), p_long(23) / b_short(-32))
    assertEquals(b_long(0), p_long(23) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(0), p_long(23) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / b_short(0))
    assertEquals(b_long(-32), p_long(-32) / b_short(1))
    assertEquals(b_long(32), p_long(-32) / b_short(-1))
    assertEquals(b_long(-1), p_long(-32) / b_short(23))
    assertEquals(b_long(1), p_long(-32) / b_short(-32))
    assertEquals(b_long(0), p_long(-32) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(0), p_long(-32) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / b_short(0))
    assertEquals(b_long(9223372036854775807), p_long(Long.MAX_VALUE) / b_short(1))
    assertEquals(b_long(-9223372036854775807), p_long(Long.MAX_VALUE) / b_short(-1))
    assertEquals(b_long(401016175515425035), p_long(Long.MAX_VALUE) / b_short(23))
    assertEquals(b_long(-288230376151711743), p_long(Long.MAX_VALUE) / b_short(-32))
    assertEquals(b_long(281483566907400), p_long(Long.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(-281474976710655), p_long(Long.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / b_short(0))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_short(1))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_short(-1))
    assertEquals(b_long(-401016175515425035), p_long(Long.MIN_VALUE) / b_short(23))
    assertEquals(b_long(288230376151711744), p_long(Long.MIN_VALUE) / b_short(-32))
    assertEquals(b_long(-281483566907400), p_long(Long.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_long(281474976710656), p_long(Long.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Long, statictypeof(p_long(0) / b_short(0)))
  }

  function testPLongPCharDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / p_char(0))
    assertEquals(p_long(0), p_long(0) / p_char(1))
    assertEquals(p_long(0), p_long(0) / p_char(23))
    assertEquals(p_long(0), p_long(0) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / p_char(0))
    assertEquals(p_long(1), p_long(1) / p_char(1))
    assertEquals(p_long(0), p_long(1) / p_char(23))
    assertEquals(p_long(0), p_long(1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / p_char(0))
    assertEquals(p_long(-1), p_long(-1) / p_char(1))
    assertEquals(p_long(0), p_long(-1) / p_char(23))
    assertEquals(p_long(0), p_long(-1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / p_char(0))
    assertEquals(p_long(23), p_long(23) / p_char(1))
    assertEquals(p_long(1), p_long(23) / p_char(23))
    assertEquals(p_long(0), p_long(23) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / p_char(0))
    assertEquals(p_long(-32), p_long(-32) / p_char(1))
    assertEquals(p_long(-1), p_long(-32) / p_char(23))
    assertEquals(p_long(0), p_long(-32) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / p_char(0))
    assertEquals(p_long(9223372036854775807), p_long(Long.MAX_VALUE) / p_char(1))
    assertEquals(p_long(401016175515425035), p_long(Long.MAX_VALUE) / p_char(23))
    assertEquals(p_long(140739635871744), p_long(Long.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / p_char(0))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_char(1))
    assertEquals(p_long(-401016175515425035), p_long(Long.MIN_VALUE) / p_char(23))
    assertEquals(p_long(-140739635871744), p_long(Long.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(long, statictypeof(p_long(0) / p_char(0)))
  }

  function testPLongCharacterDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / b_char(0))
    assertEquals(b_long(0), p_long(0) / b_char(1))
    assertEquals(b_long(0), p_long(0) / b_char(23))
    assertEquals(b_long(0), p_long(0) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / b_char(0))
    assertEquals(b_long(1), p_long(1) / b_char(1))
    assertEquals(b_long(0), p_long(1) / b_char(23))
    assertEquals(b_long(0), p_long(1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / b_char(0))
    assertEquals(b_long(-1), p_long(-1) / b_char(1))
    assertEquals(b_long(0), p_long(-1) / b_char(23))
    assertEquals(b_long(0), p_long(-1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / b_char(0))
    assertEquals(b_long(23), p_long(23) / b_char(1))
    assertEquals(b_long(1), p_long(23) / b_char(23))
    assertEquals(b_long(0), p_long(23) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / b_char(0))
    assertEquals(b_long(-32), p_long(-32) / b_char(1))
    assertEquals(b_long(-1), p_long(-32) / b_char(23))
    assertEquals(b_long(0), p_long(-32) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / b_char(0))
    assertEquals(b_long(9223372036854775807), p_long(Long.MAX_VALUE) / b_char(1))
    assertEquals(b_long(401016175515425035), p_long(Long.MAX_VALUE) / b_char(23))
    assertEquals(b_long(140739635871744), p_long(Long.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / b_char(0))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_char(1))
    assertEquals(b_long(-401016175515425035), p_long(Long.MIN_VALUE) / b_char(23))
    assertEquals(b_long(-140739635871744), p_long(Long.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Long, statictypeof(p_long(0) / b_char(0)))
  }

  function testPLongPIntDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / p_int(0))
    assertEquals(p_long(0), p_long(0) / p_int(1))
    assertEquals(p_long(0), p_long(0) / p_int(-1))
    assertEquals(p_long(0), p_long(0) / p_int(23))
    assertEquals(p_long(0), p_long(0) / p_int(-32))
    assertEquals(p_long(0), p_long(0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(0), p_long(0) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / p_int(0))
    assertEquals(p_long(1), p_long(1) / p_int(1))
    assertEquals(p_long(-1), p_long(1) / p_int(-1))
    assertEquals(p_long(0), p_long(1) / p_int(23))
    assertEquals(p_long(0), p_long(1) / p_int(-32))
    assertEquals(p_long(0), p_long(1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(0), p_long(1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / p_int(0))
    assertEquals(p_long(-1), p_long(-1) / p_int(1))
    assertEquals(p_long(1), p_long(-1) / p_int(-1))
    assertEquals(p_long(0), p_long(-1) / p_int(23))
    assertEquals(p_long(0), p_long(-1) / p_int(-32))
    assertEquals(p_long(0), p_long(-1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(0), p_long(-1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / p_int(0))
    assertEquals(p_long(23), p_long(23) / p_int(1))
    assertEquals(p_long(-23), p_long(23) / p_int(-1))
    assertEquals(p_long(1), p_long(23) / p_int(23))
    assertEquals(p_long(0), p_long(23) / p_int(-32))
    assertEquals(p_long(0), p_long(23) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(0), p_long(23) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / p_int(0))
    assertEquals(p_long(-32), p_long(-32) / p_int(1))
    assertEquals(p_long(32), p_long(-32) / p_int(-1))
    assertEquals(p_long(-1), p_long(-32) / p_int(23))
    assertEquals(p_long(1), p_long(-32) / p_int(-32))
    assertEquals(p_long(0), p_long(-32) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(0), p_long(-32) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / p_int(0))
    assertEquals(p_long(9223372036854775807), p_long(Long.MAX_VALUE) / p_int(1))
    assertEquals(p_long(-9223372036854775807), p_long(Long.MAX_VALUE) / p_int(-1))
    assertEquals(p_long(401016175515425035), p_long(Long.MAX_VALUE) / p_int(23))
    assertEquals(p_long(-288230376151711743), p_long(Long.MAX_VALUE) / p_int(-32))
    assertEquals(p_long(4294967298), p_long(Long.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(-4294967295), p_long(Long.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / p_int(0))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_int(1))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_int(-1))
    assertEquals(p_long(-401016175515425035), p_long(Long.MIN_VALUE) / p_int(23))
    assertEquals(p_long(288230376151711744), p_long(Long.MIN_VALUE) / p_int(-32))
    assertEquals(p_long(-4294967298), p_long(Long.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_long(4294967296), p_long(Long.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(long, statictypeof(p_long(0) / p_int(0)))
  }

  function testPLongIntegerDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / b_int(0))
    assertEquals(b_long(0), p_long(0) / b_int(1))
    assertEquals(b_long(0), p_long(0) / b_int(-1))
    assertEquals(b_long(0), p_long(0) / b_int(23))
    assertEquals(b_long(0), p_long(0) / b_int(-32))
    assertEquals(b_long(0), p_long(0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(0), p_long(0) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / b_int(0))
    assertEquals(b_long(1), p_long(1) / b_int(1))
    assertEquals(b_long(-1), p_long(1) / b_int(-1))
    assertEquals(b_long(0), p_long(1) / b_int(23))
    assertEquals(b_long(0), p_long(1) / b_int(-32))
    assertEquals(b_long(0), p_long(1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(0), p_long(1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / b_int(0))
    assertEquals(b_long(-1), p_long(-1) / b_int(1))
    assertEquals(b_long(1), p_long(-1) / b_int(-1))
    assertEquals(b_long(0), p_long(-1) / b_int(23))
    assertEquals(b_long(0), p_long(-1) / b_int(-32))
    assertEquals(b_long(0), p_long(-1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(0), p_long(-1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / b_int(0))
    assertEquals(b_long(23), p_long(23) / b_int(1))
    assertEquals(b_long(-23), p_long(23) / b_int(-1))
    assertEquals(b_long(1), p_long(23) / b_int(23))
    assertEquals(b_long(0), p_long(23) / b_int(-32))
    assertEquals(b_long(0), p_long(23) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(0), p_long(23) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / b_int(0))
    assertEquals(b_long(-32), p_long(-32) / b_int(1))
    assertEquals(b_long(32), p_long(-32) / b_int(-1))
    assertEquals(b_long(-1), p_long(-32) / b_int(23))
    assertEquals(b_long(1), p_long(-32) / b_int(-32))
    assertEquals(b_long(0), p_long(-32) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(0), p_long(-32) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / b_int(0))
    assertEquals(b_long(9223372036854775807), p_long(Long.MAX_VALUE) / b_int(1))
    assertEquals(b_long(-9223372036854775807), p_long(Long.MAX_VALUE) / b_int(-1))
    assertEquals(b_long(401016175515425035), p_long(Long.MAX_VALUE) / b_int(23))
    assertEquals(b_long(-288230376151711743), p_long(Long.MAX_VALUE) / b_int(-32))
    assertEquals(b_long(4294967298), p_long(Long.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(-4294967295), p_long(Long.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / b_int(0))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_int(1))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_int(-1))
    assertEquals(b_long(-401016175515425035), p_long(Long.MIN_VALUE) / b_int(23))
    assertEquals(b_long(288230376151711744), p_long(Long.MIN_VALUE) / b_int(-32))
    assertEquals(b_long(-4294967298), p_long(Long.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_long(4294967296), p_long(Long.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Long, statictypeof(p_long(0) / b_int(0)))
  }

  function testPLongPLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / p_long(0))
    assertEquals(p_long(0), p_long(0) / p_long(1))
    assertEquals(p_long(0), p_long(0) / p_long(-1))
    assertEquals(p_long(0), p_long(0) / p_long(23))
    assertEquals(p_long(0), p_long(0) / p_long(-32))
    assertEquals(p_long(0), p_long(0) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_long(0) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / p_long(0))
    assertEquals(p_long(1), p_long(1) / p_long(1))
    assertEquals(p_long(-1), p_long(1) / p_long(-1))
    assertEquals(p_long(0), p_long(1) / p_long(23))
    assertEquals(p_long(0), p_long(1) / p_long(-32))
    assertEquals(p_long(0), p_long(1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_long(1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / p_long(0))
    assertEquals(p_long(-1), p_long(-1) / p_long(1))
    assertEquals(p_long(1), p_long(-1) / p_long(-1))
    assertEquals(p_long(0), p_long(-1) / p_long(23))
    assertEquals(p_long(0), p_long(-1) / p_long(-32))
    assertEquals(p_long(0), p_long(-1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_long(-1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / p_long(0))
    assertEquals(p_long(23), p_long(23) / p_long(1))
    assertEquals(p_long(-23), p_long(23) / p_long(-1))
    assertEquals(p_long(1), p_long(23) / p_long(23))
    assertEquals(p_long(0), p_long(23) / p_long(-32))
    assertEquals(p_long(0), p_long(23) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_long(23) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / p_long(0))
    assertEquals(p_long(-32), p_long(-32) / p_long(1))
    assertEquals(p_long(32), p_long(-32) / p_long(-1))
    assertEquals(p_long(-1), p_long(-32) / p_long(23))
    assertEquals(p_long(1), p_long(-32) / p_long(-32))
    assertEquals(p_long(0), p_long(-32) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_long(-32) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / p_long(0))
    assertEquals(p_long(9223372036854775807), p_long(Long.MAX_VALUE) / p_long(1))
    assertEquals(p_long(-9223372036854775807), p_long(Long.MAX_VALUE) / p_long(-1))
    assertEquals(p_long(401016175515425035), p_long(Long.MAX_VALUE) / p_long(23))
    assertEquals(p_long(-288230376151711743), p_long(Long.MAX_VALUE) / p_long(-32))
    assertEquals(p_long(1), p_long(Long.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_long(Long.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / p_long(0))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_long(1))
    assertEquals(p_long(-9223372036854775808), p_long(Long.MIN_VALUE) / p_long(-1))
    assertEquals(p_long(-401016175515425035), p_long(Long.MIN_VALUE) / p_long(23))
    assertEquals(p_long(288230376151711744), p_long(Long.MIN_VALUE) / p_long(-32))
    assertEquals(p_long(-1), p_long(Long.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(1), p_long(Long.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(long, statictypeof(p_long(0) / p_long(0)))
  }

  function testPLongLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_long(0) / b_long(0))
    assertEquals(b_long(0), p_long(0) / b_long(1))
    assertEquals(b_long(0), p_long(0) / b_long(-1))
    assertEquals(b_long(0), p_long(0) / b_long(23))
    assertEquals(b_long(0), p_long(0) / b_long(-32))
    assertEquals(b_long(0), p_long(0) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_long(0) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(1) / b_long(0))
    assertEquals(b_long(1), p_long(1) / b_long(1))
    assertEquals(b_long(-1), p_long(1) / b_long(-1))
    assertEquals(b_long(0), p_long(1) / b_long(23))
    assertEquals(b_long(0), p_long(1) / b_long(-32))
    assertEquals(b_long(0), p_long(1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_long(1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-1) / b_long(0))
    assertEquals(b_long(-1), p_long(-1) / b_long(1))
    assertEquals(b_long(1), p_long(-1) / b_long(-1))
    assertEquals(b_long(0), p_long(-1) / b_long(23))
    assertEquals(b_long(0), p_long(-1) / b_long(-32))
    assertEquals(b_long(0), p_long(-1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_long(-1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(23) / b_long(0))
    assertEquals(b_long(23), p_long(23) / b_long(1))
    assertEquals(b_long(-23), p_long(23) / b_long(-1))
    assertEquals(b_long(1), p_long(23) / b_long(23))
    assertEquals(b_long(0), p_long(23) / b_long(-32))
    assertEquals(b_long(0), p_long(23) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_long(23) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(-32) / b_long(0))
    assertEquals(b_long(-32), p_long(-32) / b_long(1))
    assertEquals(b_long(32), p_long(-32) / b_long(-1))
    assertEquals(b_long(-1), p_long(-32) / b_long(23))
    assertEquals(b_long(1), p_long(-32) / b_long(-32))
    assertEquals(b_long(0), p_long(-32) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_long(-32) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MAX_VALUE) / b_long(0))
    assertEquals(b_long(9223372036854775807), p_long(Long.MAX_VALUE) / b_long(1))
    assertEquals(b_long(-9223372036854775807), p_long(Long.MAX_VALUE) / b_long(-1))
    assertEquals(b_long(401016175515425035), p_long(Long.MAX_VALUE) / b_long(23))
    assertEquals(b_long(-288230376151711743), p_long(Long.MAX_VALUE) / b_long(-32))
    assertEquals(b_long(1), p_long(Long.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_long(Long.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_long(Long.MIN_VALUE) / b_long(0))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_long(1))
    assertEquals(b_long(-9223372036854775808), p_long(Long.MIN_VALUE) / b_long(-1))
    assertEquals(b_long(-401016175515425035), p_long(Long.MIN_VALUE) / b_long(23))
    assertEquals(b_long(288230376151711744), p_long(Long.MIN_VALUE) / b_long(-32))
    assertEquals(b_long(-1), p_long(Long.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(1), p_long(Long.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(p_long(0) / b_long(0)))
  }

  function testPLongPFloatDivision() {
    assertEquals(p_float(Float.NaN_), p_long(0) / p_float(0.0))
    assertEquals(p_float(0.0), p_long(0) / p_float(1.0))
    assertEquals(p_float(-0.0), p_long(0) / p_float(-1.0))
    assertEquals(p_float(0.0), p_long(0) / p_float(23.0))
    assertEquals(p_float(0.0), p_long(0) / p_float(23.123))
    assertEquals(p_float(-0.0), p_long(0) / p_float(-32.0))
    assertEquals(p_float(-0.0), p_long(0) / p_float(-32.456))
    assertEquals(p_float(0.0), p_long(0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_long(0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(0) / p_float(Float.NaN_))
    assertEquals(p_float(0.0), p_long(0) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_long(0) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_long(1) / p_float(0.0))
    assertEquals(p_float(1.0), p_long(1) / p_float(1.0))
    assertEquals(p_float(-1.0), p_long(1) / p_float(-1.0))
    assertEquals(p_float(0.04347826), p_long(1) / p_float(23.0))
    assertEquals(p_float(0.043246984), p_long(1) / p_float(23.123))
    assertEquals(p_float(-0.03125), p_long(1) / p_float(-32.0))
    assertEquals(p_float(-0.030810943), p_long(1) / p_float(-32.456))
    assertEquals(p_float(0.0), p_long(1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_long(1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("2.938736E-39")), p_long(1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_long(1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_long(-1) / p_float(0.0))
    assertEquals(p_float(-1.0), p_long(-1) / p_float(1.0))
    assertEquals(p_float(1.0), p_long(-1) / p_float(-1.0))
    assertEquals(p_float(-0.04347826), p_long(-1) / p_float(23.0))
    assertEquals(p_float(-0.043246984), p_long(-1) / p_float(23.123))
    assertEquals(p_float(0.03125), p_long(-1) / p_float(-32.0))
    assertEquals(p_float(0.030810943), p_long(-1) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_long(-1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_long(-1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(-1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-2.938736E-39")), p_long(-1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_long(-1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_long(23) / p_float(0.0))
    assertEquals(p_float(23.0), p_long(23) / p_float(1.0))
    assertEquals(p_float(-23.0), p_long(23) / p_float(-1.0))
    assertEquals(p_float(1.0), p_long(23) / p_float(23.0))
    assertEquals(p_float(0.99468064), p_long(23) / p_float(23.123))
    assertEquals(p_float(-0.71875), p_long(23) / p_float(-32.0))
    assertEquals(p_float(-0.70865166), p_long(23) / p_float(-32.456))
    assertEquals(p_float(0.0), p_long(23) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_long(23) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(23) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("6.759093E-38")), p_long(23) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_long(23) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_long(-32) / p_float(0.0))
    assertEquals(p_float(-32.0), p_long(-32) / p_float(1.0))
    assertEquals(p_float(32.0), p_long(-32) / p_float(-1.0))
    assertEquals(p_float(-1.3913044), p_long(-32) / p_float(23.0))
    assertEquals(p_float(-1.3839035), p_long(-32) / p_float(23.123))
    assertEquals(p_float(1.0), p_long(-32) / p_float(-32.0))
    assertEquals(p_float(0.9859502), p_long(-32) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_long(-32) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_long(-32) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(-32) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-9.403956E-38")), p_long(-32) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_long(-32) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / p_float(0.0))
    assertEquals(p_float(Float.parseFloat("9.223372E18")), p_long(Long.MAX_VALUE) / p_float(1.0))
    assertEquals(p_float(Float.parseFloat("-9.223372E18")), p_long(Long.MAX_VALUE) / p_float(-1.0))
    assertEquals(p_float(Float.parseFloat("4.01016183E17")), p_long(Long.MAX_VALUE) / p_float(23.0))
    assertEquals(p_float(Float.parseFloat("3.98883027E17")), p_long(Long.MAX_VALUE) / p_float(23.123))
    assertEquals(p_float(Float.parseFloat("-2.88230376E17")), p_long(Long.MAX_VALUE) / p_float(-32.0))
    assertEquals(p_float(Float.parseFloat("-2.84180789E17")), p_long(Long.MAX_VALUE) / p_float(-32.456))
    assertEquals(p_float(0.0), p_long(Long.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_long(Long.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(Long.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("2.7105058E-20")), p_long(Long.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / p_float(0.0))
    assertEquals(p_float(Float.parseFloat("-9.223372E18")), p_long(Long.MIN_VALUE) / p_float(1.0))
    assertEquals(p_float(Float.parseFloat("9.223372E18")), p_long(Long.MIN_VALUE) / p_float(-1.0))
    assertEquals(p_float(Float.parseFloat("-4.01016183E17")), p_long(Long.MIN_VALUE) / p_float(23.0))
    assertEquals(p_float(Float.parseFloat("-3.98883027E17")), p_long(Long.MIN_VALUE) / p_float(23.123))
    assertEquals(p_float(Float.parseFloat("2.88230376E17")), p_long(Long.MIN_VALUE) / p_float(-32.0))
    assertEquals(p_float(Float.parseFloat("2.84180789E17")), p_long(Long.MIN_VALUE) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_long(Long.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_long(Long.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_long(Long.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-2.7105058E-20")), p_long(Long.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(float, statictypeof(p_long(0) / p_float(0.0)))
  }

  function testPLongFloatDivision() {
    assertEquals(b_float(Float.NaN_), p_long(0) / b_float(0.0))
    assertEquals(b_float(0.0), p_long(0) / b_float(1.0))
    assertEquals(b_float(-0.0), p_long(0) / b_float(-1.0))
    assertEquals(b_float(0.0), p_long(0) / b_float(23.0))
    assertEquals(b_float(0.0), p_long(0) / b_float(23.123))
    assertEquals(b_float(-0.0), p_long(0) / b_float(-32.0))
    assertEquals(b_float(-0.0), p_long(0) / b_float(-32.456))
    assertEquals(b_float(0.0), p_long(0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_long(0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(0) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), p_long(0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_long(0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_long(1) / b_float(0.0))
    assertEquals(b_float(1.0), p_long(1) / b_float(1.0))
    assertEquals(b_float(-1.0), p_long(1) / b_float(-1.0))
    assertEquals(b_float(0.04347826), p_long(1) / b_float(23.0))
    assertEquals(b_float(0.043246984), p_long(1) / b_float(23.123))
    assertEquals(b_float(-0.03125), p_long(1) / b_float(-32.0))
    assertEquals(b_float(-0.030810943), p_long(1) / b_float(-32.456))
    assertEquals(b_float(0.0), p_long(1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_long(1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), p_long(1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_long(1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_long(-1) / b_float(0.0))
    assertEquals(b_float(-1.0), p_long(-1) / b_float(1.0))
    assertEquals(b_float(1.0), p_long(-1) / b_float(-1.0))
    assertEquals(b_float(-0.04347826), p_long(-1) / b_float(23.0))
    assertEquals(b_float(-0.043246984), p_long(-1) / b_float(23.123))
    assertEquals(b_float(0.03125), p_long(-1) / b_float(-32.0))
    assertEquals(b_float(0.030810943), p_long(-1) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_long(-1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_long(-1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(-1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), p_long(-1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_long(-1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_long(23) / b_float(0.0))
    assertEquals(b_float(23.0), p_long(23) / b_float(1.0))
    assertEquals(b_float(-23.0), p_long(23) / b_float(-1.0))
    assertEquals(b_float(1.0), p_long(23) / b_float(23.0))
    assertEquals(b_float(0.99468064), p_long(23) / b_float(23.123))
    assertEquals(b_float(-0.71875), p_long(23) / b_float(-32.0))
    assertEquals(b_float(-0.70865166), p_long(23) / b_float(-32.456))
    assertEquals(b_float(0.0), p_long(23) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_long(23) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(23) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), p_long(23) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_long(23) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_long(-32) / b_float(0.0))
    assertEquals(b_float(-32.0), p_long(-32) / b_float(1.0))
    assertEquals(b_float(32.0), p_long(-32) / b_float(-1.0))
    assertEquals(b_float(-1.3913044), p_long(-32) / b_float(23.0))
    assertEquals(b_float(-1.3839035), p_long(-32) / b_float(23.123))
    assertEquals(b_float(1.0), p_long(-32) / b_float(-32.0))
    assertEquals(b_float(0.9859502), p_long(-32) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_long(-32) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_long(-32) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(-32) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), p_long(-32) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_long(-32) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / b_float(0.0))
    assertEquals(b_float(Float.parseFloat("9.223372E18")), p_long(Long.MAX_VALUE) / b_float(1.0))
    assertEquals(b_float(Float.parseFloat("-9.223372E18")), p_long(Long.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("4.01016183E17")), p_long(Long.MAX_VALUE) / b_float(23.0))
    assertEquals(b_float(Float.parseFloat("3.98883027E17")), p_long(Long.MAX_VALUE) / b_float(23.123))
    assertEquals(b_float(Float.parseFloat("-2.88230376E17")), p_long(Long.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("-2.84180789E17")), p_long(Long.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), p_long(Long.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_long(Long.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(Long.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.7105058E-20")), p_long(Long.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / b_float(0.0))
    assertEquals(b_float(Float.parseFloat("-9.223372E18")), p_long(Long.MIN_VALUE) / b_float(1.0))
    assertEquals(b_float(Float.parseFloat("9.223372E18")), p_long(Long.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_float(Float.parseFloat("-4.01016183E17")), p_long(Long.MIN_VALUE) / b_float(23.0))
    assertEquals(b_float(Float.parseFloat("-3.98883027E17")), p_long(Long.MIN_VALUE) / b_float(23.123))
    assertEquals(b_float(Float.parseFloat("2.88230376E17")), p_long(Long.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_float(Float.parseFloat("2.84180789E17")), p_long(Long.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_long(Long.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_long(Long.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_long(Long.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.7105058E-20")), p_long(Long.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(p_long(0) / b_float(0.0)))
  }

  function testPLongPDoubleDivision() {
    assertEquals(p_double(Double.NaN_), p_long(0) / p_double(0.0))
    assertEquals(p_double(0.0), p_long(0) / p_double(1.0))
    assertEquals(p_double(-0.0), p_long(0) / p_double(-1.0))
    assertEquals(p_double(0.0), p_long(0) / p_double(23.0))
    assertEquals(p_double(0.0), p_long(0) / p_double(23.123))
    assertEquals(p_double(-0.0), p_long(0) / p_double(-32.0))
    assertEquals(p_double(-0.0), p_long(0) / p_double(-32.456))
    assertEquals(p_double(0.0), p_long(0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_long(0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(0) / p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_long(0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_long(0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_long(1) / p_double(0.0))
    assertEquals(p_double(1.0), p_long(1) / p_double(1.0))
    assertEquals(p_double(-1.0), p_long(1) / p_double(-1.0))
    assertEquals(p_double(0.043478260869565216), p_long(1) / p_double(23.0))
    assertEquals(p_double(0.043246983522899275), p_long(1) / p_double(23.123))
    assertEquals(p_double(-0.03125), p_long(1) / p_double(-32.0))
    assertEquals(p_double(-0.03081094404732561), p_long(1) / p_double(-32.456))
    assertEquals(p_double(0.0), p_long(1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_long(1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("5.562684646268003E-309")), p_long(1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_long(1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_long(-1) / p_double(0.0))
    assertEquals(p_double(-1.0), p_long(-1) / p_double(1.0))
    assertEquals(p_double(1.0), p_long(-1) / p_double(-1.0))
    assertEquals(p_double(-0.043478260869565216), p_long(-1) / p_double(23.0))
    assertEquals(p_double(-0.043246983522899275), p_long(-1) / p_double(23.123))
    assertEquals(p_double(0.03125), p_long(-1) / p_double(-32.0))
    assertEquals(p_double(0.03081094404732561), p_long(-1) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_long(-1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_long(-1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(-1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-5.562684646268003E-309")), p_long(-1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_long(-1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_long(23) / p_double(0.0))
    assertEquals(p_double(23.0), p_long(23) / p_double(1.0))
    assertEquals(p_double(-23.0), p_long(23) / p_double(-1.0))
    assertEquals(p_double(1.0), p_long(23) / p_double(23.0))
    assertEquals(p_double(0.9946806210266833), p_long(23) / p_double(23.123))
    assertEquals(p_double(-0.71875), p_long(23) / p_double(-32.0))
    assertEquals(p_double(-0.708651713088489), p_long(23) / p_double(-32.456))
    assertEquals(p_double(0.0), p_long(23) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_long(23) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(23) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.279417468641641E-307")), p_long(23) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_long(23) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_long(-32) / p_double(0.0))
    assertEquals(p_double(-32.0), p_long(-32) / p_double(1.0))
    assertEquals(p_double(32.0), p_long(-32) / p_double(-1.0))
    assertEquals(p_double(-1.391304347826087), p_long(-32) / p_double(23.0))
    assertEquals(p_double(-1.3839034727327768), p_long(-32) / p_double(23.123))
    assertEquals(p_double(1.0), p_long(-32) / p_double(-32.0))
    assertEquals(p_double(0.9859502095144195), p_long(-32) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_long(-32) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_long(-32) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(-32) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.7800590868057615E-307")), p_long(-32) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_long(-32) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / p_double(0.0))
    assertEquals(p_double(Double.parseDouble("9.223372036854776E18")), p_long(Long.MAX_VALUE) / p_double(1.0))
    assertEquals(p_double(Double.parseDouble("-9.223372036854776E18")), p_long(Long.MAX_VALUE) / p_double(-1.0))
    assertEquals(p_double(Double.parseDouble("4.0101617551542502E17")), p_long(Long.MAX_VALUE) / p_double(23.0))
    assertEquals(p_double(Double.parseDouble("3.9888301850342842E17")), p_long(Long.MAX_VALUE) / p_double(23.123))
    assertEquals(p_double(Double.parseDouble("-2.8823037615171174E17")), p_long(Long.MAX_VALUE) / p_double(-32.0))
    assertEquals(p_double(Double.parseDouble("-2.84180799755200128E17")), p_long(Long.MAX_VALUE) / p_double(-32.456))
    assertEquals(p_double(0.0), p_long(Long.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_long(Long.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(Long.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("5.130671001622971E-290")), p_long(Long.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / p_double(0.0))
    assertEquals(p_double(Double.parseDouble("-9.223372036854776E18")), p_long(Long.MIN_VALUE) / p_double(1.0))
    assertEquals(p_double(Double.parseDouble("9.223372036854776E18")), p_long(Long.MIN_VALUE) / p_double(-1.0))
    assertEquals(p_double(Double.parseDouble("-4.0101617551542502E17")), p_long(Long.MIN_VALUE) / p_double(23.0))
    assertEquals(p_double(Double.parseDouble("-3.9888301850342842E17")), p_long(Long.MIN_VALUE) / p_double(23.123))
    assertEquals(p_double(Double.parseDouble("2.8823037615171174E17")), p_long(Long.MIN_VALUE) / p_double(-32.0))
    assertEquals(p_double(Double.parseDouble("2.84180799755200128E17")), p_long(Long.MIN_VALUE) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_long(Long.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_long(Long.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_long(Long.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-5.130671001622971E-290")), p_long(Long.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_long(0) / p_double(0.0)))
  }

  function testPLongDoubleDivision() {
    assertEquals(b_double(Double.NaN_), p_long(0) / b_double(0.0))
    assertEquals(b_double(0.0), p_long(0) / b_double(1.0))
    assertEquals(b_double(-0.0), p_long(0) / b_double(-1.0))
    assertEquals(b_double(0.0), p_long(0) / b_double(23.0))
    assertEquals(b_double(0.0), p_long(0) / b_double(23.123))
    assertEquals(b_double(-0.0), p_long(0) / b_double(-32.0))
    assertEquals(b_double(-0.0), p_long(0) / b_double(-32.456))
    assertEquals(b_double(0.0), p_long(0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_long(0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_long(0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_long(0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_long(1) / b_double(0.0))
    assertEquals(b_double(1.0), p_long(1) / b_double(1.0))
    assertEquals(b_double(-1.0), p_long(1) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), p_long(1) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), p_long(1) / b_double(23.123))
    assertEquals(b_double(-0.03125), p_long(1) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), p_long(1) / b_double(-32.456))
    assertEquals(b_double(0.0), p_long(1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_long(1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), p_long(1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_long(1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_long(-1) / b_double(0.0))
    assertEquals(b_double(-1.0), p_long(-1) / b_double(1.0))
    assertEquals(b_double(1.0), p_long(-1) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), p_long(-1) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), p_long(-1) / b_double(23.123))
    assertEquals(b_double(0.03125), p_long(-1) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), p_long(-1) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_long(-1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_long(-1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(-1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), p_long(-1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_long(-1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_long(23) / b_double(0.0))
    assertEquals(b_double(23.0), p_long(23) / b_double(1.0))
    assertEquals(b_double(-23.0), p_long(23) / b_double(-1.0))
    assertEquals(b_double(1.0), p_long(23) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), p_long(23) / b_double(23.123))
    assertEquals(b_double(-0.71875), p_long(23) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), p_long(23) / b_double(-32.456))
    assertEquals(b_double(0.0), p_long(23) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_long(23) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(23) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), p_long(23) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_long(23) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_long(-32) / b_double(0.0))
    assertEquals(b_double(-32.0), p_long(-32) / b_double(1.0))
    assertEquals(b_double(32.0), p_long(-32) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), p_long(-32) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), p_long(-32) / b_double(23.123))
    assertEquals(b_double(1.0), p_long(-32) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), p_long(-32) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_long(-32) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_long(-32) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(-32) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), p_long(-32) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_long(-32) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), p_long(Long.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), p_long(Long.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("4.0101617551542502E17")), p_long(Long.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("3.9888301850342842E17")), p_long(Long.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("-2.8823037615171174E17")), p_long(Long.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("-2.84180799755200128E17")), p_long(Long.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), p_long(Long.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_long(Long.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(Long.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.130671001622971E-290")), p_long(Long.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_long(Long.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), p_long(Long.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), p_long(Long.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(Double.parseDouble("-4.0101617551542502E17")), p_long(Long.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(Double.parseDouble("-3.9888301850342842E17")), p_long(Long.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(Double.parseDouble("2.8823037615171174E17")), p_long(Long.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(Double.parseDouble("2.84180799755200128E17")), p_long(Long.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_long(Long.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_long(Long.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_long(Long.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.130671001622971E-290")), p_long(Long.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_long(Long.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_long(0) / b_double(0.0)))
  }

  function testPLongBigIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(0) / big_int("0"))
    assertEquals(big_int("0"), p_long(0) / big_int("1"))
    assertEquals(big_int("0"), p_long(0) / big_int("-1"))
    assertEquals(big_int("0"), p_long(0) / big_int("23"))
    assertEquals(big_int("0"), p_long(0) / big_int("-32"))
    assertEquals(big_int("0"), p_long(0) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(1) / big_int("0"))
    assertEquals(big_int("1"), p_long(1) / big_int("1"))
    assertEquals(big_int("-1"), p_long(1) / big_int("-1"))
    assertEquals(big_int("0"), p_long(1) / big_int("23"))
    assertEquals(big_int("0"), p_long(1) / big_int("-32"))
    assertEquals(big_int("0"), p_long(1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(-1) / big_int("0"))
    assertEquals(big_int("-1"), p_long(-1) / big_int("1"))
    assertEquals(big_int("1"), p_long(-1) / big_int("-1"))
    assertEquals(big_int("0"), p_long(-1) / big_int("23"))
    assertEquals(big_int("0"), p_long(-1) / big_int("-32"))
    assertEquals(big_int("0"), p_long(-1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(-1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(23) / big_int("0"))
    assertEquals(big_int("23"), p_long(23) / big_int("1"))
    assertEquals(big_int("-23"), p_long(23) / big_int("-1"))
    assertEquals(big_int("1"), p_long(23) / big_int("23"))
    assertEquals(big_int("0"), p_long(23) / big_int("-32"))
    assertEquals(big_int("0"), p_long(23) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(23) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(-32) / big_int("0"))
    assertEquals(big_int("-32"), p_long(-32) / big_int("1"))
    assertEquals(big_int("32"), p_long(-32) / big_int("-1"))
    assertEquals(big_int("-1"), p_long(-32) / big_int("23"))
    assertEquals(big_int("1"), p_long(-32) / big_int("-32"))
    assertEquals(big_int("0"), p_long(-32) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(-32) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(Long.MAX_VALUE) / big_int("0"))
    assertEquals(big_int("9223372036854775807"), p_long(Long.MAX_VALUE) / big_int("1"))
    assertEquals(big_int("-9223372036854775807"), p_long(Long.MAX_VALUE) / big_int("-1"))
    assertEquals(big_int("401016175515425035"), p_long(Long.MAX_VALUE) / big_int("23"))
    assertEquals(big_int("-288230376151711743"), p_long(Long.MAX_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), p_long(Long.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(Long.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_long(Long.MIN_VALUE) / big_int("0"))
    assertEquals(big_int("-9223372036854775808"), p_long(Long.MIN_VALUE) / big_int("1"))
    assertEquals(big_int("9223372036854775808"), p_long(Long.MIN_VALUE) / big_int("-1"))
    assertEquals(big_int("-401016175515425035"), p_long(Long.MIN_VALUE) / big_int("23"))
    assertEquals(big_int("288230376151711744"), p_long(Long.MIN_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), p_long(Long.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_long(Long.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(p_long(0) / big_int("0")))
  }

  function testPLongBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> p_long(0) / big_decimal("0"))
    assertEquals(big_decimal("0"), p_long(0) / big_decimal("1"))
    assertEquals(big_decimal("0"), p_long(0) / big_decimal("-1"))
    assertEquals(big_decimal("0"), p_long(0) / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), p_long(0) / big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_long(0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), p_long(0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), p_long(0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), p_long(0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_long(1) / big_decimal("0"))
    assertEquals(big_decimal("1"), p_long(1) / big_decimal("1"))
    assertEquals(big_decimal("-1"), p_long(1) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), p_long(1) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), p_long(1) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), p_long(1) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), p_long(1) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_long(1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_long(1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_long(-1) / big_decimal("0"))
    assertEquals(big_decimal("-1"), p_long(-1) / big_decimal("1"))
    assertEquals(big_decimal("1"), p_long(-1) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), p_long(-1) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), p_long(-1) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), p_long(-1) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), p_long(-1) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_long(-1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_long(-1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_long(23) / big_decimal("0"))
    assertEquals(big_decimal("23"), p_long(23) / big_decimal("1"))
    assertEquals(big_decimal("-23"), p_long(23) / big_decimal("-1"))
    assertEquals(big_decimal("1"), p_long(23) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), p_long(23) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), p_long(23) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), p_long(23) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), p_long(23) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), p_long(23) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_long(-32) / big_decimal("0"))
    assertEquals(big_decimal("-32"), p_long(-32) / big_decimal("1"))
    assertEquals(big_decimal("32"), p_long(-32) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), p_long(-32) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), p_long(-32) / big_decimal("23.123"))
    assertEquals(big_decimal("1"), p_long(-32) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), p_long(-32) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), p_long(-32) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), p_long(-32) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_long(Long.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("9223372036854775807"), p_long(Long.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-9223372036854775807"), p_long(Long.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("401016175515425035.0869565217391304"), p_long(Long.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("398883018503428439.5190935432253600"), p_long(Long.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-288230376151711743.96875"), p_long(Long.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-284180799755200141.9460192260290855"), p_long(Long.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("7.470931417090751164210598753949449E-11"), p_long(Long.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-7.470931417090751164210598753949449E-11"), p_long(Long.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_long(Long.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("-9223372036854775808"), p_long(Long.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("9223372036854775808"), p_long(Long.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("-401016175515425035.1304347826086957"), p_long(Long.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("-398883018503428439.5623405267482593"), p_long(Long.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("288230376151711744"), p_long(Long.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("284180799755200141.9768301700764111"), p_long(Long.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("-7.470931417090751165020598761239449E-11"), p_long(Long.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("7.470931417090751165020598761239449E-11"), p_long(Long.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_long(0) / big_decimal("0")))
  }

}

