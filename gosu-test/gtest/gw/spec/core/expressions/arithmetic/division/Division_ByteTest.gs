package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_ByteTest extends ArithmeticTestBase {

  function testBytePByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / p_byte(0))
    assertEquals(b_int(0), b_byte(0) / p_byte(1))
    assertEquals(b_int(0), b_byte(0) / p_byte(-1))
    assertEquals(b_int(0), b_byte(0) / p_byte(23))
    assertEquals(b_int(0), b_byte(0) / p_byte(-32))
    assertEquals(b_int(0), b_byte(0) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(0) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / p_byte(0))
    assertEquals(p_int(1), p_byte(1) / p_byte(1))
    assertEquals(p_int(-1), p_byte(1) / p_byte(-1))
    assertEquals(p_int(0), p_byte(1) / p_byte(23))
    assertEquals(p_int(0), p_byte(1) / p_byte(-32))
    assertEquals(p_int(0), p_byte(1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_byte(1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / p_byte(0))
    assertEquals(p_int(-1), p_byte(-1) / p_byte(1))
    assertEquals(p_int(1), p_byte(-1) / p_byte(-1))
    assertEquals(p_int(0), p_byte(-1) / p_byte(23))
    assertEquals(p_int(0), p_byte(-1) / p_byte(-32))
    assertEquals(p_int(0), p_byte(-1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_byte(-1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / p_byte(0))
    assertEquals(b_int(23), b_byte(23) / p_byte(1))
    assertEquals(b_int(-23), b_byte(23) / p_byte(-1))
    assertEquals(b_int(1), b_byte(23) / p_byte(23))
    assertEquals(b_int(0), b_byte(23) / p_byte(-32))
    assertEquals(b_int(0), b_byte(23) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(23) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / p_byte(0))
    assertEquals(b_int(-32), b_byte(-32) / p_byte(1))
    assertEquals(b_int(32), b_byte(-32) / p_byte(-1))
    assertEquals(b_int(-1), b_byte(-32) / p_byte(23))
    assertEquals(b_int(1), b_byte(-32) / p_byte(-32))
    assertEquals(b_int(0), b_byte(-32) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(-32) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / p_byte(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / p_byte(1))
    assertEquals(b_int(-127), b_byte(Byte.MAX_VALUE) / p_byte(-1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / p_byte(23))
    assertEquals(b_int(-3), b_byte(Byte.MAX_VALUE) / p_byte(-32))
    assertEquals(b_int(1), b_byte(Byte.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / p_byte(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / p_byte(1))
    assertEquals(b_int(128), b_byte(Byte.MIN_VALUE) / p_byte(-1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / p_byte(23))
    assertEquals(b_int(4), b_byte(Byte.MIN_VALUE) / p_byte(-32))
    assertEquals(b_int(-1), b_byte(Byte.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(1), b_byte(Byte.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / p_byte(0)))
  }

  function testByteByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / b_byte(0))
    assertEquals(b_int(0), b_byte(0) / p_byte(1))
    assertEquals(b_int(0), b_byte(0) / p_byte(-1))
    assertEquals(b_int(0), b_byte(0) / b_byte(23))
    assertEquals(b_int(0), b_byte(0) / b_byte(-32))
    assertEquals(b_int(0), b_byte(0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(0) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / b_byte(0))
    assertEquals(p_int(1), p_byte(1) / p_byte(1))
    assertEquals(p_int(-1), p_byte(1) / p_byte(-1))
    assertEquals(b_int(0), p_byte(1) / b_byte(23))
    assertEquals(b_int(0), p_byte(1) / b_byte(-32))
    assertEquals(b_int(0), p_byte(1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_byte(1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / b_byte(0))
    assertEquals(p_int(-1), p_byte(-1) / p_byte(1))
    assertEquals(p_int(1), p_byte(-1) / p_byte(-1))
    assertEquals(b_int(0), p_byte(-1) / b_byte(23))
    assertEquals(b_int(0), p_byte(-1) / b_byte(-32))
    assertEquals(b_int(0), p_byte(-1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_byte(-1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / b_byte(0))
    assertEquals(b_int(23), b_byte(23) / p_byte(1))
    assertEquals(b_int(-23), b_byte(23) / p_byte(-1))
    assertEquals(b_int(1), b_byte(23) / b_byte(23))
    assertEquals(b_int(0), b_byte(23) / b_byte(-32))
    assertEquals(b_int(0), b_byte(23) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(23) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / b_byte(0))
    assertEquals(b_int(-32), b_byte(-32) / p_byte(1))
    assertEquals(b_int(32), b_byte(-32) / p_byte(-1))
    assertEquals(b_int(-1), b_byte(-32) / b_byte(23))
    assertEquals(b_int(1), b_byte(-32) / b_byte(-32))
    assertEquals(b_int(0), b_byte(-32) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(-32) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / b_byte(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / p_byte(1))
    assertEquals(b_int(-127), b_byte(Byte.MAX_VALUE) / p_byte(-1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / b_byte(23))
    assertEquals(b_int(-3), b_byte(Byte.MAX_VALUE) / b_byte(-32))
    assertEquals(b_int(1), b_byte(Byte.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / b_byte(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / p_byte(1))
    assertEquals(b_int(128), b_byte(Byte.MIN_VALUE) / p_byte(-1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / b_byte(23))
    assertEquals(b_int(4), b_byte(Byte.MIN_VALUE) / b_byte(-32))
    assertEquals(b_int(-1), b_byte(Byte.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(1), b_byte(Byte.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / b_byte(0)))
  }

  function testBytePShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / p_short(0))
    assertEquals(b_int(0), b_byte(0) / p_short(1))
    assertEquals(b_int(0), b_byte(0) / p_short(-1))
    assertEquals(b_int(0), b_byte(0) / p_short(23))
    assertEquals(b_int(0), b_byte(0) / p_short(-32))
    assertEquals(b_int(0), b_byte(0) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(0) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / p_short(0))
    assertEquals(p_int(1), p_byte(1) / p_short(1))
    assertEquals(p_int(-1), p_byte(1) / p_short(-1))
    assertEquals(p_int(0), p_byte(1) / p_short(23))
    assertEquals(p_int(0), p_byte(1) / p_short(-32))
    assertEquals(p_int(0), p_byte(1) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_byte(1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / p_short(0))
    assertEquals(p_int(-1), p_byte(-1) / p_short(1))
    assertEquals(p_int(1), p_byte(-1) / p_short(-1))
    assertEquals(p_int(0), p_byte(-1) / p_short(23))
    assertEquals(p_int(0), p_byte(-1) / p_short(-32))
    assertEquals(p_int(0), p_byte(-1) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_byte(-1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / p_short(0))
    assertEquals(b_int(23), b_byte(23) / p_short(1))
    assertEquals(b_int(-23), b_byte(23) / p_short(-1))
    assertEquals(b_int(1), b_byte(23) / p_short(23))
    assertEquals(b_int(0), b_byte(23) / p_short(-32))
    assertEquals(b_int(0), b_byte(23) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(23) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / p_short(0))
    assertEquals(b_int(-32), b_byte(-32) / p_short(1))
    assertEquals(b_int(32), b_byte(-32) / p_short(-1))
    assertEquals(b_int(-1), b_byte(-32) / p_short(23))
    assertEquals(b_int(1), b_byte(-32) / p_short(-32))
    assertEquals(b_int(0), b_byte(-32) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(-32) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / p_short(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / p_short(1))
    assertEquals(b_int(-127), b_byte(Byte.MAX_VALUE) / p_short(-1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / p_short(23))
    assertEquals(b_int(-3), b_byte(Byte.MAX_VALUE) / p_short(-32))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / p_short(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / p_short(1))
    assertEquals(b_int(128), b_byte(Byte.MIN_VALUE) / p_short(-1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / p_short(23))
    assertEquals(b_int(4), b_byte(Byte.MIN_VALUE) / p_short(-32))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / p_short(0)))
  }

  function testByteShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / b_short(0))
    assertEquals(b_int(0), b_byte(0) / b_short(1))
    assertEquals(b_int(0), b_byte(0) / b_short(-1))
    assertEquals(b_int(0), b_byte(0) / b_short(23))
    assertEquals(b_int(0), b_byte(0) / b_short(-32))
    assertEquals(b_int(0), b_byte(0) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(0) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / b_short(0))
    assertEquals(b_int(1), p_byte(1) / b_short(1))
    assertEquals(b_int(-1), p_byte(1) / b_short(-1))
    assertEquals(b_int(0), p_byte(1) / b_short(23))
    assertEquals(b_int(0), p_byte(1) / b_short(-32))
    assertEquals(b_int(0), p_byte(1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_byte(1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / b_short(0))
    assertEquals(b_int(-1), p_byte(-1) / b_short(1))
    assertEquals(b_int(1), p_byte(-1) / b_short(-1))
    assertEquals(b_int(0), p_byte(-1) / b_short(23))
    assertEquals(b_int(0), p_byte(-1) / b_short(-32))
    assertEquals(b_int(0), p_byte(-1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_byte(-1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / b_short(0))
    assertEquals(b_int(23), b_byte(23) / b_short(1))
    assertEquals(b_int(-23), b_byte(23) / b_short(-1))
    assertEquals(b_int(1), b_byte(23) / b_short(23))
    assertEquals(b_int(0), b_byte(23) / b_short(-32))
    assertEquals(b_int(0), b_byte(23) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(23) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / b_short(0))
    assertEquals(b_int(-32), b_byte(-32) / b_short(1))
    assertEquals(b_int(32), b_byte(-32) / b_short(-1))
    assertEquals(b_int(-1), b_byte(-32) / b_short(23))
    assertEquals(b_int(1), b_byte(-32) / b_short(-32))
    assertEquals(b_int(0), b_byte(-32) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(-32) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / b_short(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / b_short(1))
    assertEquals(b_int(-127), b_byte(Byte.MAX_VALUE) / b_short(-1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / b_short(23))
    assertEquals(b_int(-3), b_byte(Byte.MAX_VALUE) / b_short(-32))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / b_short(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / b_short(1))
    assertEquals(b_int(128), b_byte(Byte.MIN_VALUE) / b_short(-1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / b_short(23))
    assertEquals(b_int(4), b_byte(Byte.MIN_VALUE) / b_short(-32))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / b_short(0)))
  }

  function testBytePCharDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / p_char(0))
    assertEquals(b_int(0), b_byte(0) / p_char(1))
    assertEquals(b_int(0), b_byte(0) / p_char(23))
    assertEquals(b_int(0), b_byte(0) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / p_char(0))
    assertEquals(p_int(1), p_byte(1) / p_char(1))
    assertEquals(p_int(0), p_byte(1) / p_char(23))
    assertEquals(p_int(0), p_byte(1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / p_char(0))
    assertEquals(p_int(-1), p_byte(-1) / p_char(1))
    assertEquals(p_int(0), p_byte(-1) / p_char(23))
    assertEquals(p_int(0), p_byte(-1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / p_char(0))
    assertEquals(b_int(23), b_byte(23) / p_char(1))
    assertEquals(b_int(1), b_byte(23) / p_char(23))
    assertEquals(b_int(0), b_byte(23) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / p_char(0))
    assertEquals(b_int(-32), b_byte(-32) / p_char(1))
    assertEquals(b_int(-1), b_byte(-32) / p_char(23))
    assertEquals(b_int(0), b_byte(-32) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / p_char(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / p_char(1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / p_char(23))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / p_char(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / p_char(1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / p_char(23))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / p_char(0)))
  }

  function testByteCharacterDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / b_char(0))
    assertEquals(b_int(0), b_byte(0) / b_char(1))
    assertEquals(b_int(0), b_byte(0) / b_char(23))
    assertEquals(b_int(0), b_byte(0) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / b_char(0))
    assertEquals(b_int(1), p_byte(1) / b_char(1))
    assertEquals(b_int(0), p_byte(1) / b_char(23))
    assertEquals(b_int(0), p_byte(1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / b_char(0))
    assertEquals(b_int(-1), p_byte(-1) / b_char(1))
    assertEquals(b_int(0), p_byte(-1) / b_char(23))
    assertEquals(b_int(0), p_byte(-1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / b_char(0))
    assertEquals(b_int(23), b_byte(23) / b_char(1))
    assertEquals(b_int(1), b_byte(23) / b_char(23))
    assertEquals(b_int(0), b_byte(23) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / b_char(0))
    assertEquals(b_int(-32), b_byte(-32) / b_char(1))
    assertEquals(b_int(-1), b_byte(-32) / b_char(23))
    assertEquals(b_int(0), b_byte(-32) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / b_char(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / b_char(1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / b_char(23))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / b_char(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / b_char(1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / b_char(23))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / b_char(0)))
  }

  function testBytePIntDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / p_int(0))
    assertEquals(b_int(0), b_byte(0) / p_int(1))
    assertEquals(b_int(0), b_byte(0) / p_int(-1))
    assertEquals(b_int(0), b_byte(0) / p_int(23))
    assertEquals(b_int(0), b_byte(0) / p_int(-32))
    assertEquals(b_int(0), b_byte(0) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(0) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / p_int(0))
    assertEquals(p_int(1), p_byte(1) / p_int(1))
    assertEquals(p_int(-1), p_byte(1) / p_int(-1))
    assertEquals(p_int(0), p_byte(1) / p_int(23))
    assertEquals(p_int(0), p_byte(1) / p_int(-32))
    assertEquals(p_int(0), p_byte(1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_byte(1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / p_int(0))
    assertEquals(p_int(-1), p_byte(-1) / p_int(1))
    assertEquals(p_int(1), p_byte(-1) / p_int(-1))
    assertEquals(p_int(0), p_byte(-1) / p_int(23))
    assertEquals(p_int(0), p_byte(-1) / p_int(-32))
    assertEquals(p_int(0), p_byte(-1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_byte(-1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / p_int(0))
    assertEquals(b_int(23), b_byte(23) / p_int(1))
    assertEquals(b_int(-23), b_byte(23) / p_int(-1))
    assertEquals(b_int(1), b_byte(23) / p_int(23))
    assertEquals(b_int(0), b_byte(23) / p_int(-32))
    assertEquals(b_int(0), b_byte(23) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(23) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / p_int(0))
    assertEquals(b_int(-32), b_byte(-32) / p_int(1))
    assertEquals(b_int(32), b_byte(-32) / p_int(-1))
    assertEquals(b_int(-1), b_byte(-32) / p_int(23))
    assertEquals(b_int(1), b_byte(-32) / p_int(-32))
    assertEquals(b_int(0), b_byte(-32) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(-32) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / p_int(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / p_int(1))
    assertEquals(b_int(-127), b_byte(Byte.MAX_VALUE) / p_int(-1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / p_int(23))
    assertEquals(b_int(-3), b_byte(Byte.MAX_VALUE) / p_int(-32))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / p_int(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / p_int(1))
    assertEquals(b_int(128), b_byte(Byte.MIN_VALUE) / p_int(-1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / p_int(23))
    assertEquals(b_int(4), b_byte(Byte.MIN_VALUE) / p_int(-32))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / p_int(0)))
  }

  function testByteIntegerDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / b_int(0))
    assertEquals(b_int(0), b_byte(0) / b_int(1))
    assertEquals(b_int(0), b_byte(0) / b_int(-1))
    assertEquals(b_int(0), b_byte(0) / b_int(23))
    assertEquals(b_int(0), b_byte(0) / b_int(-32))
    assertEquals(b_int(0), b_byte(0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(0) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / b_int(0))
    assertEquals(b_int(1), p_byte(1) / b_int(1))
    assertEquals(b_int(-1), p_byte(1) / b_int(-1))
    assertEquals(b_int(0), p_byte(1) / b_int(23))
    assertEquals(b_int(0), p_byte(1) / b_int(-32))
    assertEquals(b_int(0), p_byte(1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_byte(1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / b_int(0))
    assertEquals(b_int(-1), p_byte(-1) / b_int(1))
    assertEquals(b_int(1), p_byte(-1) / b_int(-1))
    assertEquals(b_int(0), p_byte(-1) / b_int(23))
    assertEquals(b_int(0), p_byte(-1) / b_int(-32))
    assertEquals(b_int(0), p_byte(-1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_byte(-1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / b_int(0))
    assertEquals(b_int(23), b_byte(23) / b_int(1))
    assertEquals(b_int(-23), b_byte(23) / b_int(-1))
    assertEquals(b_int(1), b_byte(23) / b_int(23))
    assertEquals(b_int(0), b_byte(23) / b_int(-32))
    assertEquals(b_int(0), b_byte(23) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(23) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / b_int(0))
    assertEquals(b_int(-32), b_byte(-32) / b_int(1))
    assertEquals(b_int(32), b_byte(-32) / b_int(-1))
    assertEquals(b_int(-1), b_byte(-32) / b_int(23))
    assertEquals(b_int(1), b_byte(-32) / b_int(-32))
    assertEquals(b_int(0), b_byte(-32) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(-32) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / b_int(0))
    assertEquals(b_int(127), b_byte(Byte.MAX_VALUE) / b_int(1))
    assertEquals(b_int(-127), b_byte(Byte.MAX_VALUE) / b_int(-1))
    assertEquals(b_int(5), b_byte(Byte.MAX_VALUE) / b_int(23))
    assertEquals(b_int(-3), b_byte(Byte.MAX_VALUE) / b_int(-32))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / b_int(0))
    assertEquals(b_int(-128), b_byte(Byte.MIN_VALUE) / b_int(1))
    assertEquals(b_int(128), b_byte(Byte.MIN_VALUE) / b_int(-1))
    assertEquals(b_int(-5), b_byte(Byte.MIN_VALUE) / b_int(23))
    assertEquals(b_int(4), b_byte(Byte.MIN_VALUE) / b_int(-32))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_byte(Byte.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_byte(0) / b_int(0)))
  }

  function testBytePLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / p_long(0))
    assertEquals(b_long(0), b_byte(0) / p_long(1))
    assertEquals(b_long(0), b_byte(0) / p_long(-1))
    assertEquals(b_long(0), b_byte(0) / p_long(23))
    assertEquals(b_long(0), b_byte(0) / p_long(-32))
    assertEquals(b_long(0), b_byte(0) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(0) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / p_long(0))
    assertEquals(p_long(1), p_byte(1) / p_long(1))
    assertEquals(p_long(-1), p_byte(1) / p_long(-1))
    assertEquals(p_long(0), p_byte(1) / p_long(23))
    assertEquals(p_long(0), p_byte(1) / p_long(-32))
    assertEquals(p_long(0), p_byte(1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_byte(1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / p_long(0))
    assertEquals(p_long(-1), p_byte(-1) / p_long(1))
    assertEquals(p_long(1), p_byte(-1) / p_long(-1))
    assertEquals(p_long(0), p_byte(-1) / p_long(23))
    assertEquals(p_long(0), p_byte(-1) / p_long(-32))
    assertEquals(p_long(0), p_byte(-1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_byte(-1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / p_long(0))
    assertEquals(b_long(23), b_byte(23) / p_long(1))
    assertEquals(b_long(-23), b_byte(23) / p_long(-1))
    assertEquals(b_long(1), b_byte(23) / p_long(23))
    assertEquals(b_long(0), b_byte(23) / p_long(-32))
    assertEquals(b_long(0), b_byte(23) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(23) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / p_long(0))
    assertEquals(b_long(-32), b_byte(-32) / p_long(1))
    assertEquals(b_long(32), b_byte(-32) / p_long(-1))
    assertEquals(b_long(-1), b_byte(-32) / p_long(23))
    assertEquals(b_long(1), b_byte(-32) / p_long(-32))
    assertEquals(b_long(0), b_byte(-32) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(-32) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / p_long(0))
    assertEquals(b_long(127), b_byte(Byte.MAX_VALUE) / p_long(1))
    assertEquals(b_long(-127), b_byte(Byte.MAX_VALUE) / p_long(-1))
    assertEquals(b_long(5), b_byte(Byte.MAX_VALUE) / p_long(23))
    assertEquals(b_long(-3), b_byte(Byte.MAX_VALUE) / p_long(-32))
    assertEquals(b_long(0), b_byte(Byte.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(Byte.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / p_long(0))
    assertEquals(b_long(-128), b_byte(Byte.MIN_VALUE) / p_long(1))
    assertEquals(b_long(128), b_byte(Byte.MIN_VALUE) / p_long(-1))
    assertEquals(b_long(-5), b_byte(Byte.MIN_VALUE) / p_long(23))
    assertEquals(b_long(4), b_byte(Byte.MIN_VALUE) / p_long(-32))
    assertEquals(b_long(0), b_byte(Byte.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(Byte.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_byte(0) / p_long(0)))
  }

  function testByteLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> b_byte(0) / b_long(0))
    assertEquals(b_long(0), b_byte(0) / b_long(1))
    assertEquals(b_long(0), b_byte(0) / b_long(-1))
    assertEquals(b_long(0), b_byte(0) / b_long(23))
    assertEquals(b_long(0), b_byte(0) / b_long(-32))
    assertEquals(b_long(0), b_byte(0) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(0) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(1) / b_long(0))
    assertEquals(b_long(1), p_byte(1) / b_long(1))
    assertEquals(b_long(-1), p_byte(1) / b_long(-1))
    assertEquals(b_long(0), p_byte(1) / b_long(23))
    assertEquals(b_long(0), p_byte(1) / b_long(-32))
    assertEquals(b_long(0), p_byte(1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_byte(1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_byte(-1) / b_long(0))
    assertEquals(b_long(-1), p_byte(-1) / b_long(1))
    assertEquals(b_long(1), p_byte(-1) / b_long(-1))
    assertEquals(b_long(0), p_byte(-1) / b_long(23))
    assertEquals(b_long(0), p_byte(-1) / b_long(-32))
    assertEquals(b_long(0), p_byte(-1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_byte(-1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(23) / b_long(0))
    assertEquals(b_long(23), b_byte(23) / b_long(1))
    assertEquals(b_long(-23), b_byte(23) / b_long(-1))
    assertEquals(b_long(1), b_byte(23) / b_long(23))
    assertEquals(b_long(0), b_byte(23) / b_long(-32))
    assertEquals(b_long(0), b_byte(23) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(23) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(-32) / b_long(0))
    assertEquals(b_long(-32), b_byte(-32) / b_long(1))
    assertEquals(b_long(32), b_byte(-32) / b_long(-1))
    assertEquals(b_long(-1), b_byte(-32) / b_long(23))
    assertEquals(b_long(1), b_byte(-32) / b_long(-32))
    assertEquals(b_long(0), b_byte(-32) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(-32) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MAX_VALUE) / b_long(0))
    assertEquals(b_long(127), b_byte(Byte.MAX_VALUE) / b_long(1))
    assertEquals(b_long(-127), b_byte(Byte.MAX_VALUE) / b_long(-1))
    assertEquals(b_long(5), b_byte(Byte.MAX_VALUE) / b_long(23))
    assertEquals(b_long(-3), b_byte(Byte.MAX_VALUE) / b_long(-32))
    assertEquals(b_long(0), b_byte(Byte.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(Byte.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_byte(Byte.MIN_VALUE) / b_long(0))
    assertEquals(b_long(-128), b_byte(Byte.MIN_VALUE) / b_long(1))
    assertEquals(b_long(128), b_byte(Byte.MIN_VALUE) / b_long(-1))
    assertEquals(b_long(-5), b_byte(Byte.MIN_VALUE) / b_long(23))
    assertEquals(b_long(4), b_byte(Byte.MIN_VALUE) / b_long(-32))
    assertEquals(b_long(0), b_byte(Byte.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_byte(Byte.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_byte(0) / b_long(0)))
  }

  function testBytePFloatDivision() {
    assertEquals(b_float(Float.NaN_), b_byte(0) / p_float(0.0))
    assertEquals(b_float(0.0), b_byte(0) / p_float(1.0))
    assertEquals(b_float(-0.0), b_byte(0) / p_float(-1.0))
    assertEquals(b_float(0.0), b_byte(0) / p_float(23.0))
    assertEquals(b_float(0.0), b_byte(0) / p_float(23.123))
    assertEquals(b_float(-0.0), b_byte(0) / p_float(-32.0))
    assertEquals(b_float(-0.0), b_byte(0) / p_float(-32.456))
    assertEquals(b_float(0.0), b_byte(0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_byte(0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(0) / p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_byte(0) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_byte(0) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(1) / p_float(0.0))
    assertEquals(p_float(1.0), p_byte(1) / p_float(1.0))
    assertEquals(p_float(-1.0), p_byte(1) / p_float(-1.0))
    assertEquals(p_float(0.04347826), p_byte(1) / p_float(23.0))
    assertEquals(p_float(0.043246984), p_byte(1) / p_float(23.123))
    assertEquals(p_float(-0.03125), p_byte(1) / p_float(-32.0))
    assertEquals(p_float(-0.030810943), p_byte(1) / p_float(-32.456))
    assertEquals(p_float(0.0), p_byte(1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_byte(1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("2.938736E-39")), p_byte(1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_byte(1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(-1) / p_float(0.0))
    assertEquals(p_float(-1.0), p_byte(-1) / p_float(1.0))
    assertEquals(p_float(1.0), p_byte(-1) / p_float(-1.0))
    assertEquals(p_float(-0.04347826), p_byte(-1) / p_float(23.0))
    assertEquals(p_float(-0.043246984), p_byte(-1) / p_float(23.123))
    assertEquals(p_float(0.03125), p_byte(-1) / p_float(-32.0))
    assertEquals(p_float(0.030810943), p_byte(-1) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_byte(-1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_byte(-1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_byte(-1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-2.938736E-39")), p_byte(-1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_byte(-1) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(23) / p_float(0.0))
    assertEquals(b_float(23.0), b_byte(23) / p_float(1.0))
    assertEquals(b_float(-23.0), b_byte(23) / p_float(-1.0))
    assertEquals(b_float(1.0), b_byte(23) / p_float(23.0))
    assertEquals(b_float(0.99468064), b_byte(23) / p_float(23.123))
    assertEquals(b_float(-0.71875), b_byte(23) / p_float(-32.0))
    assertEquals(b_float(-0.70865166), b_byte(23) / p_float(-32.456))
    assertEquals(b_float(0.0), b_byte(23) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_byte(23) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(23) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), b_byte(23) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(23) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(-32) / p_float(0.0))
    assertEquals(b_float(-32.0), b_byte(-32) / p_float(1.0))
    assertEquals(b_float(32.0), b_byte(-32) / p_float(-1.0))
    assertEquals(b_float(-1.3913044), b_byte(-32) / p_float(23.0))
    assertEquals(b_float(-1.3839035), b_byte(-32) / p_float(23.123))
    assertEquals(b_float(1.0), b_byte(-32) / p_float(-32.0))
    assertEquals(b_float(0.9859502), b_byte(-32) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_byte(-32) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_byte(-32) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(-32) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), b_byte(-32) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(-32) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / p_float(0.0))
    assertEquals(b_float(127.0), b_byte(Byte.MAX_VALUE) / p_float(1.0))
    assertEquals(b_float(-127.0), b_byte(Byte.MAX_VALUE) / p_float(-1.0))
    assertEquals(b_float(5.521739), b_byte(Byte.MAX_VALUE) / p_float(23.0))
    assertEquals(b_float(5.4923673), b_byte(Byte.MAX_VALUE) / p_float(23.123))
    assertEquals(b_float(-3.96875), b_byte(Byte.MAX_VALUE) / p_float(-32.0))
    assertEquals(b_float(-3.9129899), b_byte(Byte.MAX_VALUE) / p_float(-32.456))
    assertEquals(b_float(0.0), b_byte(Byte.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_byte(Byte.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(Byte.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.7321948E-37")), b_byte(Byte.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / p_float(0.0))
    assertEquals(b_float(-128.0), b_byte(Byte.MIN_VALUE) / p_float(1.0))
    assertEquals(b_float(128.0), b_byte(Byte.MIN_VALUE) / p_float(-1.0))
    assertEquals(b_float(-5.5652175), b_byte(Byte.MIN_VALUE) / p_float(23.0))
    assertEquals(b_float(-5.535614), b_byte(Byte.MIN_VALUE) / p_float(23.123))
    assertEquals(b_float(4.0), b_byte(Byte.MIN_VALUE) / p_float(-32.0))
    assertEquals(b_float(3.9438007), b_byte(Byte.MIN_VALUE) / p_float(-32.456))
    assertEquals(b_float(-0.0), b_byte(Byte.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_byte(Byte.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(Byte.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.7615824E-37")), b_byte(Byte.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_byte(0) / p_float(0.0)))
  }

  function testByteFloatDivision() {
    assertEquals(b_float(Float.NaN_), b_byte(0) / b_float(0.0))
    assertEquals(b_float(0.0), b_byte(0) / b_float(1.0))
    assertEquals(b_float(-0.0), b_byte(0) / b_float(-1.0))
    assertEquals(b_float(0.0), b_byte(0) / b_float(23.0))
    assertEquals(b_float(0.0), b_byte(0) / b_float(23.123))
    assertEquals(b_float(-0.0), b_byte(0) / b_float(-32.0))
    assertEquals(b_float(-0.0), b_byte(0) / b_float(-32.456))
    assertEquals(b_float(0.0), b_byte(0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_byte(0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(0) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_byte(0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_byte(0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(1) / b_float(0.0))
    assertEquals(b_float(1.0), p_byte(1) / b_float(1.0))
    assertEquals(b_float(-1.0), p_byte(1) / b_float(-1.0))
    assertEquals(b_float(0.04347826), p_byte(1) / b_float(23.0))
    assertEquals(b_float(0.043246984), p_byte(1) / b_float(23.123))
    assertEquals(b_float(-0.03125), p_byte(1) / b_float(-32.0))
    assertEquals(b_float(-0.030810943), p_byte(1) / b_float(-32.456))
    assertEquals(b_float(0.0), p_byte(1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_byte(1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), p_byte(1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_byte(1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(-1) / b_float(0.0))
    assertEquals(b_float(-1.0), p_byte(-1) / b_float(1.0))
    assertEquals(b_float(1.0), p_byte(-1) / b_float(-1.0))
    assertEquals(b_float(-0.04347826), p_byte(-1) / b_float(23.0))
    assertEquals(b_float(-0.043246984), p_byte(-1) / b_float(23.123))
    assertEquals(b_float(0.03125), p_byte(-1) / b_float(-32.0))
    assertEquals(b_float(0.030810943), p_byte(-1) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_byte(-1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_byte(-1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_byte(-1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), p_byte(-1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_byte(-1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(23) / b_float(0.0))
    assertEquals(b_float(23.0), b_byte(23) / b_float(1.0))
    assertEquals(b_float(-23.0), b_byte(23) / b_float(-1.0))
    assertEquals(b_float(1.0), b_byte(23) / b_float(23.0))
    assertEquals(b_float(0.99468064), b_byte(23) / b_float(23.123))
    assertEquals(b_float(-0.71875), b_byte(23) / b_float(-32.0))
    assertEquals(b_float(-0.70865166), b_byte(23) / b_float(-32.456))
    assertEquals(b_float(0.0), b_byte(23) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_byte(23) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(23) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), b_byte(23) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(23) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(-32) / b_float(0.0))
    assertEquals(b_float(-32.0), b_byte(-32) / b_float(1.0))
    assertEquals(b_float(32.0), b_byte(-32) / b_float(-1.0))
    assertEquals(b_float(-1.3913044), b_byte(-32) / b_float(23.0))
    assertEquals(b_float(-1.3839035), b_byte(-32) / b_float(23.123))
    assertEquals(b_float(1.0), b_byte(-32) / b_float(-32.0))
    assertEquals(b_float(0.9859502), b_byte(-32) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_byte(-32) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_byte(-32) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(-32) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), b_byte(-32) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(-32) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / b_float(0.0))
    assertEquals(b_float(127.0), b_byte(Byte.MAX_VALUE) / b_float(1.0))
    assertEquals(b_float(-127.0), b_byte(Byte.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_float(5.521739), b_byte(Byte.MAX_VALUE) / b_float(23.0))
    assertEquals(b_float(5.4923673), b_byte(Byte.MAX_VALUE) / b_float(23.123))
    assertEquals(b_float(-3.96875), b_byte(Byte.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_float(-3.9129899), b_byte(Byte.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), b_byte(Byte.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), b_byte(Byte.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(Byte.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("3.7321948E-37")), b_byte(Byte.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / b_float(0.0))
    assertEquals(b_float(-128.0), b_byte(Byte.MIN_VALUE) / b_float(1.0))
    assertEquals(b_float(128.0), b_byte(Byte.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_float(-5.5652175), b_byte(Byte.MIN_VALUE) / b_float(23.0))
    assertEquals(b_float(-5.535614), b_byte(Byte.MIN_VALUE) / b_float(23.123))
    assertEquals(b_float(4.0), b_byte(Byte.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_float(3.9438007), b_byte(Byte.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_float(-0.0), b_byte(Byte.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_byte(Byte.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_byte(Byte.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-3.7615824E-37")), b_byte(Byte.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_byte(0) / b_float(0.0)))
  }

  function testBytePDoubleDivision() {
    assertEquals(b_double(Double.NaN_), b_byte(0) / p_double(0.0))
    assertEquals(b_double(0.0), b_byte(0) / p_double(1.0))
    assertEquals(b_double(-0.0), b_byte(0) / p_double(-1.0))
    assertEquals(b_double(0.0), b_byte(0) / p_double(23.0))
    assertEquals(b_double(0.0), b_byte(0) / p_double(23.123))
    assertEquals(b_double(-0.0), b_byte(0) / p_double(-32.0))
    assertEquals(b_double(-0.0), b_byte(0) / p_double(-32.456))
    assertEquals(b_double(0.0), b_byte(0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_byte(0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(0) / p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_byte(0) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_byte(0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(1) / p_double(0.0))
    assertEquals(p_double(1.0), p_byte(1) / p_double(1.0))
    assertEquals(p_double(-1.0), p_byte(1) / p_double(-1.0))
    assertEquals(p_double(0.043478260869565216), p_byte(1) / p_double(23.0))
    assertEquals(p_double(0.043246983522899275), p_byte(1) / p_double(23.123))
    assertEquals(p_double(-0.03125), p_byte(1) / p_double(-32.0))
    assertEquals(p_double(-0.03081094404732561), p_byte(1) / p_double(-32.456))
    assertEquals(p_double(0.0), p_byte(1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_byte(1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("5.562684646268003E-309")), p_byte(1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_byte(1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(-1) / p_double(0.0))
    assertEquals(p_double(-1.0), p_byte(-1) / p_double(1.0))
    assertEquals(p_double(1.0), p_byte(-1) / p_double(-1.0))
    assertEquals(p_double(-0.043478260869565216), p_byte(-1) / p_double(23.0))
    assertEquals(p_double(-0.043246983522899275), p_byte(-1) / p_double(23.123))
    assertEquals(p_double(0.03125), p_byte(-1) / p_double(-32.0))
    assertEquals(p_double(0.03081094404732561), p_byte(-1) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_byte(-1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_byte(-1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_byte(-1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-5.562684646268003E-309")), p_byte(-1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_byte(-1) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(23) / p_double(0.0))
    assertEquals(b_double(23.0), b_byte(23) / p_double(1.0))
    assertEquals(b_double(-23.0), b_byte(23) / p_double(-1.0))
    assertEquals(b_double(1.0), b_byte(23) / p_double(23.0))
    assertEquals(b_double(0.9946806210266833), b_byte(23) / p_double(23.123))
    assertEquals(b_double(-0.71875), b_byte(23) / p_double(-32.0))
    assertEquals(b_double(-0.708651713088489), b_byte(23) / p_double(-32.456))
    assertEquals(b_double(0.0), b_byte(23) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_byte(23) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(23) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), b_byte(23) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(23) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(-32) / p_double(0.0))
    assertEquals(b_double(-32.0), b_byte(-32) / p_double(1.0))
    assertEquals(b_double(32.0), b_byte(-32) / p_double(-1.0))
    assertEquals(b_double(-1.391304347826087), b_byte(-32) / p_double(23.0))
    assertEquals(b_double(-1.3839034727327768), b_byte(-32) / p_double(23.123))
    assertEquals(b_double(1.0), b_byte(-32) / p_double(-32.0))
    assertEquals(b_double(0.9859502095144195), b_byte(-32) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_byte(-32) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_byte(-32) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(-32) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), b_byte(-32) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(-32) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / p_double(0.0))
    assertEquals(b_double(127.0), b_byte(Byte.MAX_VALUE) / p_double(1.0))
    assertEquals(b_double(-127.0), b_byte(Byte.MAX_VALUE) / p_double(-1.0))
    assertEquals(b_double(5.521739130434782), b_byte(Byte.MAX_VALUE) / p_double(23.0))
    assertEquals(b_double(5.492366907408208), b_byte(Byte.MAX_VALUE) / p_double(23.123))
    assertEquals(b_double(-3.96875), b_byte(Byte.MAX_VALUE) / p_double(-32.0))
    assertEquals(b_double(-3.912989894010352), b_byte(Byte.MAX_VALUE) / p_double(-32.456))
    assertEquals(b_double(0.0), b_byte(Byte.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_byte(Byte.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(Byte.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("7.064609500760365E-307")), b_byte(Byte.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / p_double(0.0))
    assertEquals(b_double(-128.0), b_byte(Byte.MIN_VALUE) / p_double(1.0))
    assertEquals(b_double(128.0), b_byte(Byte.MIN_VALUE) / p_double(-1.0))
    assertEquals(b_double(-5.565217391304348), b_byte(Byte.MIN_VALUE) / p_double(23.0))
    assertEquals(b_double(-5.535613890931107), b_byte(Byte.MIN_VALUE) / p_double(23.123))
    assertEquals(b_double(4.0), b_byte(Byte.MIN_VALUE) / p_double(-32.0))
    assertEquals(b_double(3.943800838057678), b_byte(Byte.MIN_VALUE) / p_double(-32.456))
    assertEquals(b_double(-0.0), b_byte(Byte.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_byte(Byte.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(Byte.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-7.120236347223046E-307")), b_byte(Byte.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_byte(0) / p_double(0.0)))
  }

  function testByteDoubleDivision() {
    assertEquals(b_double(Double.NaN_), b_byte(0) / b_double(0.0))
    assertEquals(b_double(0.0), b_byte(0) / b_double(1.0))
    assertEquals(b_double(-0.0), b_byte(0) / b_double(-1.0))
    assertEquals(b_double(0.0), b_byte(0) / b_double(23.0))
    assertEquals(b_double(0.0), b_byte(0) / b_double(23.123))
    assertEquals(b_double(-0.0), b_byte(0) / b_double(-32.0))
    assertEquals(b_double(-0.0), b_byte(0) / b_double(-32.456))
    assertEquals(b_double(0.0), b_byte(0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_byte(0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_byte(0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_byte(0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(1) / b_double(0.0))
    assertEquals(b_double(1.0), p_byte(1) / b_double(1.0))
    assertEquals(b_double(-1.0), p_byte(1) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), p_byte(1) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), p_byte(1) / b_double(23.123))
    assertEquals(b_double(-0.03125), p_byte(1) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), p_byte(1) / b_double(-32.456))
    assertEquals(b_double(0.0), p_byte(1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_byte(1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), p_byte(1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_byte(1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(-1) / b_double(0.0))
    assertEquals(b_double(-1.0), p_byte(-1) / b_double(1.0))
    assertEquals(b_double(1.0), p_byte(-1) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), p_byte(-1) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), p_byte(-1) / b_double(23.123))
    assertEquals(b_double(0.03125), p_byte(-1) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), p_byte(-1) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_byte(-1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_byte(-1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_byte(-1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), p_byte(-1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_byte(-1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(23) / b_double(0.0))
    assertEquals(b_double(23.0), b_byte(23) / b_double(1.0))
    assertEquals(b_double(-23.0), b_byte(23) / b_double(-1.0))
    assertEquals(b_double(1.0), b_byte(23) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), b_byte(23) / b_double(23.123))
    assertEquals(b_double(-0.71875), b_byte(23) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), b_byte(23) / b_double(-32.456))
    assertEquals(b_double(0.0), b_byte(23) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_byte(23) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(23) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), b_byte(23) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(23) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(-32) / b_double(0.0))
    assertEquals(b_double(-32.0), b_byte(-32) / b_double(1.0))
    assertEquals(b_double(32.0), b_byte(-32) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), b_byte(-32) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), b_byte(-32) / b_double(23.123))
    assertEquals(b_double(1.0), b_byte(-32) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), b_byte(-32) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_byte(-32) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_byte(-32) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(-32) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), b_byte(-32) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(-32) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(127.0), b_byte(Byte.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(-127.0), b_byte(Byte.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(5.521739130434782), b_byte(Byte.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(5.492366907408208), b_byte(Byte.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(-3.96875), b_byte(Byte.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(-3.912989894010352), b_byte(Byte.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), b_byte(Byte.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), b_byte(Byte.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(Byte.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("7.064609500760365E-307")), b_byte(Byte.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_byte(Byte.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(-128.0), b_byte(Byte.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(128.0), b_byte(Byte.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(-5.565217391304348), b_byte(Byte.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(-5.535613890931107), b_byte(Byte.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(4.0), b_byte(Byte.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(3.943800838057678), b_byte(Byte.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(-0.0), b_byte(Byte.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_byte(Byte.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_byte(Byte.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-7.120236347223046E-307")), b_byte(Byte.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_byte(Byte.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_byte(0) / b_double(0.0)))
  }

  function testByteBigIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_byte(0) / big_int("0"))
    assertEquals(big_int("0"), b_byte(0) / big_int("1"))
    assertEquals(big_int("0"), b_byte(0) / big_int("-1"))
    assertEquals(big_int("0"), b_byte(0) / big_int("23"))
    assertEquals(big_int("0"), b_byte(0) / big_int("-32"))
    assertEquals(big_int("0"), b_byte(0) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_byte(0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_byte(1) / big_int("0"))
    assertEquals(big_int("1"), p_byte(1) / big_int("1"))
    assertEquals(big_int("-1"), p_byte(1) / big_int("-1"))
    assertEquals(big_int("0"), p_byte(1) / big_int("23"))
    assertEquals(big_int("0"), p_byte(1) / big_int("-32"))
    assertEquals(big_int("0"), p_byte(1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_byte(1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_byte(-1) / big_int("0"))
    assertEquals(big_int("-1"), p_byte(-1) / big_int("1"))
    assertEquals(big_int("1"), p_byte(-1) / big_int("-1"))
    assertEquals(big_int("0"), p_byte(-1) / big_int("23"))
    assertEquals(big_int("0"), p_byte(-1) / big_int("-32"))
    assertEquals(big_int("0"), p_byte(-1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_byte(-1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_byte(23) / big_int("0"))
    assertEquals(big_int("23"), b_byte(23) / big_int("1"))
    assertEquals(big_int("-23"), b_byte(23) / big_int("-1"))
    assertEquals(big_int("1"), b_byte(23) / big_int("23"))
    assertEquals(big_int("0"), b_byte(23) / big_int("-32"))
    assertEquals(big_int("0"), b_byte(23) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_byte(23) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_byte(-32) / big_int("0"))
    assertEquals(big_int("-32"), b_byte(-32) / big_int("1"))
    assertEquals(big_int("32"), b_byte(-32) / big_int("-1"))
    assertEquals(big_int("-1"), b_byte(-32) / big_int("23"))
    assertEquals(big_int("1"), b_byte(-32) / big_int("-32"))
    assertEquals(big_int("0"), b_byte(-32) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_byte(-32) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_byte(Byte.MAX_VALUE) / big_int("0"))
    assertEquals(big_int("127"), b_byte(Byte.MAX_VALUE) / big_int("1"))
    assertEquals(big_int("-127"), b_byte(Byte.MAX_VALUE) / big_int("-1"))
    assertEquals(big_int("5"), b_byte(Byte.MAX_VALUE) / big_int("23"))
    assertEquals(big_int("-3"), b_byte(Byte.MAX_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), b_byte(Byte.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_byte(Byte.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> b_byte(Byte.MIN_VALUE) / big_int("0"))
    assertEquals(big_int("-128"), b_byte(Byte.MIN_VALUE) / big_int("1"))
    assertEquals(big_int("128"), b_byte(Byte.MIN_VALUE) / big_int("-1"))
    assertEquals(big_int("-5"), b_byte(Byte.MIN_VALUE) / big_int("23"))
    assertEquals(big_int("4"), b_byte(Byte.MIN_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), b_byte(Byte.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), b_byte(Byte.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(b_byte(0) / big_int("0")))
  }

  function testByteBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> b_byte(0) / big_decimal("0"))
    assertEquals(big_decimal("0"), b_byte(0) / big_decimal("1"))
    assertEquals(big_decimal("0"), b_byte(0) / big_decimal("-1"))
    assertEquals(big_decimal("0"), b_byte(0) / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), b_byte(0) / big_decimal("23.123"))
    assertEquals(big_decimal("0"), b_byte(0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), b_byte(0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), b_byte(0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), b_byte(0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_byte(1) / big_decimal("0"))
    assertEquals(big_decimal("1"), p_byte(1) / big_decimal("1"))
    assertEquals(big_decimal("-1"), p_byte(1) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), p_byte(1) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), p_byte(1) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), p_byte(1) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), p_byte(1) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_byte(1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_byte(1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_byte(-1) / big_decimal("0"))
    assertEquals(big_decimal("-1"), p_byte(-1) / big_decimal("1"))
    assertEquals(big_decimal("1"), p_byte(-1) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), p_byte(-1) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), p_byte(-1) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), p_byte(-1) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), p_byte(-1) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_byte(-1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_byte(-1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_byte(23) / big_decimal("0"))
    assertEquals(big_decimal("23"), b_byte(23) / big_decimal("1"))
    assertEquals(big_decimal("-23"), b_byte(23) / big_decimal("-1"))
    assertEquals(big_decimal("1"), b_byte(23) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), b_byte(23) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), b_byte(23) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), b_byte(23) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), b_byte(23) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), b_byte(23) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_byte(-32) / big_decimal("0"))
    assertEquals(big_decimal("-32"), b_byte(-32) / big_decimal("1"))
    assertEquals(big_decimal("32"), b_byte(-32) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), b_byte(-32) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), b_byte(-32) / big_decimal("23.123"))
    assertEquals(big_decimal("1"), b_byte(-32) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), b_byte(-32) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), b_byte(-32) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), b_byte(-32) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_byte(Byte.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("127"), b_byte(Byte.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-127"), b_byte(Byte.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("5.521739130434782608695652173913043"), b_byte(Byte.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("5.492366907408208277472646282921766"), b_byte(Byte.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-3.96875"), b_byte(Byte.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-3.912989894010352477199901404979049"), b_byte(Byte.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.028700009258300084250530766679830E-27"), b_byte(Byte.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.028700009258300084250530766679830E-27"), b_byte(Byte.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_byte(Byte.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("-128"), b_byte(Byte.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("128"), b_byte(Byte.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("-5.565217391304347826086956521739130"), b_byte(Byte.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("-5.535613890931107555248021450503827"), b_byte(Byte.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("4"), b_byte(Byte.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("3.943800838057678087256593542026128"), b_byte(Byte.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("-1.036800009331200084913920772716679E-27"), b_byte(Byte.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.036800009331200084913920772716679E-27"), b_byte(Byte.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_byte(0) / big_decimal("0")))
  }

}

