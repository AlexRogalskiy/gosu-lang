package gw.spec.core.expressions.arithmetic.division
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Division_PShortTest extends ArithmeticTestBase {

  function testPShortPByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / p_byte(0))
    assertEquals(p_int(0), p_short(0) / p_byte(1))
    assertEquals(p_int(0), p_short(0) / p_byte(-1))
    assertEquals(p_int(0), p_short(0) / p_byte(23))
    assertEquals(p_int(0), p_short(0) / p_byte(-32))
    assertEquals(p_int(0), p_short(0) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / p_byte(0))
    assertEquals(p_int(1), p_short(1) / p_byte(1))
    assertEquals(p_int(-1), p_short(1) / p_byte(-1))
    assertEquals(p_int(0), p_short(1) / p_byte(23))
    assertEquals(p_int(0), p_short(1) / p_byte(-32))
    assertEquals(p_int(0), p_short(1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / p_byte(0))
    assertEquals(p_int(-1), p_short(-1) / p_byte(1))
    assertEquals(p_int(1), p_short(-1) / p_byte(-1))
    assertEquals(p_int(0), p_short(-1) / p_byte(23))
    assertEquals(p_int(0), p_short(-1) / p_byte(-32))
    assertEquals(p_int(0), p_short(-1) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(-1) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / p_byte(0))
    assertEquals(p_int(23), p_short(23) / p_byte(1))
    assertEquals(p_int(-23), p_short(23) / p_byte(-1))
    assertEquals(p_int(1), p_short(23) / p_byte(23))
    assertEquals(p_int(0), p_short(23) / p_byte(-32))
    assertEquals(p_int(0), p_short(23) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(23) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / p_byte(0))
    assertEquals(p_int(-32), p_short(-32) / p_byte(1))
    assertEquals(p_int(32), p_short(-32) / p_byte(-1))
    assertEquals(p_int(-1), p_short(-32) / p_byte(23))
    assertEquals(p_int(1), p_short(-32) / p_byte(-32))
    assertEquals(p_int(0), p_short(-32) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(-32) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / p_byte(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) / p_byte(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) / p_byte(-1))
    assertEquals(p_int(1424), p_short(Short.MAX_VALUE) / p_byte(23))
    assertEquals(p_int(-1023), p_short(Short.MAX_VALUE) / p_byte(-32))
    assertEquals(p_int(258), p_short(Short.MAX_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-255), p_short(Short.MAX_VALUE) / p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / p_byte(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) / p_byte(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) / p_byte(-1))
    assertEquals(p_int(-1424), p_short(Short.MIN_VALUE) / p_byte(23))
    assertEquals(p_int(1024), p_short(Short.MIN_VALUE) / p_byte(-32))
    assertEquals(p_int(-258), p_short(Short.MIN_VALUE) / p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(256), p_short(Short.MIN_VALUE) / p_byte(Byte.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) / p_byte(0)))
  }

  function testPShortByteDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / b_byte(0))
    assertEquals(p_int(0), p_short(0) / p_byte(1))
    assertEquals(p_int(0), p_short(0) / p_byte(-1))
    assertEquals(b_int(0), p_short(0) / b_byte(23))
    assertEquals(b_int(0), p_short(0) / b_byte(-32))
    assertEquals(b_int(0), p_short(0) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / b_byte(0))
    assertEquals(p_int(1), p_short(1) / p_byte(1))
    assertEquals(p_int(-1), p_short(1) / p_byte(-1))
    assertEquals(b_int(0), p_short(1) / b_byte(23))
    assertEquals(b_int(0), p_short(1) / b_byte(-32))
    assertEquals(b_int(0), p_short(1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / b_byte(0))
    assertEquals(p_int(-1), p_short(-1) / p_byte(1))
    assertEquals(p_int(1), p_short(-1) / p_byte(-1))
    assertEquals(b_int(0), p_short(-1) / b_byte(23))
    assertEquals(b_int(0), p_short(-1) / b_byte(-32))
    assertEquals(b_int(0), p_short(-1) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(-1) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / b_byte(0))
    assertEquals(p_int(23), p_short(23) / p_byte(1))
    assertEquals(p_int(-23), p_short(23) / p_byte(-1))
    assertEquals(b_int(1), p_short(23) / b_byte(23))
    assertEquals(b_int(0), p_short(23) / b_byte(-32))
    assertEquals(b_int(0), p_short(23) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(23) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / b_byte(0))
    assertEquals(p_int(-32), p_short(-32) / p_byte(1))
    assertEquals(p_int(32), p_short(-32) / p_byte(-1))
    assertEquals(b_int(-1), p_short(-32) / b_byte(23))
    assertEquals(b_int(1), p_short(-32) / b_byte(-32))
    assertEquals(b_int(0), p_short(-32) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(-32) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / b_byte(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) / p_byte(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) / p_byte(-1))
    assertEquals(b_int(1424), p_short(Short.MAX_VALUE) / b_byte(23))
    assertEquals(b_int(-1023), p_short(Short.MAX_VALUE) / b_byte(-32))
    assertEquals(b_int(258), p_short(Short.MAX_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-255), p_short(Short.MAX_VALUE) / b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / b_byte(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) / p_byte(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) / p_byte(-1))
    assertEquals(b_int(-1424), p_short(Short.MIN_VALUE) / b_byte(23))
    assertEquals(b_int(1024), p_short(Short.MIN_VALUE) / b_byte(-32))
    assertEquals(b_int(-258), p_short(Short.MIN_VALUE) / b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(256), p_short(Short.MIN_VALUE) / b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) / b_byte(0)))
  }

  function testPShortPShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / p_short(0))
    assertEquals(p_int(0), p_short(0) / p_short(1))
    assertEquals(p_int(0), p_short(0) / p_short(-1))
    assertEquals(p_int(0), p_short(0) / p_short(23))
    assertEquals(p_int(0), p_short(0) / p_short(-32))
    assertEquals(p_int(0), p_short(0) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / p_short(0))
    assertEquals(p_int(1), p_short(1) / p_short(1))
    assertEquals(p_int(-1), p_short(1) / p_short(-1))
    assertEquals(p_int(0), p_short(1) / p_short(23))
    assertEquals(p_int(0), p_short(1) / p_short(-32))
    assertEquals(p_int(0), p_short(1) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / p_short(0))
    assertEquals(p_int(-1), p_short(-1) / p_short(1))
    assertEquals(p_int(1), p_short(-1) / p_short(-1))
    assertEquals(p_int(0), p_short(-1) / p_short(23))
    assertEquals(p_int(0), p_short(-1) / p_short(-32))
    assertEquals(p_int(0), p_short(-1) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(-1) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / p_short(0))
    assertEquals(p_int(23), p_short(23) / p_short(1))
    assertEquals(p_int(-23), p_short(23) / p_short(-1))
    assertEquals(p_int(1), p_short(23) / p_short(23))
    assertEquals(p_int(0), p_short(23) / p_short(-32))
    assertEquals(p_int(0), p_short(23) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(23) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / p_short(0))
    assertEquals(p_int(-32), p_short(-32) / p_short(1))
    assertEquals(p_int(32), p_short(-32) / p_short(-1))
    assertEquals(p_int(-1), p_short(-32) / p_short(23))
    assertEquals(p_int(1), p_short(-32) / p_short(-32))
    assertEquals(p_int(0), p_short(-32) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(-32) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / p_short(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) / p_short(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) / p_short(-1))
    assertEquals(p_int(1424), p_short(Short.MAX_VALUE) / p_short(23))
    assertEquals(p_int(-1023), p_short(Short.MAX_VALUE) / p_short(-32))
    assertEquals(p_int(1), p_short(Short.MAX_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) / p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / p_short(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) / p_short(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) / p_short(-1))
    assertEquals(p_int(-1424), p_short(Short.MIN_VALUE) / p_short(23))
    assertEquals(p_int(1024), p_short(Short.MIN_VALUE) / p_short(-32))
    assertEquals(p_int(-1), p_short(Short.MIN_VALUE) / p_short(Short.MAX_VALUE))
    assertEquals(p_int(1), p_short(Short.MIN_VALUE) / p_short(Short.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) / p_short(0)))
  }

  function testPShortShortDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / b_short(0))
    assertEquals(b_int(0), p_short(0) / b_short(1))
    assertEquals(b_int(0), p_short(0) / b_short(-1))
    assertEquals(b_int(0), p_short(0) / b_short(23))
    assertEquals(b_int(0), p_short(0) / b_short(-32))
    assertEquals(b_int(0), p_short(0) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / b_short(0))
    assertEquals(b_int(1), p_short(1) / b_short(1))
    assertEquals(b_int(-1), p_short(1) / b_short(-1))
    assertEquals(b_int(0), p_short(1) / b_short(23))
    assertEquals(b_int(0), p_short(1) / b_short(-32))
    assertEquals(b_int(0), p_short(1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / b_short(0))
    assertEquals(b_int(-1), p_short(-1) / b_short(1))
    assertEquals(b_int(1), p_short(-1) / b_short(-1))
    assertEquals(b_int(0), p_short(-1) / b_short(23))
    assertEquals(b_int(0), p_short(-1) / b_short(-32))
    assertEquals(b_int(0), p_short(-1) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(-1) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / b_short(0))
    assertEquals(b_int(23), p_short(23) / b_short(1))
    assertEquals(b_int(-23), p_short(23) / b_short(-1))
    assertEquals(b_int(1), p_short(23) / b_short(23))
    assertEquals(b_int(0), p_short(23) / b_short(-32))
    assertEquals(b_int(0), p_short(23) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(23) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / b_short(0))
    assertEquals(b_int(-32), p_short(-32) / b_short(1))
    assertEquals(b_int(32), p_short(-32) / b_short(-1))
    assertEquals(b_int(-1), p_short(-32) / b_short(23))
    assertEquals(b_int(1), p_short(-32) / b_short(-32))
    assertEquals(b_int(0), p_short(-32) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(-32) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / b_short(0))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) / b_short(1))
    assertEquals(b_int(-32767), p_short(Short.MAX_VALUE) / b_short(-1))
    assertEquals(b_int(1424), p_short(Short.MAX_VALUE) / b_short(23))
    assertEquals(b_int(-1023), p_short(Short.MAX_VALUE) / b_short(-32))
    assertEquals(b_int(1), p_short(Short.MAX_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) / b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / b_short(0))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) / b_short(1))
    assertEquals(b_int(32768), p_short(Short.MIN_VALUE) / b_short(-1))
    assertEquals(b_int(-1424), p_short(Short.MIN_VALUE) / b_short(23))
    assertEquals(b_int(1024), p_short(Short.MIN_VALUE) / b_short(-32))
    assertEquals(b_int(-1), p_short(Short.MIN_VALUE) / b_short(Short.MAX_VALUE))
    assertEquals(b_int(1), p_short(Short.MIN_VALUE) / b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) / b_short(0)))
  }

  function testPShortPCharDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / p_char(0))
    assertEquals(p_int(0), p_short(0) / p_char(1))
    assertEquals(p_int(0), p_short(0) / p_char(23))
    assertEquals(p_int(0), p_short(0) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / p_char(0))
    assertEquals(p_int(1), p_short(1) / p_char(1))
    assertEquals(p_int(0), p_short(1) / p_char(23))
    assertEquals(p_int(0), p_short(1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / p_char(0))
    assertEquals(p_int(-1), p_short(-1) / p_char(1))
    assertEquals(p_int(0), p_short(-1) / p_char(23))
    assertEquals(p_int(0), p_short(-1) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / p_char(0))
    assertEquals(p_int(23), p_short(23) / p_char(1))
    assertEquals(p_int(1), p_short(23) / p_char(23))
    assertEquals(p_int(0), p_short(23) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / p_char(0))
    assertEquals(p_int(-32), p_short(-32) / p_char(1))
    assertEquals(p_int(-1), p_short(-32) / p_char(23))
    assertEquals(p_int(0), p_short(-32) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / p_char(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) / p_char(1))
    assertEquals(p_int(1424), p_short(Short.MAX_VALUE) / p_char(23))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) / p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / p_char(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) / p_char(1))
    assertEquals(p_int(-1424), p_short(Short.MIN_VALUE) / p_char(23))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) / p_char(Character.MAX_VALUE))

    assertEquals(int, statictypeof(p_short(0) / p_char(0)))
  }

  function testPShortCharacterDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / b_char(0))
    assertEquals(b_int(0), p_short(0) / b_char(1))
    assertEquals(b_int(0), p_short(0) / b_char(23))
    assertEquals(b_int(0), p_short(0) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / b_char(0))
    assertEquals(b_int(1), p_short(1) / b_char(1))
    assertEquals(b_int(0), p_short(1) / b_char(23))
    assertEquals(b_int(0), p_short(1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / b_char(0))
    assertEquals(b_int(-1), p_short(-1) / b_char(1))
    assertEquals(b_int(0), p_short(-1) / b_char(23))
    assertEquals(b_int(0), p_short(-1) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / b_char(0))
    assertEquals(b_int(23), p_short(23) / b_char(1))
    assertEquals(b_int(1), p_short(23) / b_char(23))
    assertEquals(b_int(0), p_short(23) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / b_char(0))
    assertEquals(b_int(-32), p_short(-32) / b_char(1))
    assertEquals(b_int(-1), p_short(-32) / b_char(23))
    assertEquals(b_int(0), p_short(-32) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / b_char(0))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) / b_char(1))
    assertEquals(b_int(1424), p_short(Short.MAX_VALUE) / b_char(23))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) / b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / b_char(0))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) / b_char(1))
    assertEquals(b_int(-1424), p_short(Short.MIN_VALUE) / b_char(23))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) / b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) / b_char(0)))
  }

  function testPShortPIntDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / p_int(0))
    assertEquals(p_int(0), p_short(0) / p_int(1))
    assertEquals(p_int(0), p_short(0) / p_int(-1))
    assertEquals(p_int(0), p_short(0) / p_int(23))
    assertEquals(p_int(0), p_short(0) / p_int(-32))
    assertEquals(p_int(0), p_short(0) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / p_int(0))
    assertEquals(p_int(1), p_short(1) / p_int(1))
    assertEquals(p_int(-1), p_short(1) / p_int(-1))
    assertEquals(p_int(0), p_short(1) / p_int(23))
    assertEquals(p_int(0), p_short(1) / p_int(-32))
    assertEquals(p_int(0), p_short(1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / p_int(0))
    assertEquals(p_int(-1), p_short(-1) / p_int(1))
    assertEquals(p_int(1), p_short(-1) / p_int(-1))
    assertEquals(p_int(0), p_short(-1) / p_int(23))
    assertEquals(p_int(0), p_short(-1) / p_int(-32))
    assertEquals(p_int(0), p_short(-1) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(-1) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / p_int(0))
    assertEquals(p_int(23), p_short(23) / p_int(1))
    assertEquals(p_int(-23), p_short(23) / p_int(-1))
    assertEquals(p_int(1), p_short(23) / p_int(23))
    assertEquals(p_int(0), p_short(23) / p_int(-32))
    assertEquals(p_int(0), p_short(23) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(23) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / p_int(0))
    assertEquals(p_int(-32), p_short(-32) / p_int(1))
    assertEquals(p_int(32), p_short(-32) / p_int(-1))
    assertEquals(p_int(-1), p_short(-32) / p_int(23))
    assertEquals(p_int(1), p_short(-32) / p_int(-32))
    assertEquals(p_int(0), p_short(-32) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(-32) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / p_int(0))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) / p_int(1))
    assertEquals(p_int(-32767), p_short(Short.MAX_VALUE) / p_int(-1))
    assertEquals(p_int(1424), p_short(Short.MAX_VALUE) / p_int(23))
    assertEquals(p_int(-1023), p_short(Short.MAX_VALUE) / p_int(-32))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) / p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / p_int(0))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) / p_int(1))
    assertEquals(p_int(32768), p_short(Short.MIN_VALUE) / p_int(-1))
    assertEquals(p_int(-1424), p_short(Short.MIN_VALUE) / p_int(23))
    assertEquals(p_int(1024), p_short(Short.MIN_VALUE) / p_int(-32))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) / p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) / p_int(Integer.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) / p_int(0)))
  }

  function testPShortIntegerDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / b_int(0))
    assertEquals(b_int(0), p_short(0) / b_int(1))
    assertEquals(b_int(0), p_short(0) / b_int(-1))
    assertEquals(b_int(0), p_short(0) / b_int(23))
    assertEquals(b_int(0), p_short(0) / b_int(-32))
    assertEquals(b_int(0), p_short(0) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / b_int(0))
    assertEquals(b_int(1), p_short(1) / b_int(1))
    assertEquals(b_int(-1), p_short(1) / b_int(-1))
    assertEquals(b_int(0), p_short(1) / b_int(23))
    assertEquals(b_int(0), p_short(1) / b_int(-32))
    assertEquals(b_int(0), p_short(1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / b_int(0))
    assertEquals(b_int(-1), p_short(-1) / b_int(1))
    assertEquals(b_int(1), p_short(-1) / b_int(-1))
    assertEquals(b_int(0), p_short(-1) / b_int(23))
    assertEquals(b_int(0), p_short(-1) / b_int(-32))
    assertEquals(b_int(0), p_short(-1) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(-1) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / b_int(0))
    assertEquals(b_int(23), p_short(23) / b_int(1))
    assertEquals(b_int(-23), p_short(23) / b_int(-1))
    assertEquals(b_int(1), p_short(23) / b_int(23))
    assertEquals(b_int(0), p_short(23) / b_int(-32))
    assertEquals(b_int(0), p_short(23) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(23) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / b_int(0))
    assertEquals(b_int(-32), p_short(-32) / b_int(1))
    assertEquals(b_int(32), p_short(-32) / b_int(-1))
    assertEquals(b_int(-1), p_short(-32) / b_int(23))
    assertEquals(b_int(1), p_short(-32) / b_int(-32))
    assertEquals(b_int(0), p_short(-32) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(-32) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / b_int(0))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) / b_int(1))
    assertEquals(b_int(-32767), p_short(Short.MAX_VALUE) / b_int(-1))
    assertEquals(b_int(1424), p_short(Short.MAX_VALUE) / b_int(23))
    assertEquals(b_int(-1023), p_short(Short.MAX_VALUE) / b_int(-32))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) / b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / b_int(0))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) / b_int(1))
    assertEquals(b_int(32768), p_short(Short.MIN_VALUE) / b_int(-1))
    assertEquals(b_int(-1424), p_short(Short.MIN_VALUE) / b_int(23))
    assertEquals(b_int(1024), p_short(Short.MIN_VALUE) / b_int(-32))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) / b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) / b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) / b_int(0)))
  }

  function testPShortPLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / p_long(0))
    assertEquals(p_long(0), p_short(0) / p_long(1))
    assertEquals(p_long(0), p_short(0) / p_long(-1))
    assertEquals(p_long(0), p_short(0) / p_long(23))
    assertEquals(p_long(0), p_short(0) / p_long(-32))
    assertEquals(p_long(0), p_short(0) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(0) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / p_long(0))
    assertEquals(p_long(1), p_short(1) / p_long(1))
    assertEquals(p_long(-1), p_short(1) / p_long(-1))
    assertEquals(p_long(0), p_short(1) / p_long(23))
    assertEquals(p_long(0), p_short(1) / p_long(-32))
    assertEquals(p_long(0), p_short(1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / p_long(0))
    assertEquals(p_long(-1), p_short(-1) / p_long(1))
    assertEquals(p_long(1), p_short(-1) / p_long(-1))
    assertEquals(p_long(0), p_short(-1) / p_long(23))
    assertEquals(p_long(0), p_short(-1) / p_long(-32))
    assertEquals(p_long(0), p_short(-1) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(-1) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / p_long(0))
    assertEquals(p_long(23), p_short(23) / p_long(1))
    assertEquals(p_long(-23), p_short(23) / p_long(-1))
    assertEquals(p_long(1), p_short(23) / p_long(23))
    assertEquals(p_long(0), p_short(23) / p_long(-32))
    assertEquals(p_long(0), p_short(23) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(23) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / p_long(0))
    assertEquals(p_long(-32), p_short(-32) / p_long(1))
    assertEquals(p_long(32), p_short(-32) / p_long(-1))
    assertEquals(p_long(-1), p_short(-32) / p_long(23))
    assertEquals(p_long(1), p_short(-32) / p_long(-32))
    assertEquals(p_long(0), p_short(-32) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(-32) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / p_long(0))
    assertEquals(p_long(32767), p_short(Short.MAX_VALUE) / p_long(1))
    assertEquals(p_long(-32767), p_short(Short.MAX_VALUE) / p_long(-1))
    assertEquals(p_long(1424), p_short(Short.MAX_VALUE) / p_long(23))
    assertEquals(p_long(-1023), p_short(Short.MAX_VALUE) / p_long(-32))
    assertEquals(p_long(0), p_short(Short.MAX_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(Short.MAX_VALUE) / p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / p_long(0))
    assertEquals(p_long(-32768), p_short(Short.MIN_VALUE) / p_long(1))
    assertEquals(p_long(32768), p_short(Short.MIN_VALUE) / p_long(-1))
    assertEquals(p_long(-1424), p_short(Short.MIN_VALUE) / p_long(23))
    assertEquals(p_long(1024), p_short(Short.MIN_VALUE) / p_long(-32))
    assertEquals(p_long(0), p_short(Short.MIN_VALUE) / p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(Short.MIN_VALUE) / p_long(Long.MIN_VALUE))

    assertEquals(long, statictypeof(p_short(0) / p_long(0)))
  }

  function testPShortLongDivision() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) / b_long(0))
    assertEquals(b_long(0), p_short(0) / b_long(1))
    assertEquals(b_long(0), p_short(0) / b_long(-1))
    assertEquals(b_long(0), p_short(0) / b_long(23))
    assertEquals(b_long(0), p_short(0) / b_long(-32))
    assertEquals(b_long(0), p_short(0) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(0) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) / b_long(0))
    assertEquals(b_long(1), p_short(1) / b_long(1))
    assertEquals(b_long(-1), p_short(1) / b_long(-1))
    assertEquals(b_long(0), p_short(1) / b_long(23))
    assertEquals(b_long(0), p_short(1) / b_long(-32))
    assertEquals(b_long(0), p_short(1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) / b_long(0))
    assertEquals(b_long(-1), p_short(-1) / b_long(1))
    assertEquals(b_long(1), p_short(-1) / b_long(-1))
    assertEquals(b_long(0), p_short(-1) / b_long(23))
    assertEquals(b_long(0), p_short(-1) / b_long(-32))
    assertEquals(b_long(0), p_short(-1) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(-1) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) / b_long(0))
    assertEquals(b_long(23), p_short(23) / b_long(1))
    assertEquals(b_long(-23), p_short(23) / b_long(-1))
    assertEquals(b_long(1), p_short(23) / b_long(23))
    assertEquals(b_long(0), p_short(23) / b_long(-32))
    assertEquals(b_long(0), p_short(23) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(23) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) / b_long(0))
    assertEquals(b_long(-32), p_short(-32) / b_long(1))
    assertEquals(b_long(32), p_short(-32) / b_long(-1))
    assertEquals(b_long(-1), p_short(-32) / b_long(23))
    assertEquals(b_long(1), p_short(-32) / b_long(-32))
    assertEquals(b_long(0), p_short(-32) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(-32) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) / b_long(0))
    assertEquals(b_long(32767), p_short(Short.MAX_VALUE) / b_long(1))
    assertEquals(b_long(-32767), p_short(Short.MAX_VALUE) / b_long(-1))
    assertEquals(b_long(1424), p_short(Short.MAX_VALUE) / b_long(23))
    assertEquals(b_long(-1023), p_short(Short.MAX_VALUE) / b_long(-32))
    assertEquals(b_long(0), p_short(Short.MAX_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(Short.MAX_VALUE) / b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) / b_long(0))
    assertEquals(b_long(-32768), p_short(Short.MIN_VALUE) / b_long(1))
    assertEquals(b_long(32768), p_short(Short.MIN_VALUE) / b_long(-1))
    assertEquals(b_long(-1424), p_short(Short.MIN_VALUE) / b_long(23))
    assertEquals(b_long(1024), p_short(Short.MIN_VALUE) / b_long(-32))
    assertEquals(b_long(0), p_short(Short.MIN_VALUE) / b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(Short.MIN_VALUE) / b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(p_short(0) / b_long(0)))
  }

  function testPShortPFloatDivision() {
    assertEquals(p_float(Float.NaN_), p_short(0) / p_float(0.0))
    assertEquals(p_float(0.0), p_short(0) / p_float(1.0))
    assertEquals(p_float(-0.0), p_short(0) / p_float(-1.0))
    assertEquals(p_float(0.0), p_short(0) / p_float(23.0))
    assertEquals(p_float(0.0), p_short(0) / p_float(23.123))
    assertEquals(p_float(-0.0), p_short(0) / p_float(-32.0))
    assertEquals(p_float(-0.0), p_short(0) / p_float(-32.456))
    assertEquals(p_float(0.0), p_short(0) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_short(0) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(0) / p_float(Float.NaN_))
    assertEquals(p_float(0.0), p_short(0) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_short(0) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(1) / p_float(0.0))
    assertEquals(p_float(1.0), p_short(1) / p_float(1.0))
    assertEquals(p_float(-1.0), p_short(1) / p_float(-1.0))
    assertEquals(p_float(0.04347826), p_short(1) / p_float(23.0))
    assertEquals(p_float(0.043246984), p_short(1) / p_float(23.123))
    assertEquals(p_float(-0.03125), p_short(1) / p_float(-32.0))
    assertEquals(p_float(-0.030810943), p_short(1) / p_float(-32.456))
    assertEquals(p_float(0.0), p_short(1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_short(1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("2.938736E-39")), p_short(1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-1) / p_float(0.0))
    assertEquals(p_float(-1.0), p_short(-1) / p_float(1.0))
    assertEquals(p_float(1.0), p_short(-1) / p_float(-1.0))
    assertEquals(p_float(-0.04347826), p_short(-1) / p_float(23.0))
    assertEquals(p_float(-0.043246984), p_short(-1) / p_float(23.123))
    assertEquals(p_float(0.03125), p_short(-1) / p_float(-32.0))
    assertEquals(p_float(0.030810943), p_short(-1) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_short(-1) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_short(-1) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(-1) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-2.938736E-39")), p_short(-1) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-1) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(23) / p_float(0.0))
    assertEquals(p_float(23.0), p_short(23) / p_float(1.0))
    assertEquals(p_float(-23.0), p_short(23) / p_float(-1.0))
    assertEquals(p_float(1.0), p_short(23) / p_float(23.0))
    assertEquals(p_float(0.99468064), p_short(23) / p_float(23.123))
    assertEquals(p_float(-0.71875), p_short(23) / p_float(-32.0))
    assertEquals(p_float(-0.70865166), p_short(23) / p_float(-32.456))
    assertEquals(p_float(0.0), p_short(23) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_short(23) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(23) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("6.759093E-38")), p_short(23) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(23) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-32) / p_float(0.0))
    assertEquals(p_float(-32.0), p_short(-32) / p_float(1.0))
    assertEquals(p_float(32.0), p_short(-32) / p_float(-1.0))
    assertEquals(p_float(-1.3913044), p_short(-32) / p_float(23.0))
    assertEquals(p_float(-1.3839035), p_short(-32) / p_float(23.123))
    assertEquals(p_float(1.0), p_short(-32) / p_float(-32.0))
    assertEquals(p_float(0.9859502), p_short(-32) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_short(-32) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_short(-32) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(-32) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-9.403956E-38")), p_short(-32) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(-32) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / p_float(0.0))
    assertEquals(p_float(32767.0), p_short(Short.MAX_VALUE) / p_float(1.0))
    assertEquals(p_float(-32767.0), p_short(Short.MAX_VALUE) / p_float(-1.0))
    assertEquals(p_float(1424.6522), p_short(Short.MAX_VALUE) / p_float(23.0))
    assertEquals(p_float(1417.074), p_short(Short.MAX_VALUE) / p_float(23.123))
    assertEquals(p_float(-1023.96875), p_short(Short.MAX_VALUE) / p_float(-32.0))
    assertEquals(p_float(-1009.58215), p_short(Short.MAX_VALUE) / p_float(-32.456))
    assertEquals(p_float(0.0), p_short(Short.MAX_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-0.0), p_short(Short.MAX_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(Short.MAX_VALUE) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("9.6293564E-35")), p_short(Short.MAX_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / p_float(0.0))
    assertEquals(p_float(-32768.0), p_short(Short.MIN_VALUE) / p_float(1.0))
    assertEquals(p_float(32768.0), p_short(Short.MIN_VALUE) / p_float(-1.0))
    assertEquals(p_float(-1424.6957), p_short(Short.MIN_VALUE) / p_float(23.0))
    assertEquals(p_float(-1417.1172), p_short(Short.MIN_VALUE) / p_float(23.123))
    assertEquals(p_float(1024.0), p_short(Short.MIN_VALUE) / p_float(-32.0))
    assertEquals(p_float(1009.613), p_short(Short.MIN_VALUE) / p_float(-32.456))
    assertEquals(p_float(-0.0), p_short(Short.MIN_VALUE) / p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_short(Short.MIN_VALUE) / p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(Short.MIN_VALUE) / p_float(Float.NaN_))
    assertEquals(p_float(Float.parseFloat("-9.629651E-35")), p_short(Short.MIN_VALUE) / p_float(Float.MAX_VALUE))
    assertEquals(p_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / p_float(Float.MIN_VALUE))

    assertEquals(float, statictypeof(p_short(0) / p_float(0.0)))
  }

  function testPShortFloatDivision() {
    assertEquals(b_float(Float.NaN_), p_short(0) / b_float(0.0))
    assertEquals(b_float(0.0), p_short(0) / b_float(1.0))
    assertEquals(b_float(-0.0), p_short(0) / b_float(-1.0))
    assertEquals(b_float(0.0), p_short(0) / b_float(23.0))
    assertEquals(b_float(0.0), p_short(0) / b_float(23.123))
    assertEquals(b_float(-0.0), p_short(0) / b_float(-32.0))
    assertEquals(b_float(-0.0), p_short(0) / b_float(-32.456))
    assertEquals(b_float(0.0), p_short(0) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_short(0) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(0) / b_float(Float.NaN_))
    assertEquals(b_float(0.0), p_short(0) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_short(0) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(1) / b_float(0.0))
    assertEquals(b_float(1.0), p_short(1) / b_float(1.0))
    assertEquals(b_float(-1.0), p_short(1) / b_float(-1.0))
    assertEquals(b_float(0.04347826), p_short(1) / b_float(23.0))
    assertEquals(b_float(0.043246984), p_short(1) / b_float(23.123))
    assertEquals(b_float(-0.03125), p_short(1) / b_float(-32.0))
    assertEquals(b_float(-0.030810943), p_short(1) / b_float(-32.456))
    assertEquals(b_float(0.0), p_short(1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_short(1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.938736E-39")), p_short(1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-1) / b_float(0.0))
    assertEquals(b_float(-1.0), p_short(-1) / b_float(1.0))
    assertEquals(b_float(1.0), p_short(-1) / b_float(-1.0))
    assertEquals(b_float(-0.04347826), p_short(-1) / b_float(23.0))
    assertEquals(b_float(-0.043246984), p_short(-1) / b_float(23.123))
    assertEquals(b_float(0.03125), p_short(-1) / b_float(-32.0))
    assertEquals(b_float(0.030810943), p_short(-1) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_short(-1) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_short(-1) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(-1) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.938736E-39")), p_short(-1) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-1) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(23) / b_float(0.0))
    assertEquals(b_float(23.0), p_short(23) / b_float(1.0))
    assertEquals(b_float(-23.0), p_short(23) / b_float(-1.0))
    assertEquals(b_float(1.0), p_short(23) / b_float(23.0))
    assertEquals(b_float(0.99468064), p_short(23) / b_float(23.123))
    assertEquals(b_float(-0.71875), p_short(23) / b_float(-32.0))
    assertEquals(b_float(-0.70865166), p_short(23) / b_float(-32.456))
    assertEquals(b_float(0.0), p_short(23) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_short(23) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(23) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("6.759093E-38")), p_short(23) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(23) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-32) / b_float(0.0))
    assertEquals(b_float(-32.0), p_short(-32) / b_float(1.0))
    assertEquals(b_float(32.0), p_short(-32) / b_float(-1.0))
    assertEquals(b_float(-1.3913044), p_short(-32) / b_float(23.0))
    assertEquals(b_float(-1.3839035), p_short(-32) / b_float(23.123))
    assertEquals(b_float(1.0), p_short(-32) / b_float(-32.0))
    assertEquals(b_float(0.9859502), p_short(-32) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_short(-32) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_short(-32) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(-32) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.403956E-38")), p_short(-32) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(-32) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / b_float(0.0))
    assertEquals(b_float(32767.0), p_short(Short.MAX_VALUE) / b_float(1.0))
    assertEquals(b_float(-32767.0), p_short(Short.MAX_VALUE) / b_float(-1.0))
    assertEquals(b_float(1424.6522), p_short(Short.MAX_VALUE) / b_float(23.0))
    assertEquals(b_float(1417.074), p_short(Short.MAX_VALUE) / b_float(23.123))
    assertEquals(b_float(-1023.96875), p_short(Short.MAX_VALUE) / b_float(-32.0))
    assertEquals(b_float(-1009.58215), p_short(Short.MAX_VALUE) / b_float(-32.456))
    assertEquals(b_float(0.0), p_short(Short.MAX_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-0.0), p_short(Short.MAX_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(Short.MAX_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("9.6293564E-35")), p_short(Short.MAX_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / b_float(0.0))
    assertEquals(b_float(-32768.0), p_short(Short.MIN_VALUE) / b_float(1.0))
    assertEquals(b_float(32768.0), p_short(Short.MIN_VALUE) / b_float(-1.0))
    assertEquals(b_float(-1424.6957), p_short(Short.MIN_VALUE) / b_float(23.0))
    assertEquals(b_float(-1417.1172), p_short(Short.MIN_VALUE) / b_float(23.123))
    assertEquals(b_float(1024.0), p_short(Short.MIN_VALUE) / b_float(-32.0))
    assertEquals(b_float(1009.613), p_short(Short.MIN_VALUE) / b_float(-32.456))
    assertEquals(b_float(-0.0), p_short(Short.MIN_VALUE) / b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_short(Short.MIN_VALUE) / b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(Short.MIN_VALUE) / b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-9.629651E-35")), p_short(Short.MIN_VALUE) / b_float(Float.MAX_VALUE))
    assertEquals(b_float(Float.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(p_short(0) / b_float(0.0)))
  }

  function testPShortPDoubleDivision() {
    assertEquals(p_double(Double.NaN_), p_short(0) / p_double(0.0))
    assertEquals(p_double(0.0), p_short(0) / p_double(1.0))
    assertEquals(p_double(-0.0), p_short(0) / p_double(-1.0))
    assertEquals(p_double(0.0), p_short(0) / p_double(23.0))
    assertEquals(p_double(0.0), p_short(0) / p_double(23.123))
    assertEquals(p_double(-0.0), p_short(0) / p_double(-32.0))
    assertEquals(p_double(-0.0), p_short(0) / p_double(-32.456))
    assertEquals(p_double(0.0), p_short(0) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_short(0) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(0) / p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_short(0) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_short(0) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(1) / p_double(0.0))
    assertEquals(p_double(1.0), p_short(1) / p_double(1.0))
    assertEquals(p_double(-1.0), p_short(1) / p_double(-1.0))
    assertEquals(p_double(0.043478260869565216), p_short(1) / p_double(23.0))
    assertEquals(p_double(0.043246983522899275), p_short(1) / p_double(23.123))
    assertEquals(p_double(-0.03125), p_short(1) / p_double(-32.0))
    assertEquals(p_double(-0.03081094404732561), p_short(1) / p_double(-32.456))
    assertEquals(p_double(0.0), p_short(1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_short(1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("5.562684646268003E-309")), p_short(1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-1) / p_double(0.0))
    assertEquals(p_double(-1.0), p_short(-1) / p_double(1.0))
    assertEquals(p_double(1.0), p_short(-1) / p_double(-1.0))
    assertEquals(p_double(-0.043478260869565216), p_short(-1) / p_double(23.0))
    assertEquals(p_double(-0.043246983522899275), p_short(-1) / p_double(23.123))
    assertEquals(p_double(0.03125), p_short(-1) / p_double(-32.0))
    assertEquals(p_double(0.03081094404732561), p_short(-1) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_short(-1) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_short(-1) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(-1) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-5.562684646268003E-309")), p_short(-1) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-1) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(23) / p_double(0.0))
    assertEquals(p_double(23.0), p_short(23) / p_double(1.0))
    assertEquals(p_double(-23.0), p_short(23) / p_double(-1.0))
    assertEquals(p_double(1.0), p_short(23) / p_double(23.0))
    assertEquals(p_double(0.9946806210266833), p_short(23) / p_double(23.123))
    assertEquals(p_double(-0.71875), p_short(23) / p_double(-32.0))
    assertEquals(p_double(-0.708651713088489), p_short(23) / p_double(-32.456))
    assertEquals(p_double(0.0), p_short(23) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_short(23) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(23) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.279417468641641E-307")), p_short(23) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(23) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-32) / p_double(0.0))
    assertEquals(p_double(-32.0), p_short(-32) / p_double(1.0))
    assertEquals(p_double(32.0), p_short(-32) / p_double(-1.0))
    assertEquals(p_double(-1.391304347826087), p_short(-32) / p_double(23.0))
    assertEquals(p_double(-1.3839034727327768), p_short(-32) / p_double(23.123))
    assertEquals(p_double(1.0), p_short(-32) / p_double(-32.0))
    assertEquals(p_double(0.9859502095144195), p_short(-32) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_short(-32) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_short(-32) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(-32) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.7800590868057615E-307")), p_short(-32) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(-32) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / p_double(0.0))
    assertEquals(p_double(32767.0), p_short(Short.MAX_VALUE) / p_double(1.0))
    assertEquals(p_double(-32767.0), p_short(Short.MAX_VALUE) / p_double(-1.0))
    assertEquals(p_double(1424.6521739130435), p_short(Short.MAX_VALUE) / p_double(23.0))
    assertEquals(p_double(1417.0739090948405), p_short(Short.MAX_VALUE) / p_double(23.123))
    assertEquals(p_double(-1023.96875), p_short(Short.MAX_VALUE) / p_double(-32.0))
    assertEquals(p_double(-1009.5822035987181), p_short(Short.MAX_VALUE) / p_double(-32.456))
    assertEquals(p_double(0.0), p_short(Short.MAX_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-0.0), p_short(Short.MAX_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(Short.MAX_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("1.8227248780426369E-304")), p_short(Short.MAX_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / p_double(0.0))
    assertEquals(p_double(-32768.0), p_short(Short.MIN_VALUE) / p_double(1.0))
    assertEquals(p_double(32768.0), p_short(Short.MIN_VALUE) / p_double(-1.0))
    assertEquals(p_double(-1424.695652173913), p_short(Short.MIN_VALUE) / p_double(23.0))
    assertEquals(p_double(-1417.1171560783635), p_short(Short.MIN_VALUE) / p_double(23.123))
    assertEquals(p_double(1024.0), p_short(Short.MIN_VALUE) / p_double(-32.0))
    assertEquals(p_double(1009.6130145427655), p_short(Short.MIN_VALUE) / p_double(-32.456))
    assertEquals(p_double(-0.0), p_short(Short.MIN_VALUE) / p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_short(Short.MIN_VALUE) / p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(Short.MIN_VALUE) / p_double(Double.NaN_))
    assertEquals(p_double(Double.parseDouble("-1.8227805048890998E-304")), p_short(Short.MIN_VALUE) / p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_short(0) / p_double(0.0)))
  }

  function testPShortDoubleDivision() {
    assertEquals(b_double(Double.NaN_), p_short(0) / b_double(0.0))
    assertEquals(b_double(0.0), p_short(0) / b_double(1.0))
    assertEquals(b_double(-0.0), p_short(0) / b_double(-1.0))
    assertEquals(b_double(0.0), p_short(0) / b_double(23.0))
    assertEquals(b_double(0.0), p_short(0) / b_double(23.123))
    assertEquals(b_double(-0.0), p_short(0) / b_double(-32.0))
    assertEquals(b_double(-0.0), p_short(0) / b_double(-32.456))
    assertEquals(b_double(0.0), p_short(0) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_short(0) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(0) / b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_short(0) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_short(0) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(1) / b_double(0.0))
    assertEquals(b_double(1.0), p_short(1) / b_double(1.0))
    assertEquals(b_double(-1.0), p_short(1) / b_double(-1.0))
    assertEquals(b_double(0.043478260869565216), p_short(1) / b_double(23.0))
    assertEquals(b_double(0.043246983522899275), p_short(1) / b_double(23.123))
    assertEquals(b_double(-0.03125), p_short(1) / b_double(-32.0))
    assertEquals(b_double(-0.03081094404732561), p_short(1) / b_double(-32.456))
    assertEquals(b_double(0.0), p_short(1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_short(1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("5.562684646268003E-309")), p_short(1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-1) / b_double(0.0))
    assertEquals(b_double(-1.0), p_short(-1) / b_double(1.0))
    assertEquals(b_double(1.0), p_short(-1) / b_double(-1.0))
    assertEquals(b_double(-0.043478260869565216), p_short(-1) / b_double(23.0))
    assertEquals(b_double(-0.043246983522899275), p_short(-1) / b_double(23.123))
    assertEquals(b_double(0.03125), p_short(-1) / b_double(-32.0))
    assertEquals(b_double(0.03081094404732561), p_short(-1) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_short(-1) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_short(-1) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(-1) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-5.562684646268003E-309")), p_short(-1) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-1) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(23) / b_double(0.0))
    assertEquals(b_double(23.0), p_short(23) / b_double(1.0))
    assertEquals(b_double(-23.0), p_short(23) / b_double(-1.0))
    assertEquals(b_double(1.0), p_short(23) / b_double(23.0))
    assertEquals(b_double(0.9946806210266833), p_short(23) / b_double(23.123))
    assertEquals(b_double(-0.71875), p_short(23) / b_double(-32.0))
    assertEquals(b_double(-0.708651713088489), p_short(23) / b_double(-32.456))
    assertEquals(b_double(0.0), p_short(23) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_short(23) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(23) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.279417468641641E-307")), p_short(23) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(23) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-32) / b_double(0.0))
    assertEquals(b_double(-32.0), p_short(-32) / b_double(1.0))
    assertEquals(b_double(32.0), p_short(-32) / b_double(-1.0))
    assertEquals(b_double(-1.391304347826087), p_short(-32) / b_double(23.0))
    assertEquals(b_double(-1.3839034727327768), p_short(-32) / b_double(23.123))
    assertEquals(b_double(1.0), p_short(-32) / b_double(-32.0))
    assertEquals(b_double(0.9859502095144195), p_short(-32) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_short(-32) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_short(-32) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(-32) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.7800590868057615E-307")), p_short(-32) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(-32) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / b_double(0.0))
    assertEquals(b_double(32767.0), p_short(Short.MAX_VALUE) / b_double(1.0))
    assertEquals(b_double(-32767.0), p_short(Short.MAX_VALUE) / b_double(-1.0))
    assertEquals(b_double(1424.6521739130435), p_short(Short.MAX_VALUE) / b_double(23.0))
    assertEquals(b_double(1417.0739090948405), p_short(Short.MAX_VALUE) / b_double(23.123))
    assertEquals(b_double(-1023.96875), p_short(Short.MAX_VALUE) / b_double(-32.0))
    assertEquals(b_double(-1009.5822035987181), p_short(Short.MAX_VALUE) / b_double(-32.456))
    assertEquals(b_double(0.0), p_short(Short.MAX_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-0.0), p_short(Short.MAX_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(Short.MAX_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("1.8227248780426369E-304")), p_short(Short.MAX_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), p_short(Short.MAX_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / b_double(0.0))
    assertEquals(b_double(-32768.0), p_short(Short.MIN_VALUE) / b_double(1.0))
    assertEquals(b_double(32768.0), p_short(Short.MIN_VALUE) / b_double(-1.0))
    assertEquals(b_double(-1424.695652173913), p_short(Short.MIN_VALUE) / b_double(23.0))
    assertEquals(b_double(-1417.1171560783635), p_short(Short.MIN_VALUE) / b_double(23.123))
    assertEquals(b_double(1024.0), p_short(Short.MIN_VALUE) / b_double(-32.0))
    assertEquals(b_double(1009.6130145427655), p_short(Short.MIN_VALUE) / b_double(-32.456))
    assertEquals(b_double(-0.0), p_short(Short.MIN_VALUE) / b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_short(Short.MIN_VALUE) / b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(Short.MIN_VALUE) / b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-1.8227805048890998E-304")), p_short(Short.MIN_VALUE) / b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), p_short(Short.MIN_VALUE) / b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_short(0) / b_double(0.0)))
  }

  function testPShortBigIntegerDivision() {
    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(0) / big_int("0"))
    assertEquals(big_int("0"), p_short(0) / big_int("1"))
    assertEquals(big_int("0"), p_short(0) / big_int("-1"))
    assertEquals(big_int("0"), p_short(0) / big_int("23"))
    assertEquals(big_int("0"), p_short(0) / big_int("-32"))
    assertEquals(big_int("0"), p_short(0) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(0) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(1) / big_int("0"))
    assertEquals(big_int("1"), p_short(1) / big_int("1"))
    assertEquals(big_int("-1"), p_short(1) / big_int("-1"))
    assertEquals(big_int("0"), p_short(1) / big_int("23"))
    assertEquals(big_int("0"), p_short(1) / big_int("-32"))
    assertEquals(big_int("0"), p_short(1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(-1) / big_int("0"))
    assertEquals(big_int("-1"), p_short(-1) / big_int("1"))
    assertEquals(big_int("1"), p_short(-1) / big_int("-1"))
    assertEquals(big_int("0"), p_short(-1) / big_int("23"))
    assertEquals(big_int("0"), p_short(-1) / big_int("-32"))
    assertEquals(big_int("0"), p_short(-1) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(-1) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(23) / big_int("0"))
    assertEquals(big_int("23"), p_short(23) / big_int("1"))
    assertEquals(big_int("-23"), p_short(23) / big_int("-1"))
    assertEquals(big_int("1"), p_short(23) / big_int("23"))
    assertEquals(big_int("0"), p_short(23) / big_int("-32"))
    assertEquals(big_int("0"), p_short(23) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(23) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(-32) / big_int("0"))
    assertEquals(big_int("-32"), p_short(-32) / big_int("1"))
    assertEquals(big_int("32"), p_short(-32) / big_int("-1"))
    assertEquals(big_int("-1"), p_short(-32) / big_int("23"))
    assertEquals(big_int("1"), p_short(-32) / big_int("-32"))
    assertEquals(big_int("0"), p_short(-32) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(-32) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(Short.MAX_VALUE) / big_int("0"))
    assertEquals(big_int("32767"), p_short(Short.MAX_VALUE) / big_int("1"))
    assertEquals(big_int("-32767"), p_short(Short.MAX_VALUE) / big_int("-1"))
    assertEquals(big_int("1424"), p_short(Short.MAX_VALUE) / big_int("23"))
    assertEquals(big_int("-1023"), p_short(Short.MAX_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), p_short(Short.MAX_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(Short.MAX_VALUE) / big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger divide by zero", \ -> p_short(Short.MIN_VALUE) / big_int("0"))
    assertEquals(big_int("-32768"), p_short(Short.MIN_VALUE) / big_int("1"))
    assertEquals(big_int("32768"), p_short(Short.MIN_VALUE) / big_int("-1"))
    assertEquals(big_int("-1424"), p_short(Short.MIN_VALUE) / big_int("23"))
    assertEquals(big_int("1024"), p_short(Short.MIN_VALUE) / big_int("-32"))
    assertEquals(big_int("0"), p_short(Short.MIN_VALUE) / big_int("123456789012345678901234567890"))
    assertEquals(big_int("0"), p_short(Short.MIN_VALUE) / big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(p_short(0) / big_int("0")))
  }

  function testPShortBigDecimalDivision() {
    assertThrowsArithmeticException("Division undefined", \ -> p_short(0) / big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(0) / big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(0) / big_decimal("-1"))
    assertEquals(big_decimal("0"), p_short(0) / big_decimal("23"))
    assertEquals(big_decimal("0E+3"), p_short(0) / big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_short(0) / big_decimal("-32"))
    assertEquals(big_decimal("0E+3"), p_short(0) / big_decimal("-32.456"))
    assertEquals(big_decimal("0E+9"), p_short(0) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E+9"), p_short(0) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(1) / big_decimal("0"))
    assertEquals(big_decimal("1"), p_short(1) / big_decimal("1"))
    assertEquals(big_decimal("-1"), p_short(1) / big_decimal("-1"))
    assertEquals(big_decimal("0.04347826086956521739130434782608696"), p_short(1) / big_decimal("23"))
    assertEquals(big_decimal("0.04324698352289927777537516758206115"), p_short(1) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.03125"), p_short(1) / big_decimal("-32"))
    assertEquals(big_decimal("-0.03081094404732561005669213704707912"), p_short(1) / big_decimal("-32.456"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_short(1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_short(1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(-1) / big_decimal("0"))
    assertEquals(big_decimal("-1"), p_short(-1) / big_decimal("1"))
    assertEquals(big_decimal("1"), p_short(-1) / big_decimal("-1"))
    assertEquals(big_decimal("-0.04347826086956521739130434782608696"), p_short(-1) / big_decimal("23"))
    assertEquals(big_decimal("-0.04324698352289927777537516758206115"), p_short(-1) / big_decimal("23.123"))
    assertEquals(big_decimal("0.03125"), p_short(-1) / big_decimal("-32"))
    assertEquals(big_decimal("0.03081094404732561005669213704707912"), p_short(-1) / big_decimal("-32.456"))
    assertEquals(big_decimal("-8.100000072900000663390006036849055E-30"), p_short(-1) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("8.100000072900000663390006036849055E-30"), p_short(-1) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(23) / big_decimal("0"))
    assertEquals(big_decimal("23"), p_short(23) / big_decimal("1"))
    assertEquals(big_decimal("-23"), p_short(23) / big_decimal("-1"))
    assertEquals(big_decimal("1"), p_short(23) / big_decimal("23"))
    assertEquals(big_decimal("0.9946806210266833888336288543874065"), p_short(23) / big_decimal("23.123"))
    assertEquals(big_decimal("-0.71875"), p_short(23) / big_decimal("-32"))
    assertEquals(big_decimal("-0.7086517130884890313039191520828198"), p_short(23) / big_decimal("-32.456"))
    assertEquals(big_decimal("1.863000016767000152579701388475283E-28"), p_short(23) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-1.863000016767000152579701388475283E-28"), p_short(23) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(-32) / big_decimal("0"))
    assertEquals(big_decimal("-32"), p_short(-32) / big_decimal("1"))
    assertEquals(big_decimal("32"), p_short(-32) / big_decimal("-1"))
    assertEquals(big_decimal("-1.391304347826086956521739130434783"), p_short(-32) / big_decimal("23"))
    assertEquals(big_decimal("-1.383903472732776888812005362625957"), p_short(-32) / big_decimal("23.123"))
    assertEquals(big_decimal("1"), p_short(-32) / big_decimal("-32"))
    assertEquals(big_decimal("0.9859502095144195218141483855065319"), p_short(-32) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.592000023328000212284801931791698E-28"), p_short(-32) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.592000023328000212284801931791698E-28"), p_short(-32) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(Short.MAX_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("32767"), p_short(Short.MAX_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("-32767"), p_short(Short.MAX_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("1424.652173913043478260869565217391"), p_short(Short.MAX_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("1417.073909094840634865718116161398"), p_short(Short.MAX_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("-1023.96875"), p_short(Short.MAX_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("-1009.582203598718264727631254621642"), p_short(Short.MAX_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("2.654127023887143217373003278094330E-25"), p_short(Short.MAX_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-2.654127023887143217373003278094330E-25"), p_short(Short.MAX_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(Short.MIN_VALUE) / big_decimal("0"))
    assertEquals(big_decimal("-32768"), p_short(Short.MIN_VALUE) / big_decimal("1"))
    assertEquals(big_decimal("32768"), p_short(Short.MIN_VALUE) / big_decimal("-1"))
    assertEquals(big_decimal("-1424.695652173913043478260869565217"), p_short(Short.MIN_VALUE) / big_decimal("23"))
    assertEquals(big_decimal("-1417.117156078363534143493491328980"), p_short(Short.MIN_VALUE) / big_decimal("23.123"))
    assertEquals(big_decimal("1024"), p_short(Short.MIN_VALUE) / big_decimal("-32"))
    assertEquals(big_decimal("1009.613014542765590337687946758689"), p_short(Short.MIN_VALUE) / big_decimal("-32.456"))
    assertEquals(big_decimal("-2.654208023887872217379637178154698E-25"), p_short(Short.MIN_VALUE) / big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2.654208023887872217379637178154698E-25"), p_short(Short.MIN_VALUE) / big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_short(0) / big_decimal("0")))
  }

}

