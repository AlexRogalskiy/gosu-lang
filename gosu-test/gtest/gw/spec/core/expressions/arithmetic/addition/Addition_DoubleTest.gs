package gw.spec.core.expressions.arithmetic.addition
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Addition_DoubleTest extends ArithmeticTestBase {

  function testDoublePByteAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_byte(0))
    assertEquals(b_double(23.0), b_double(0.0) + p_byte(23))
    assertEquals(b_double(-32.0), b_double(0.0) + p_byte(-32))
    assertEquals(b_double(127.0), b_double(0.0) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-128.0), b_double(0.0) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_byte(0))
    assertEquals(b_double(46.0), b_double(23.0) + p_byte(23))
    assertEquals(b_double(-9.0), b_double(23.0) + p_byte(-32))
    assertEquals(b_double(150.0), b_double(23.0) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-105.0), b_double(23.0) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_byte(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_byte(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + p_byte(-32))
    assertEquals(b_double(150.123), b_double(23.123) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-104.877), b_double(23.123) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_byte(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_byte(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + p_byte(-32))
    assertEquals(b_double(95.0), b_double(-32.0) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-160.0), b_double(-32.0) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_byte(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_byte(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + p_byte(-32))
    assertEquals(b_double(94.544), b_double(-32.456) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-160.45600000000002), b_double(-32.456) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_byte(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_byte(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_byte(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_byte(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_byte(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_byte(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_byte(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_byte(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_byte(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_byte(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_byte(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_byte(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_byte(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_byte(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + p_byte(-32))
    assertEquals(b_double(127.0), b_double(Double.MIN_VALUE) + p_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-128.0), b_double(Double.MIN_VALUE) + p_byte(Byte.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_byte(0)))
  }

  function testDoubleByteAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_byte(0))
    assertEquals(b_double(23.0), b_double(0.0) + b_byte(23))
    assertEquals(b_double(-32.0), b_double(0.0) + b_byte(-32))
    assertEquals(b_double(127.0), b_double(0.0) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-128.0), b_double(0.0) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_byte(0))
    assertEquals(b_double(46.0), b_double(23.0) + b_byte(23))
    assertEquals(b_double(-9.0), b_double(23.0) + b_byte(-32))
    assertEquals(b_double(150.0), b_double(23.0) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-105.0), b_double(23.0) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_byte(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_byte(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + b_byte(-32))
    assertEquals(b_double(150.123), b_double(23.123) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-104.877), b_double(23.123) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_byte(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_byte(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + b_byte(-32))
    assertEquals(b_double(95.0), b_double(-32.0) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-160.0), b_double(-32.0) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_byte(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_byte(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + b_byte(-32))
    assertEquals(b_double(94.544), b_double(-32.456) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-160.45600000000002), b_double(-32.456) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_byte(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_byte(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_byte(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_byte(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_byte(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_byte(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_byte(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_byte(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_byte(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_byte(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_byte(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_byte(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_byte(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_byte(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + b_byte(-32))
    assertEquals(b_double(127.0), b_double(Double.MIN_VALUE) + b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-128.0), b_double(Double.MIN_VALUE) + b_byte(Byte.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_byte(0)))
  }

  function testDoublePShortAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_short(0))
    assertEquals(b_double(23.0), b_double(0.0) + p_short(23))
    assertEquals(b_double(-32.0), b_double(0.0) + p_short(-32))
    assertEquals(b_double(32767.0), b_double(0.0) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(-32768.0), b_double(0.0) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_short(0))
    assertEquals(b_double(46.0), b_double(23.0) + p_short(23))
    assertEquals(b_double(-9.0), b_double(23.0) + p_short(-32))
    assertEquals(b_double(32790.0), b_double(23.0) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(-32745.0), b_double(23.0) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_short(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_short(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + p_short(-32))
    assertEquals(b_double(32790.123), b_double(23.123) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(-32744.877), b_double(23.123) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_short(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_short(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + p_short(-32))
    assertEquals(b_double(32735.0), b_double(-32.0) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(-32800.0), b_double(-32.0) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_short(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_short(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + p_short(-32))
    assertEquals(b_double(32734.544), b_double(-32.456) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(-32800.456), b_double(-32.456) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_short(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_short(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_short(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_short(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_short(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_short(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_short(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_short(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_short(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_short(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_short(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_short(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_short(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_short(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + p_short(-32))
    assertEquals(b_double(32767.0), b_double(Double.MIN_VALUE) + p_short(Short.MAX_VALUE))
    assertEquals(b_double(-32768.0), b_double(Double.MIN_VALUE) + p_short(Short.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_short(0)))
  }

  function testDoubleShortAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_short(0))
    assertEquals(b_double(23.0), b_double(0.0) + b_short(23))
    assertEquals(b_double(-32.0), b_double(0.0) + b_short(-32))
    assertEquals(b_double(32767.0), b_double(0.0) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32768.0), b_double(0.0) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_short(0))
    assertEquals(b_double(46.0), b_double(23.0) + b_short(23))
    assertEquals(b_double(-9.0), b_double(23.0) + b_short(-32))
    assertEquals(b_double(32790.0), b_double(23.0) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32745.0), b_double(23.0) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_short(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_short(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + b_short(-32))
    assertEquals(b_double(32790.123), b_double(23.123) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32744.877), b_double(23.123) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_short(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_short(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + b_short(-32))
    assertEquals(b_double(32735.0), b_double(-32.0) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32800.0), b_double(-32.0) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_short(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_short(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + b_short(-32))
    assertEquals(b_double(32734.544), b_double(-32.456) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32800.456), b_double(-32.456) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_short(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_short(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_short(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_short(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_short(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_short(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_short(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_short(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_short(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_short(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_short(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_short(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_short(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_short(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + b_short(-32))
    assertEquals(b_double(32767.0), b_double(Double.MIN_VALUE) + b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32768.0), b_double(Double.MIN_VALUE) + b_short(Short.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_short(0)))
  }

  function testDoublePCharAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_char(0))
    assertEquals(b_double(23.0), b_double(0.0) + p_char(23))
    assertEquals(b_double(65535.0), b_double(0.0) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_char(0))
    assertEquals(b_double(46.0), b_double(23.0) + p_char(23))
    assertEquals(b_double(65558.0), b_double(23.0) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_char(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_char(23))
    assertEquals(b_double(65558.123), b_double(23.123) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_char(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_char(23))
    assertEquals(b_double(65503.0), b_double(-32.0) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_char(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_char(23))
    assertEquals(b_double(65502.544), b_double(-32.456) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_char(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_char(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_char(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_char(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_char(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_char(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_char(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_char(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_char(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_char(23))
    assertEquals(b_double(65535.0), b_double(Double.MIN_VALUE) + p_char(Character.MAX_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_char(0)))
  }

  function testDoubleCharacterAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_char(0))
    assertEquals(b_double(23.0), b_double(0.0) + b_char(23))
    assertEquals(b_double(65535.0), b_double(0.0) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_char(0))
    assertEquals(b_double(46.0), b_double(23.0) + b_char(23))
    assertEquals(b_double(65558.0), b_double(23.0) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_char(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_char(23))
    assertEquals(b_double(65558.123), b_double(23.123) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_char(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_char(23))
    assertEquals(b_double(65503.0), b_double(-32.0) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_char(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_char(23))
    assertEquals(b_double(65502.544), b_double(-32.456) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_char(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_char(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_char(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_char(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_char(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_char(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_char(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_char(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_char(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_char(23))
    assertEquals(b_double(65535.0), b_double(Double.MIN_VALUE) + b_char(Character.MAX_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_char(0)))
  }

  function testDoublePIntAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_int(0))
    assertEquals(b_double(23.0), b_double(0.0) + p_int(23))
    assertEquals(b_double(-32.0), b_double(0.0) + p_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_double(0.0) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_double(0.0) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_int(0))
    assertEquals(b_double(46.0), b_double(23.0) + p_int(23))
    assertEquals(b_double(-9.0), b_double(23.0) + p_int(-32))
    assertEquals(b_double(Double.parseDouble("2.14748367E9")), b_double(23.0) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483625E9")), b_double(23.0) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_int(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_int(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + p_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483670123E9")), b_double(23.123) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483624877E9")), b_double(23.123) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_int(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_int(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + p_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483615E9")), b_double(-32.0) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.14748368E9")), b_double(-32.0) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_int(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_int(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + p_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483614544E9")), b_double(-32.456) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483680456E9")), b_double(-32.456) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_int(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_int(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_int(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_int(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_int(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_int(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_int(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_int(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_int(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_int(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_int(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_int(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_int(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_int(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + p_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_double(Double.MIN_VALUE) + p_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_double(Double.MIN_VALUE) + p_int(Integer.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_int(0)))
  }

  function testDoubleIntegerAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_int(0))
    assertEquals(b_double(23.0), b_double(0.0) + b_int(23))
    assertEquals(b_double(-32.0), b_double(0.0) + b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_double(0.0) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_double(0.0) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_int(0))
    assertEquals(b_double(46.0), b_double(23.0) + b_int(23))
    assertEquals(b_double(-9.0), b_double(23.0) + b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.14748367E9")), b_double(23.0) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483625E9")), b_double(23.0) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_int(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_int(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483670123E9")), b_double(23.123) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483624877E9")), b_double(23.123) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_int(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_int(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483615E9")), b_double(-32.0) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.14748368E9")), b_double(-32.0) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_int(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_int(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483614544E9")), b_double(-32.456) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483680456E9")), b_double(-32.456) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_int(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_int(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_int(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_int(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_int(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_int(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_int(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_int(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_int(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_int(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_int(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_int(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_int(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_int(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_double(Double.MIN_VALUE) + b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_double(Double.MIN_VALUE) + b_int(Integer.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_int(0)))
  }

  function testDoublePLongAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_long(0))
    assertEquals(b_double(23.0), b_double(0.0) + p_long(23))
    assertEquals(b_double(-32.0), b_double(0.0) + p_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(0.0) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(0.0) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_long(0))
    assertEquals(b_double(46.0), b_double(23.0) + p_long(23))
    assertEquals(b_double(-9.0), b_double(23.0) + p_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(23.0) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(23.0) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_long(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_long(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + p_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(23.123) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(23.123) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_long(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_long(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + p_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(-32.0) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(-32.0) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_long(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_long(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + p_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(-32.456) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(-32.456) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_long(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_long(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_long(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_long(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_long(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_long(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_long(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_long(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_long(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_long(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_long(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_long(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_long(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_long(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + p_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(Double.MIN_VALUE) + p_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(Double.MIN_VALUE) + p_long(Long.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_long(0)))
  }

  function testDoubleLongAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_long(0))
    assertEquals(b_double(23.0), b_double(0.0) + b_long(23))
    assertEquals(b_double(-32.0), b_double(0.0) + b_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(0.0) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(0.0) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_long(0))
    assertEquals(b_double(46.0), b_double(23.0) + b_long(23))
    assertEquals(b_double(-9.0), b_double(23.0) + b_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(23.0) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(23.0) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_long(0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_long(23))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + b_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(23.123) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(23.123) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_long(0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_long(23))
    assertEquals(b_double(-64.0), b_double(-32.0) + b_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(-32.0) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(-32.0) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_long(0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_long(23))
    assertEquals(b_double(-64.456), b_double(-32.456) + b_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(-32.456) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(-32.456) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_long(0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_long(23))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_long(-32))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_long(0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_long(23))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_long(-32))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_long(0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_long(23))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_long(-32))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_long(0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_long(23))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_long(-32))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_long(0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_long(23))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + b_long(-32))
    assertEquals(b_double(Double.parseDouble("9.223372036854776E18")), b_double(Double.MIN_VALUE) + b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("-9.223372036854776E18")), b_double(Double.MIN_VALUE) + b_long(Long.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_long(0)))
  }

  function testDoublePFloatAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_float(0.0))
    assertEquals(b_double(23.0), b_double(0.0) + p_float(23.0))
    assertEquals(b_double(23.12299919128418), b_double(0.0) + p_float(23.123))
    assertEquals(b_double(-32.0), b_double(0.0) + p_float(-32.0))
    assertEquals(b_double(-32.45600128173828), b_double(0.0) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(0.0) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(0.0) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(0.0) + p_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(0.0) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_double(0.0) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_float(0.0))
    assertEquals(b_double(46.0), b_double(23.0) + p_float(23.0))
    assertEquals(b_double(46.12299919128418), b_double(23.0) + p_float(23.123))
    assertEquals(b_double(-9.0), b_double(23.0) + p_float(-32.0))
    assertEquals(b_double(-9.456001281738281), b_double(23.0) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.0) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.0) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.0) + p_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(23.0) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(23.0), b_double(23.0) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_float(0.0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_float(23.0))
    assertEquals(b_double(46.245999191284184), b_double(23.123) + p_float(23.123))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + p_float(-32.0))
    assertEquals(b_double(-9.33300128173828), b_double(23.123) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.123) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.123) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.123) + p_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(23.123) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(23.123), b_double(23.123) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_float(0.0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_float(23.0))
    assertEquals(b_double(-8.87700080871582), b_double(-32.0) + p_float(23.123))
    assertEquals(b_double(-64.0), b_double(-32.0) + p_float(-32.0))
    assertEquals(b_double(-64.45600128173828), b_double(-32.0) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.0) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.0) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.0) + p_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(-32.0) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(-32.0), b_double(-32.0) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_float(0.0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_float(23.0))
    assertEquals(b_double(-9.333000808715823), b_double(-32.456) + p_float(23.123))
    assertEquals(b_double(-64.456), b_double(-32.456) + p_float(-32.0))
    assertEquals(b_double(-64.91200128173828), b_double(-32.456) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.456) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.456) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.456) + p_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(-32.456) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(-32.456), b_double(-32.456) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + p_float(Float.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + p_float(Float.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(0.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(23.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(23.123))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(-32.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(Float.NaN_))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(0.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(23.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(23.123))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(-32.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MAX_VALUE) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MAX_VALUE) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MAX_VALUE) + p_float(Float.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_float(0.0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_float(23.0))
    assertEquals(b_double(23.12299919128418), b_double(Double.MIN_VALUE) + p_float(23.123))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + p_float(-32.0))
    assertEquals(b_double(-32.45600128173828), b_double(Double.MIN_VALUE) + p_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MIN_VALUE) + p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MIN_VALUE) + p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MIN_VALUE) + p_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(Double.MIN_VALUE) + p_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_double(Double.MIN_VALUE) + p_float(Float.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_float(0.0)))
  }

  function testDoubleFloatAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_float(0.0))
    assertEquals(b_double(23.0), b_double(0.0) + b_float(23.0))
    assertEquals(b_double(23.12299919128418), b_double(0.0) + b_float(23.123))
    assertEquals(b_double(-32.0), b_double(0.0) + b_float(-32.0))
    assertEquals(b_double(-32.45600128173828), b_double(0.0) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(0.0) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(0.0) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(0.0) + b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(0.0) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_double(0.0) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_float(0.0))
    assertEquals(b_double(46.0), b_double(23.0) + b_float(23.0))
    assertEquals(b_double(46.12299919128418), b_double(23.0) + b_float(23.123))
    assertEquals(b_double(-9.0), b_double(23.0) + b_float(-32.0))
    assertEquals(b_double(-9.456001281738281), b_double(23.0) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.0) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.0) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.0) + b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(23.0) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(23.0), b_double(23.0) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_float(0.0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_float(23.0))
    assertEquals(b_double(46.245999191284184), b_double(23.123) + b_float(23.123))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + b_float(-32.0))
    assertEquals(b_double(-9.33300128173828), b_double(23.123) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.123) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.123) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.123) + b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(23.123) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(23.123), b_double(23.123) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_float(0.0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_float(23.0))
    assertEquals(b_double(-8.87700080871582), b_double(-32.0) + b_float(23.123))
    assertEquals(b_double(-64.0), b_double(-32.0) + b_float(-32.0))
    assertEquals(b_double(-64.45600128173828), b_double(-32.0) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.0) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.0) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.0) + b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(-32.0) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(-32.0), b_double(-32.0) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_float(0.0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_float(23.0))
    assertEquals(b_double(-9.333000808715823), b_double(-32.456) + b_float(23.123))
    assertEquals(b_double(-64.456), b_double(-32.456) + b_float(-32.0))
    assertEquals(b_double(-64.91200128173828), b_double(-32.456) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.456) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.456) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.456) + b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(-32.456) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(-32.456), b_double(-32.456) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + b_float(Float.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + b_float(Float.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(0.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(23.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(23.123))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(-32.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(Float.NaN_))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(0.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(23.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(23.123))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(-32.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MAX_VALUE) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MAX_VALUE) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MAX_VALUE) + b_float(Float.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_float(0.0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_float(23.0))
    assertEquals(b_double(23.12299919128418), b_double(Double.MIN_VALUE) + b_float(23.123))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + b_float(-32.0))
    assertEquals(b_double(-32.45600128173828), b_double(Double.MIN_VALUE) + b_float(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MIN_VALUE) + b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MIN_VALUE) + b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MIN_VALUE) + b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("3.4028234663852886E38")), b_double(Double.MIN_VALUE) + b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.401298464324817E-45")), b_double(Double.MIN_VALUE) + b_float(Float.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_float(0.0)))
  }

  function testDoublePDoubleAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + p_double(0.0))
    assertEquals(b_double(23.0), b_double(0.0) + p_double(23.0))
    assertEquals(b_double(23.123), b_double(0.0) + p_double(23.123))
    assertEquals(b_double(-32.0), b_double(0.0) + p_double(-32.0))
    assertEquals(b_double(-32.456), b_double(0.0) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(0.0) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(0.0) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(0.0) + p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(0.0) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), b_double(0.0) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + p_double(0.0))
    assertEquals(b_double(46.0), b_double(23.0) + p_double(23.0))
    assertEquals(b_double(46.123000000000005), b_double(23.0) + p_double(23.123))
    assertEquals(b_double(-9.0), b_double(23.0) + p_double(-32.0))
    assertEquals(b_double(-9.456000000000003), b_double(23.0) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.0) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.0) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.0) + p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(23.0) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(23.0), b_double(23.0) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + p_double(0.0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + p_double(23.0))
    assertEquals(b_double(46.246), b_double(23.123) + p_double(23.123))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + p_double(-32.0))
    assertEquals(b_double(-9.333000000000002), b_double(23.123) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.123) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.123) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.123) + p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(23.123) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(23.123), b_double(23.123) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + p_double(0.0))
    assertEquals(b_double(-9.0), b_double(-32.0) + p_double(23.0))
    assertEquals(b_double(-8.876999999999999), b_double(-32.0) + p_double(23.123))
    assertEquals(b_double(-64.0), b_double(-32.0) + p_double(-32.0))
    assertEquals(b_double(-64.456), b_double(-32.0) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.0) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.0) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.0) + p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(-32.0) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(-32.0), b_double(-32.0) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + p_double(0.0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + p_double(23.0))
    assertEquals(b_double(-9.333000000000002), b_double(-32.456) + p_double(23.123))
    assertEquals(b_double(-64.456), b_double(-32.456) + p_double(-32.0))
    assertEquals(b_double(-64.912), b_double(-32.456) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.456) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.456) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.456) + p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(-32.456) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(-32.456), b_double(-32.456) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + p_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(0.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(23.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(23.123))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_double(0.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_double(23.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_double(23.123))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_double(-32.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MAX_VALUE) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MAX_VALUE) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MAX_VALUE) + p_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MAX_VALUE) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + p_double(0.0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + p_double(23.0))
    assertEquals(b_double(23.123), b_double(Double.MIN_VALUE) + p_double(23.123))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + p_double(-32.0))
    assertEquals(b_double(-32.456), b_double(Double.MIN_VALUE) + p_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MIN_VALUE) + p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MIN_VALUE) + p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MIN_VALUE) + p_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MIN_VALUE) + p_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.0E-323")), b_double(Double.MIN_VALUE) + p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + p_double(0.0)))
  }

  function testDoubleDoubleAddition() {
    assertEquals(b_double(0.0), b_double(0.0) + b_double(0.0))
    assertEquals(b_double(23.0), b_double(0.0) + b_double(23.0))
    assertEquals(b_double(23.123), b_double(0.0) + b_double(23.123))
    assertEquals(b_double(-32.0), b_double(0.0) + b_double(-32.0))
    assertEquals(b_double(-32.456), b_double(0.0) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(0.0) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(0.0) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(0.0) + b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(0.0) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), b_double(0.0) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(23.0), b_double(23.0) + b_double(0.0))
    assertEquals(b_double(46.0), b_double(23.0) + b_double(23.0))
    assertEquals(b_double(46.123000000000005), b_double(23.0) + b_double(23.123))
    assertEquals(b_double(-9.0), b_double(23.0) + b_double(-32.0))
    assertEquals(b_double(-9.456000000000003), b_double(23.0) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.0) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.0) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.0) + b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(23.0) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(23.0), b_double(23.0) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(23.123), b_double(23.123) + b_double(0.0))
    assertEquals(b_double(46.123000000000005), b_double(23.123) + b_double(23.0))
    assertEquals(b_double(46.246), b_double(23.123) + b_double(23.123))
    assertEquals(b_double(-8.876999999999999), b_double(23.123) + b_double(-32.0))
    assertEquals(b_double(-9.333000000000002), b_double(23.123) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(23.123) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(23.123) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(23.123) + b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(23.123) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(23.123), b_double(23.123) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(-32.0), b_double(-32.0) + b_double(0.0))
    assertEquals(b_double(-9.0), b_double(-32.0) + b_double(23.0))
    assertEquals(b_double(-8.876999999999999), b_double(-32.0) + b_double(23.123))
    assertEquals(b_double(-64.0), b_double(-32.0) + b_double(-32.0))
    assertEquals(b_double(-64.456), b_double(-32.0) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.0) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.0) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.0) + b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(-32.0) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(-32.0), b_double(-32.0) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(-32.456), b_double(-32.456) + b_double(0.0))
    assertEquals(b_double(-9.456000000000003), b_double(-32.456) + b_double(23.0))
    assertEquals(b_double(-9.333000000000002), b_double(-32.456) + b_double(23.123))
    assertEquals(b_double(-64.456), b_double(-32.456) + b_double(-32.0))
    assertEquals(b_double(-64.912), b_double(-32.456) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(-32.456) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(-32.456) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(-32.456) + b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(-32.456) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(-32.456), b_double(-32.456) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(0.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(23.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(23.123))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(-32.0))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.POSITIVE_INFINITY) + b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.POSITIVE_INFINITY) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(0.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(23.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(23.123))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(-32.0))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NEGATIVE_INFINITY) + b_double(Double.NaN_))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.NEGATIVE_INFINITY) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(0.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(23.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(23.123))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(-32.0))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(-32.456))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), b_double(Double.NaN_) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_double(0.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_double(23.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_double(23.123))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_double(-32.0))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MAX_VALUE) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MAX_VALUE) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MAX_VALUE) + b_double(Double.NaN_))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MAX_VALUE) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MAX_VALUE) + b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.MIN_VALUE), b_double(Double.MIN_VALUE) + b_double(0.0))
    assertEquals(b_double(23.0), b_double(Double.MIN_VALUE) + b_double(23.0))
    assertEquals(b_double(23.123), b_double(Double.MIN_VALUE) + b_double(23.123))
    assertEquals(b_double(-32.0), b_double(Double.MIN_VALUE) + b_double(-32.0))
    assertEquals(b_double(-32.456), b_double(Double.MIN_VALUE) + b_double(-32.456))
    assertEquals(b_double(Double.POSITIVE_INFINITY), b_double(Double.MIN_VALUE) + b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NEGATIVE_INFINITY), b_double(Double.MIN_VALUE) + b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_double(Double.MIN_VALUE) + b_double(Double.NaN_))
    assertEquals(b_double(Double.MAX_VALUE), b_double(Double.MIN_VALUE) + b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.parseDouble("1.0E-323")), b_double(Double.MIN_VALUE) + b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_double(0.0) + b_double(0.0)))
  }

  function testDoubleBigIntegerAddition() {
    assertEquals(big_decimal("0.0"), b_double(0.0) + big_int("0"))
    assertEquals(big_decimal("23.0"), b_double(0.0) + big_int("23"))
    assertEquals(big_decimal("-32.0"), b_double(0.0) + big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567890.0"), b_double(0.0) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567890.0"), b_double(0.0) + big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("23.0"), b_double(23.0) + big_int("0"))
    assertEquals(big_decimal("46.0"), b_double(23.0) + big_int("23"))
    assertEquals(big_decimal("-9.0"), b_double(23.0) + big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567913.0"), b_double(23.0) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567867.0"), b_double(23.0) + big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("23.123"), b_double(23.123) + big_int("0"))
    assertEquals(big_decimal("46.123"), b_double(23.123) + big_int("23"))
    assertEquals(big_decimal("-8.877"), b_double(23.123) + big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567913.123"), b_double(23.123) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567866.877"), b_double(23.123) + big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("-32.0"), b_double(-32.0) + big_int("0"))
    assertEquals(big_decimal("-9.0"), b_double(-32.0) + big_int("23"))
    assertEquals(big_decimal("-64.0"), b_double(-32.0) + big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567858.0"), b_double(-32.0) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567922.0"), b_double(-32.0) + big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("-32.456"), b_double(-32.456) + big_int("0"))
    assertEquals(big_decimal("-9.456"), b_double(-32.456) + big_int("23"))
    assertEquals(big_decimal("-64.456"), b_double(-32.456) + big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567857.544"), b_double(-32.456) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567922.456"), b_double(-32.456) + big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_int("0"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_int("23"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_int("-32"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), b_double(Double.MAX_VALUE) + big_int("0"))
    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023"), b_double(Double.MAX_VALUE) + big_int("23"))
    assertEquals(big_decimal("179769313486231569999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999968"), b_double(Double.MAX_VALUE) + big_int("-32"))
    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000123456789012345678901234567890"), b_double(Double.MAX_VALUE) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("179769313486231569999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999876543210987654321098765432110"), b_double(Double.MAX_VALUE) + big_int("-123456789012345678901234567890"))

    assertEquals(big_decimal("4.9E-324"), b_double(Double.MIN_VALUE) + big_int("0"))
    assertEquals(big_decimal("23.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049"), b_double(Double.MIN_VALUE) + big_int("23"))
    assertEquals(big_decimal("-31.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999951"), b_double(Double.MIN_VALUE) + big_int("-32"))
    assertEquals(big_decimal("123456789012345678901234567890.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049"), b_double(Double.MIN_VALUE) + big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("-123456789012345678901234567889.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999951"), b_double(Double.MIN_VALUE) + big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(b_double(0.0) + big_int("0")))
  }

  function testDoubleBigDecimalAddition() {
    assertEquals(big_decimal("0.0"), b_double(0.0) + big_decimal("0"))
    assertEquals(big_decimal("23.0"), b_double(0.0) + big_decimal("23"))
    assertEquals(big_decimal("23.123"), b_double(0.0) + big_decimal("23.123"))
    assertEquals(big_decimal("-32.0"), b_double(0.0) + big_decimal("-32"))
    assertEquals(big_decimal("-32.456"), b_double(0.0) + big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), b_double(0.0) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.123456789"), b_double(0.0) + big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("23.0"), b_double(23.0) + big_decimal("0"))
    assertEquals(big_decimal("46.0"), b_double(23.0) + big_decimal("23"))
    assertEquals(big_decimal("46.123"), b_double(23.0) + big_decimal("23.123"))
    assertEquals(big_decimal("-9.0"), b_double(23.0) + big_decimal("-32"))
    assertEquals(big_decimal("-9.456"), b_double(23.0) + big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567913.123456789"), b_double(23.0) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567867.123456789"), b_double(23.0) + big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("23.123"), b_double(23.123) + big_decimal("0"))
    assertEquals(big_decimal("46.123"), b_double(23.123) + big_decimal("23"))
    assertEquals(big_decimal("46.246"), b_double(23.123) + big_decimal("23.123"))
    assertEquals(big_decimal("-8.877"), b_double(23.123) + big_decimal("-32"))
    assertEquals(big_decimal("-9.333"), b_double(23.123) + big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567913.246456789"), b_double(23.123) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567867.000456789"), b_double(23.123) + big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("-32.0"), b_double(-32.0) + big_decimal("0"))
    assertEquals(big_decimal("-9.0"), b_double(-32.0) + big_decimal("23"))
    assertEquals(big_decimal("-8.877"), b_double(-32.0) + big_decimal("23.123"))
    assertEquals(big_decimal("-64.0"), b_double(-32.0) + big_decimal("-32"))
    assertEquals(big_decimal("-64.456"), b_double(-32.0) + big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567858.123456789"), b_double(-32.0) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567922.123456789"), b_double(-32.0) + big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("-32.456"), b_double(-32.456) + big_decimal("0"))
    assertEquals(big_decimal("-9.456"), b_double(-32.456) + big_decimal("23"))
    assertEquals(big_decimal("-9.333"), b_double(-32.456) + big_decimal("23.123"))
    assertEquals(big_decimal("-64.456"), b_double(-32.456) + big_decimal("-32"))
    assertEquals(big_decimal("-64.912"), b_double(-32.456) + big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567857.667456789"), b_double(-32.456) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567922.579456789"), b_double(-32.456) + big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_double(Double.POSITIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_double(Double.NEGATIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("0"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("23"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("23.123"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("-32"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, b_double(Double.NaN_) - big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), b_double(Double.MAX_VALUE) + big_decimal("0"))
    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023"), b_double(Double.MAX_VALUE) + big_decimal("23"))
    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023.123"), b_double(Double.MAX_VALUE) + big_decimal("23.123"))
    assertEquals(big_decimal("179769313486231569999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999968"), b_double(Double.MAX_VALUE) + big_decimal("-32"))
    assertEquals(big_decimal("179769313486231569999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999967.544"), b_double(Double.MAX_VALUE) + big_decimal("-32.456"))
    assertEquals(big_decimal("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000123456789012345678901234567890.123456789"), b_double(Double.MAX_VALUE) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("179769313486231569999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999876543210987654321098765432109.876543211"), b_double(Double.MAX_VALUE) + big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(big_decimal("4.9E-324"), b_double(Double.MIN_VALUE) + big_decimal("0"))
    assertEquals(big_decimal("23.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049"), b_double(Double.MIN_VALUE) + big_decimal("23"))
    assertEquals(big_decimal("23.1230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049"), b_double(Double.MIN_VALUE) + big_decimal("23.123"))
    assertEquals(big_decimal("-31.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999951"), b_double(Double.MIN_VALUE) + big_decimal("-32"))
    assertEquals(big_decimal("-32.4559999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999951"), b_double(Double.MIN_VALUE) + big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890.1234567890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000049"), b_double(Double.MIN_VALUE) + big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("-123456789012345678901234567890.1234567889999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999951"), b_double(Double.MIN_VALUE) + big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_double(0.0) + big_decimal("0")))
  }

}

