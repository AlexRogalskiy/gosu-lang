package gw.spec.core.expressions.arithmetic.remainder
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Remainder_IntegerTest extends ArithmeticTestBase {

  function testIntegerPByteRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % p_byte(0))
    assertEquals(b_int(0), b_int(0) % p_byte(1))
    assertEquals(b_int(0), b_int(0) % p_byte(-1))
    assertEquals(b_int(0), b_int(0) % p_byte(23))
    assertEquals(b_int(0), b_int(0) % p_byte(-32))
    assertEquals(b_int(0), b_int(0) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % p_byte(0))
    assertEquals(b_int(0), b_int(1) % p_byte(1))
    assertEquals(b_int(0), b_int(1) % p_byte(-1))
    assertEquals(b_int(1), b_int(1) % p_byte(23))
    assertEquals(b_int(1), b_int(1) % p_byte(-32))
    assertEquals(b_int(1), b_int(1) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(1), b_int(1) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % p_byte(0))
    assertEquals(b_int(0), b_int(-1) % p_byte(1))
    assertEquals(b_int(0), b_int(-1) % p_byte(-1))
    assertEquals(b_int(-1), b_int(-1) % p_byte(23))
    assertEquals(b_int(-1), b_int(-1) % p_byte(-32))
    assertEquals(b_int(-1), b_int(-1) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-1), b_int(-1) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % p_byte(0))
    assertEquals(b_int(0), b_int(23) % p_byte(1))
    assertEquals(b_int(0), b_int(23) % p_byte(-1))
    assertEquals(b_int(0), b_int(23) % p_byte(23))
    assertEquals(b_int(23), b_int(23) % p_byte(-32))
    assertEquals(b_int(23), b_int(23) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(23), b_int(23) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % p_byte(0))
    assertEquals(b_int(0), b_int(-32) % p_byte(1))
    assertEquals(b_int(0), b_int(-32) % p_byte(-1))
    assertEquals(b_int(-9), b_int(-32) % p_byte(23))
    assertEquals(b_int(0), b_int(-32) % p_byte(-32))
    assertEquals(b_int(-32), b_int(-32) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-32), b_int(-32) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % p_byte(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_byte(1))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_byte(-1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % p_byte(23))
    assertEquals(b_int(31), b_int(Integer.MAX_VALUE) % p_byte(-32))
    assertEquals(b_int(7), b_int(Integer.MAX_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(127), b_int(Integer.MAX_VALUE) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % p_byte(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_byte(1))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_byte(-1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % p_byte(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_byte(-32))
    assertEquals(b_int(-8), b_int(Integer.MIN_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % p_byte(0)))
  }

  function testIntegerByteRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % b_byte(0))
    assertEquals(b_int(0), b_int(0) % p_byte(1))
    assertEquals(b_int(0), b_int(0) % p_byte(-1))
    assertEquals(b_int(0), b_int(0) % b_byte(23))
    assertEquals(b_int(0), b_int(0) % b_byte(-32))
    assertEquals(b_int(0), b_int(0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % b_byte(0))
    assertEquals(b_int(0), b_int(1) % p_byte(1))
    assertEquals(b_int(0), b_int(1) % p_byte(-1))
    assertEquals(b_int(1), b_int(1) % b_byte(23))
    assertEquals(b_int(1), b_int(1) % b_byte(-32))
    assertEquals(b_int(1), b_int(1) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(1), b_int(1) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % b_byte(0))
    assertEquals(b_int(0), b_int(-1) % p_byte(1))
    assertEquals(b_int(0), b_int(-1) % p_byte(-1))
    assertEquals(b_int(-1), b_int(-1) % b_byte(23))
    assertEquals(b_int(-1), b_int(-1) % b_byte(-32))
    assertEquals(b_int(-1), b_int(-1) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-1), b_int(-1) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % b_byte(0))
    assertEquals(b_int(0), b_int(23) % p_byte(1))
    assertEquals(b_int(0), b_int(23) % p_byte(-1))
    assertEquals(b_int(0), b_int(23) % b_byte(23))
    assertEquals(b_int(23), b_int(23) % b_byte(-32))
    assertEquals(b_int(23), b_int(23) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(23), b_int(23) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % b_byte(0))
    assertEquals(b_int(0), b_int(-32) % p_byte(1))
    assertEquals(b_int(0), b_int(-32) % p_byte(-1))
    assertEquals(b_int(-9), b_int(-32) % b_byte(23))
    assertEquals(b_int(0), b_int(-32) % b_byte(-32))
    assertEquals(b_int(-32), b_int(-32) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-32), b_int(-32) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % b_byte(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_byte(1))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_byte(-1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % b_byte(23))
    assertEquals(b_int(31), b_int(Integer.MAX_VALUE) % b_byte(-32))
    assertEquals(b_int(7), b_int(Integer.MAX_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(127), b_int(Integer.MAX_VALUE) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % b_byte(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_byte(1))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_byte(-1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % b_byte(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_byte(-32))
    assertEquals(b_int(-8), b_int(Integer.MIN_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % b_byte(0)))
  }

  function testIntegerPShortRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % p_short(0))
    assertEquals(b_int(0), b_int(0) % p_short(1))
    assertEquals(b_int(0), b_int(0) % p_short(-1))
    assertEquals(b_int(0), b_int(0) % p_short(23))
    assertEquals(b_int(0), b_int(0) % p_short(-32))
    assertEquals(b_int(0), b_int(0) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % p_short(0))
    assertEquals(b_int(0), b_int(1) % p_short(1))
    assertEquals(b_int(0), b_int(1) % p_short(-1))
    assertEquals(b_int(1), b_int(1) % p_short(23))
    assertEquals(b_int(1), b_int(1) % p_short(-32))
    assertEquals(b_int(1), b_int(1) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(1), b_int(1) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % p_short(0))
    assertEquals(b_int(0), b_int(-1) % p_short(1))
    assertEquals(b_int(0), b_int(-1) % p_short(-1))
    assertEquals(b_int(-1), b_int(-1) % p_short(23))
    assertEquals(b_int(-1), b_int(-1) % p_short(-32))
    assertEquals(b_int(-1), b_int(-1) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(-1), b_int(-1) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % p_short(0))
    assertEquals(b_int(0), b_int(23) % p_short(1))
    assertEquals(b_int(0), b_int(23) % p_short(-1))
    assertEquals(b_int(0), b_int(23) % p_short(23))
    assertEquals(b_int(23), b_int(23) % p_short(-32))
    assertEquals(b_int(23), b_int(23) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(23), b_int(23) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % p_short(0))
    assertEquals(b_int(0), b_int(-32) % p_short(1))
    assertEquals(b_int(0), b_int(-32) % p_short(-1))
    assertEquals(b_int(-9), b_int(-32) % p_short(23))
    assertEquals(b_int(0), b_int(-32) % p_short(-32))
    assertEquals(b_int(-32), b_int(-32) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(-32), b_int(-32) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % p_short(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_short(1))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_short(-1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % p_short(23))
    assertEquals(b_int(31), b_int(Integer.MAX_VALUE) % p_short(-32))
    assertEquals(b_int(1), b_int(Integer.MAX_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(32767), b_int(Integer.MAX_VALUE) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % p_short(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_short(1))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_short(-1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % p_short(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_short(-32))
    assertEquals(b_int(-2), b_int(Integer.MIN_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % p_short(0)))
  }

  function testIntegerShortRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % b_short(0))
    assertEquals(b_int(0), b_int(0) % b_short(1))
    assertEquals(b_int(0), b_int(0) % b_short(-1))
    assertEquals(b_int(0), b_int(0) % b_short(23))
    assertEquals(b_int(0), b_int(0) % b_short(-32))
    assertEquals(b_int(0), b_int(0) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % b_short(0))
    assertEquals(b_int(0), b_int(1) % b_short(1))
    assertEquals(b_int(0), b_int(1) % b_short(-1))
    assertEquals(b_int(1), b_int(1) % b_short(23))
    assertEquals(b_int(1), b_int(1) % b_short(-32))
    assertEquals(b_int(1), b_int(1) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(1), b_int(1) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % b_short(0))
    assertEquals(b_int(0), b_int(-1) % b_short(1))
    assertEquals(b_int(0), b_int(-1) % b_short(-1))
    assertEquals(b_int(-1), b_int(-1) % b_short(23))
    assertEquals(b_int(-1), b_int(-1) % b_short(-32))
    assertEquals(b_int(-1), b_int(-1) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(-1), b_int(-1) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % b_short(0))
    assertEquals(b_int(0), b_int(23) % b_short(1))
    assertEquals(b_int(0), b_int(23) % b_short(-1))
    assertEquals(b_int(0), b_int(23) % b_short(23))
    assertEquals(b_int(23), b_int(23) % b_short(-32))
    assertEquals(b_int(23), b_int(23) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(23), b_int(23) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % b_short(0))
    assertEquals(b_int(0), b_int(-32) % b_short(1))
    assertEquals(b_int(0), b_int(-32) % b_short(-1))
    assertEquals(b_int(-9), b_int(-32) % b_short(23))
    assertEquals(b_int(0), b_int(-32) % b_short(-32))
    assertEquals(b_int(-32), b_int(-32) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(-32), b_int(-32) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % b_short(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % b_short(1))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % b_short(-1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % b_short(23))
    assertEquals(b_int(31), b_int(Integer.MAX_VALUE) % b_short(-32))
    assertEquals(b_int(1), b_int(Integer.MAX_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(32767), b_int(Integer.MAX_VALUE) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % b_short(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_short(1))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_short(-1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % b_short(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_short(-32))
    assertEquals(b_int(-2), b_int(Integer.MIN_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % b_short(0)))
  }

  function testIntegerPCharRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % p_char(0))
    assertEquals(b_int(0), b_int(0) % p_char(1))
    assertEquals(b_int(0), b_int(0) % p_char(23))
    assertEquals(b_int(0), b_int(0) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % p_char(0))
    assertEquals(b_int(0), b_int(1) % p_char(1))
    assertEquals(b_int(1), b_int(1) % p_char(23))
    assertEquals(b_int(1), b_int(1) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % p_char(0))
    assertEquals(b_int(0), b_int(-1) % p_char(1))
    assertEquals(b_int(-1), b_int(-1) % p_char(23))
    assertEquals(b_int(-1), b_int(-1) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % p_char(0))
    assertEquals(b_int(0), b_int(23) % p_char(1))
    assertEquals(b_int(0), b_int(23) % p_char(23))
    assertEquals(b_int(23), b_int(23) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % p_char(0))
    assertEquals(b_int(0), b_int(-32) % p_char(1))
    assertEquals(b_int(-9), b_int(-32) % p_char(23))
    assertEquals(b_int(-32), b_int(-32) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % p_char(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_char(1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % p_char(23))
    assertEquals(b_int(32767), b_int(Integer.MAX_VALUE) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % p_char(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_char(1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % p_char(23))
    assertEquals(b_int(-32768), b_int(Integer.MIN_VALUE) % p_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % p_char(0)))
  }

  function testIntegerCharacterRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % b_char(0))
    assertEquals(b_int(0), b_int(0) % b_char(1))
    assertEquals(b_int(0), b_int(0) % b_char(23))
    assertEquals(b_int(0), b_int(0) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % b_char(0))
    assertEquals(b_int(0), b_int(1) % b_char(1))
    assertEquals(b_int(1), b_int(1) % b_char(23))
    assertEquals(b_int(1), b_int(1) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % b_char(0))
    assertEquals(b_int(0), b_int(-1) % b_char(1))
    assertEquals(b_int(-1), b_int(-1) % b_char(23))
    assertEquals(b_int(-1), b_int(-1) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % b_char(0))
    assertEquals(b_int(0), b_int(23) % b_char(1))
    assertEquals(b_int(0), b_int(23) % b_char(23))
    assertEquals(b_int(23), b_int(23) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % b_char(0))
    assertEquals(b_int(0), b_int(-32) % b_char(1))
    assertEquals(b_int(-9), b_int(-32) % b_char(23))
    assertEquals(b_int(-32), b_int(-32) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % b_char(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % b_char(1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % b_char(23))
    assertEquals(b_int(32767), b_int(Integer.MAX_VALUE) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % b_char(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_char(1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % b_char(23))
    assertEquals(b_int(-32768), b_int(Integer.MIN_VALUE) % b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % b_char(0)))
  }

  function testIntegerPIntRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % p_int(0))
    assertEquals(b_int(0), b_int(0) % p_int(1))
    assertEquals(b_int(0), b_int(0) % p_int(-1))
    assertEquals(b_int(0), b_int(0) % p_int(23))
    assertEquals(b_int(0), b_int(0) % p_int(-32))
    assertEquals(b_int(0), b_int(0) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % p_int(0))
    assertEquals(b_int(0), b_int(1) % p_int(1))
    assertEquals(b_int(0), b_int(1) % p_int(-1))
    assertEquals(b_int(1), b_int(1) % p_int(23))
    assertEquals(b_int(1), b_int(1) % p_int(-32))
    assertEquals(b_int(1), b_int(1) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(1), b_int(1) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % p_int(0))
    assertEquals(b_int(0), b_int(-1) % p_int(1))
    assertEquals(b_int(0), b_int(-1) % p_int(-1))
    assertEquals(b_int(-1), b_int(-1) % p_int(23))
    assertEquals(b_int(-1), b_int(-1) % p_int(-32))
    assertEquals(b_int(-1), b_int(-1) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(-1), b_int(-1) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % p_int(0))
    assertEquals(b_int(0), b_int(23) % p_int(1))
    assertEquals(b_int(0), b_int(23) % p_int(-1))
    assertEquals(b_int(0), b_int(23) % p_int(23))
    assertEquals(b_int(23), b_int(23) % p_int(-32))
    assertEquals(b_int(23), b_int(23) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(23), b_int(23) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % p_int(0))
    assertEquals(b_int(0), b_int(-32) % p_int(1))
    assertEquals(b_int(0), b_int(-32) % p_int(-1))
    assertEquals(b_int(-9), b_int(-32) % p_int(23))
    assertEquals(b_int(0), b_int(-32) % p_int(-32))
    assertEquals(b_int(-32), b_int(-32) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(-32), b_int(-32) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % p_int(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_int(1))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_int(-1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % p_int(23))
    assertEquals(b_int(31), b_int(Integer.MAX_VALUE) % p_int(-32))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % p_int(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_int(1))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_int(-1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % p_int(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_int(-32))
    assertEquals(b_int(-1), b_int(Integer.MIN_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % p_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % p_int(0)))
  }

  function testIntegerIntegerRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % b_int(0))
    assertEquals(b_int(0), b_int(0) % b_int(1))
    assertEquals(b_int(0), b_int(0) % b_int(-1))
    assertEquals(b_int(0), b_int(0) % b_int(23))
    assertEquals(b_int(0), b_int(0) % b_int(-32))
    assertEquals(b_int(0), b_int(0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(0) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % b_int(0))
    assertEquals(b_int(0), b_int(1) % b_int(1))
    assertEquals(b_int(0), b_int(1) % b_int(-1))
    assertEquals(b_int(1), b_int(1) % b_int(23))
    assertEquals(b_int(1), b_int(1) % b_int(-32))
    assertEquals(b_int(1), b_int(1) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(1), b_int(1) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % b_int(0))
    assertEquals(b_int(0), b_int(-1) % b_int(1))
    assertEquals(b_int(0), b_int(-1) % b_int(-1))
    assertEquals(b_int(-1), b_int(-1) % b_int(23))
    assertEquals(b_int(-1), b_int(-1) % b_int(-32))
    assertEquals(b_int(-1), b_int(-1) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-1), b_int(-1) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % b_int(0))
    assertEquals(b_int(0), b_int(23) % b_int(1))
    assertEquals(b_int(0), b_int(23) % b_int(-1))
    assertEquals(b_int(0), b_int(23) % b_int(23))
    assertEquals(b_int(23), b_int(23) % b_int(-32))
    assertEquals(b_int(23), b_int(23) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(23), b_int(23) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % b_int(0))
    assertEquals(b_int(0), b_int(-32) % b_int(1))
    assertEquals(b_int(0), b_int(-32) % b_int(-1))
    assertEquals(b_int(-9), b_int(-32) % b_int(23))
    assertEquals(b_int(0), b_int(-32) % b_int(-32))
    assertEquals(b_int(-32), b_int(-32) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-32), b_int(-32) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % b_int(0))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % b_int(1))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % b_int(-1))
    assertEquals(b_int(5), b_int(Integer.MAX_VALUE) % b_int(23))
    assertEquals(b_int(31), b_int(Integer.MAX_VALUE) % b_int(-32))
    assertEquals(b_int(0), b_int(Integer.MAX_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(2147483647), b_int(Integer.MAX_VALUE) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % b_int(0))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_int(1))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_int(-1))
    assertEquals(b_int(-6), b_int(Integer.MIN_VALUE) % b_int(23))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_int(-32))
    assertEquals(b_int(-1), b_int(Integer.MIN_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), b_int(Integer.MIN_VALUE) % b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(b_int(0) % b_int(0)))
  }

  function testIntegerPLongRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % p_long(0))
    assertEquals(b_long(0), b_int(0) % p_long(1))
    assertEquals(b_long(0), b_int(0) % p_long(-1))
    assertEquals(b_long(0), b_int(0) % p_long(23))
    assertEquals(b_long(0), b_int(0) % p_long(-32))
    assertEquals(b_long(0), b_int(0) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(0) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % p_long(0))
    assertEquals(b_long(0), b_int(1) % p_long(1))
    assertEquals(b_long(0), b_int(1) % p_long(-1))
    assertEquals(b_long(1), b_int(1) % p_long(23))
    assertEquals(b_long(1), b_int(1) % p_long(-32))
    assertEquals(b_long(1), b_int(1) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(1), b_int(1) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % p_long(0))
    assertEquals(b_long(0), b_int(-1) % p_long(1))
    assertEquals(b_long(0), b_int(-1) % p_long(-1))
    assertEquals(b_long(-1), b_int(-1) % p_long(23))
    assertEquals(b_long(-1), b_int(-1) % p_long(-32))
    assertEquals(b_long(-1), b_int(-1) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(-1), b_int(-1) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % p_long(0))
    assertEquals(b_long(0), b_int(23) % p_long(1))
    assertEquals(b_long(0), b_int(23) % p_long(-1))
    assertEquals(b_long(0), b_int(23) % p_long(23))
    assertEquals(b_long(23), b_int(23) % p_long(-32))
    assertEquals(b_long(23), b_int(23) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(23), b_int(23) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % p_long(0))
    assertEquals(b_long(0), b_int(-32) % p_long(1))
    assertEquals(b_long(0), b_int(-32) % p_long(-1))
    assertEquals(b_long(-9), b_int(-32) % p_long(23))
    assertEquals(b_long(0), b_int(-32) % p_long(-32))
    assertEquals(b_long(-32), b_int(-32) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(-32), b_int(-32) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % p_long(0))
    assertEquals(b_long(0), b_int(Integer.MAX_VALUE) % p_long(1))
    assertEquals(b_long(0), b_int(Integer.MAX_VALUE) % p_long(-1))
    assertEquals(b_long(5), b_int(Integer.MAX_VALUE) % p_long(23))
    assertEquals(b_long(31), b_int(Integer.MAX_VALUE) % p_long(-32))
    assertEquals(b_long(2147483647), b_int(Integer.MAX_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(2147483647), b_int(Integer.MAX_VALUE) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % p_long(0))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) % p_long(1))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) % p_long(-1))
    assertEquals(b_long(-6), b_int(Integer.MIN_VALUE) % p_long(23))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) % p_long(-32))
    assertEquals(b_long(-2147483648), b_int(Integer.MIN_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(b_long(-2147483648), b_int(Integer.MIN_VALUE) % p_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_int(0) % p_long(0)))
  }

  function testIntegerLongRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> b_int(0) % b_long(0))
    assertEquals(b_long(0), b_int(0) % b_long(1))
    assertEquals(b_long(0), b_int(0) % b_long(-1))
    assertEquals(b_long(0), b_int(0) % b_long(23))
    assertEquals(b_long(0), b_int(0) % b_long(-32))
    assertEquals(b_long(0), b_int(0) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), b_int(0) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(1) % b_long(0))
    assertEquals(b_long(0), b_int(1) % b_long(1))
    assertEquals(b_long(0), b_int(1) % b_long(-1))
    assertEquals(b_long(1), b_int(1) % b_long(23))
    assertEquals(b_long(1), b_int(1) % b_long(-32))
    assertEquals(b_long(1), b_int(1) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(1), b_int(1) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-1) % b_long(0))
    assertEquals(b_long(0), b_int(-1) % b_long(1))
    assertEquals(b_long(0), b_int(-1) % b_long(-1))
    assertEquals(b_long(-1), b_int(-1) % b_long(23))
    assertEquals(b_long(-1), b_int(-1) % b_long(-32))
    assertEquals(b_long(-1), b_int(-1) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(-1), b_int(-1) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(23) % b_long(0))
    assertEquals(b_long(0), b_int(23) % b_long(1))
    assertEquals(b_long(0), b_int(23) % b_long(-1))
    assertEquals(b_long(0), b_int(23) % b_long(23))
    assertEquals(b_long(23), b_int(23) % b_long(-32))
    assertEquals(b_long(23), b_int(23) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(23), b_int(23) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(-32) % b_long(0))
    assertEquals(b_long(0), b_int(-32) % b_long(1))
    assertEquals(b_long(0), b_int(-32) % b_long(-1))
    assertEquals(b_long(-9), b_int(-32) % b_long(23))
    assertEquals(b_long(0), b_int(-32) % b_long(-32))
    assertEquals(b_long(-32), b_int(-32) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(-32), b_int(-32) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MAX_VALUE) % b_long(0))
    assertEquals(b_long(0), b_int(Integer.MAX_VALUE) % b_long(1))
    assertEquals(b_long(0), b_int(Integer.MAX_VALUE) % b_long(-1))
    assertEquals(b_long(5), b_int(Integer.MAX_VALUE) % b_long(23))
    assertEquals(b_long(31), b_int(Integer.MAX_VALUE) % b_long(-32))
    assertEquals(b_long(2147483647), b_int(Integer.MAX_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(2147483647), b_int(Integer.MAX_VALUE) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> b_int(Integer.MIN_VALUE) % b_long(0))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) % b_long(1))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) % b_long(-1))
    assertEquals(b_long(-6), b_int(Integer.MIN_VALUE) % b_long(23))
    assertEquals(b_long(0), b_int(Integer.MIN_VALUE) % b_long(-32))
    assertEquals(b_long(-2147483648), b_int(Integer.MIN_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(-2147483648), b_int(Integer.MIN_VALUE) % b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(b_int(0) % b_long(0)))
  }

  function testIntegerPFloatRemainder() {
    assertEquals(b_float(Float.NaN_), b_int(0) % p_float(0.0))
    assertEquals(b_float(0.0), b_int(0) % p_float(1.0))
    assertEquals(b_float(0.0), b_int(0) % p_float(-1.0))
    assertEquals(b_float(0.0), b_int(0) % p_float(23.0))
    assertEquals(b_float(0.0), b_int(0) % p_float(23.123))
    assertEquals(b_float(0.0), b_int(0) % p_float(-32.0))
    assertEquals(b_float(0.0), b_int(0) % p_float(-32.456))
    assertEquals(b_float(0.0), b_int(0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_int(0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(0) % p_float(Float.NaN_))
    assertEquals(b_float(0.0), b_int(0) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(0) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(1) % p_float(0.0))
    assertEquals(b_float(0.0), b_int(1) % p_float(1.0))
    assertEquals(b_float(0.0), b_int(1) % p_float(-1.0))
    assertEquals(b_float(1.0), b_int(1) % p_float(23.0))
    assertEquals(b_float(1.0), b_int(1) % p_float(23.123))
    assertEquals(b_float(1.0), b_int(1) % p_float(-32.0))
    assertEquals(b_float(1.0), b_int(1) % p_float(-32.456))
    assertEquals(b_float(1.0), b_int(1) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(1.0), b_int(1) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(1) % p_float(Float.NaN_))
    assertEquals(b_float(1.0), b_int(1) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(1) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(-1) % p_float(0.0))
    assertEquals(b_float(-0.0), b_int(-1) % p_float(1.0))
    assertEquals(b_float(-0.0), b_int(-1) % p_float(-1.0))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(23.0))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(23.123))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(-32.0))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(-32.456))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-1) % p_float(Float.NaN_))
    assertEquals(b_float(-1.0), b_int(-1) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_int(-1) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(23) % p_float(0.0))
    assertEquals(b_float(0.0), b_int(23) % p_float(1.0))
    assertEquals(b_float(0.0), b_int(23) % p_float(-1.0))
    assertEquals(b_float(0.0), b_int(23) % p_float(23.0))
    assertEquals(b_float(23.0), b_int(23) % p_float(23.123))
    assertEquals(b_float(23.0), b_int(23) % p_float(-32.0))
    assertEquals(b_float(23.0), b_int(23) % p_float(-32.456))
    assertEquals(b_float(23.0), b_int(23) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.0), b_int(23) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(23) % p_float(Float.NaN_))
    assertEquals(b_float(23.0), b_int(23) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(23) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(-32) % p_float(0.0))
    assertEquals(b_float(-0.0), b_int(-32) % p_float(1.0))
    assertEquals(b_float(-0.0), b_int(-32) % p_float(-1.0))
    assertEquals(b_float(-9.0), b_int(-32) % p_float(23.0))
    assertEquals(b_float(-8.877001), b_int(-32) % p_float(23.123))
    assertEquals(b_float(-0.0), b_int(-32) % p_float(-32.0))
    assertEquals(b_float(-32.0), b_int(-32) % p_float(-32.456))
    assertEquals(b_float(-32.0), b_int(-32) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.0), b_int(-32) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-32) % p_float(Float.NaN_))
    assertEquals(b_float(-32.0), b_int(-32) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_int(-32) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(Integer.MAX_VALUE) % p_float(0.0))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % p_float(1.0))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % p_float(-1.0))
    assertEquals(b_float(6.0), b_int(Integer.MAX_VALUE) % p_float(23.0))
    assertEquals(b_float(4.3682117), b_int(Integer.MAX_VALUE) % p_float(23.123))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % p_float(-32.0))
    assertEquals(b_float(29.472511), b_int(Integer.MAX_VALUE) % p_float(-32.456))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MAX_VALUE) % p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(Integer.MIN_VALUE) % p_float(0.0))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % p_float(1.0))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % p_float(-1.0))
    assertEquals(b_float(-6.0), b_int(Integer.MIN_VALUE) % p_float(23.0))
    assertEquals(b_float(-4.3682117), b_int(Integer.MIN_VALUE) % p_float(23.123))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % p_float(-32.0))
    assertEquals(b_float(-29.472511), b_int(Integer.MIN_VALUE) % p_float(-32.456))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MIN_VALUE) % p_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_int(0) % p_float(0.0)))
  }

  function testIntegerFloatRemainder() {
    assertEquals(b_float(Float.NaN_), b_int(0) % b_float(0.0))
    assertEquals(b_float(0.0), b_int(0) % b_float(1.0))
    assertEquals(b_float(0.0), b_int(0) % b_float(-1.0))
    assertEquals(b_float(0.0), b_int(0) % b_float(23.0))
    assertEquals(b_float(0.0), b_int(0) % b_float(23.123))
    assertEquals(b_float(0.0), b_int(0) % b_float(-32.0))
    assertEquals(b_float(0.0), b_int(0) % b_float(-32.456))
    assertEquals(b_float(0.0), b_int(0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), b_int(0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(0) % b_float(Float.NaN_))
    assertEquals(b_float(0.0), b_int(0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(1) % b_float(0.0))
    assertEquals(b_float(0.0), b_int(1) % b_float(1.0))
    assertEquals(b_float(0.0), b_int(1) % b_float(-1.0))
    assertEquals(b_float(1.0), b_int(1) % b_float(23.0))
    assertEquals(b_float(1.0), b_int(1) % b_float(23.123))
    assertEquals(b_float(1.0), b_int(1) % b_float(-32.0))
    assertEquals(b_float(1.0), b_int(1) % b_float(-32.456))
    assertEquals(b_float(1.0), b_int(1) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(1.0), b_int(1) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(1) % b_float(Float.NaN_))
    assertEquals(b_float(1.0), b_int(1) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(1) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(-1) % b_float(0.0))
    assertEquals(b_float(-0.0), b_int(-1) % b_float(1.0))
    assertEquals(b_float(-0.0), b_int(-1) % b_float(-1.0))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(23.0))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(23.123))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(-32.0))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(-32.456))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-1) % b_float(Float.NaN_))
    assertEquals(b_float(-1.0), b_int(-1) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_int(-1) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(23) % b_float(0.0))
    assertEquals(b_float(0.0), b_int(23) % b_float(1.0))
    assertEquals(b_float(0.0), b_int(23) % b_float(-1.0))
    assertEquals(b_float(0.0), b_int(23) % b_float(23.0))
    assertEquals(b_float(23.0), b_int(23) % b_float(23.123))
    assertEquals(b_float(23.0), b_int(23) % b_float(-32.0))
    assertEquals(b_float(23.0), b_int(23) % b_float(-32.456))
    assertEquals(b_float(23.0), b_int(23) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.0), b_int(23) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(23) % b_float(Float.NaN_))
    assertEquals(b_float(23.0), b_int(23) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(23) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(-32) % b_float(0.0))
    assertEquals(b_float(-0.0), b_int(-32) % b_float(1.0))
    assertEquals(b_float(-0.0), b_int(-32) % b_float(-1.0))
    assertEquals(b_float(-9.0), b_int(-32) % b_float(23.0))
    assertEquals(b_float(-8.877001), b_int(-32) % b_float(23.123))
    assertEquals(b_float(-0.0), b_int(-32) % b_float(-32.0))
    assertEquals(b_float(-32.0), b_int(-32) % b_float(-32.456))
    assertEquals(b_float(-32.0), b_int(-32) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.0), b_int(-32) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(-32) % b_float(Float.NaN_))
    assertEquals(b_float(-32.0), b_int(-32) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_int(-32) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(Integer.MAX_VALUE) % b_float(0.0))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % b_float(1.0))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % b_float(-1.0))
    assertEquals(b_float(6.0), b_int(Integer.MAX_VALUE) % b_float(23.0))
    assertEquals(b_float(4.3682117), b_int(Integer.MAX_VALUE) % b_float(23.123))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % b_float(-32.0))
    assertEquals(b_float(29.472511), b_int(Integer.MAX_VALUE) % b_float(-32.456))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MAX_VALUE) % b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("2.14748365E9")), b_int(Integer.MAX_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), b_int(Integer.MAX_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), b_int(Integer.MIN_VALUE) % b_float(0.0))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % b_float(1.0))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % b_float(-1.0))
    assertEquals(b_float(-6.0), b_int(Integer.MIN_VALUE) % b_float(23.0))
    assertEquals(b_float(-4.3682117), b_int(Integer.MIN_VALUE) % b_float(23.123))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % b_float(-32.0))
    assertEquals(b_float(-29.472511), b_int(Integer.MIN_VALUE) % b_float(-32.456))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), b_int(Integer.MIN_VALUE) % b_float(Float.NaN_))
    assertEquals(b_float(Float.parseFloat("-2.14748365E9")), b_int(Integer.MIN_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), b_int(Integer.MIN_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(b_int(0) % b_float(0.0)))
  }

  function testIntegerPDoubleRemainder() {
    assertEquals(b_double(Double.NaN_), b_int(0) % p_double(0.0))
    assertEquals(b_double(0.0), b_int(0) % p_double(1.0))
    assertEquals(b_double(0.0), b_int(0) % p_double(-1.0))
    assertEquals(b_double(0.0), b_int(0) % p_double(23.0))
    assertEquals(b_double(0.0), b_int(0) % p_double(23.123))
    assertEquals(b_double(0.0), b_int(0) % p_double(-32.0))
    assertEquals(b_double(0.0), b_int(0) % p_double(-32.456))
    assertEquals(b_double(0.0), b_int(0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_int(0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(0) % p_double(Double.NaN_))
    assertEquals(b_double(0.0), b_int(0) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(0) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(1) % p_double(0.0))
    assertEquals(b_double(0.0), b_int(1) % p_double(1.0))
    assertEquals(b_double(0.0), b_int(1) % p_double(-1.0))
    assertEquals(b_double(1.0), b_int(1) % p_double(23.0))
    assertEquals(b_double(1.0), b_int(1) % p_double(23.123))
    assertEquals(b_double(1.0), b_int(1) % p_double(-32.0))
    assertEquals(b_double(1.0), b_int(1) % p_double(-32.456))
    assertEquals(b_double(1.0), b_int(1) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), b_int(1) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(1) % p_double(Double.NaN_))
    assertEquals(b_double(1.0), b_int(1) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(1) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(-1) % p_double(0.0))
    assertEquals(b_double(-0.0), b_int(-1) % p_double(1.0))
    assertEquals(b_double(-0.0), b_int(-1) % p_double(-1.0))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(23.0))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(23.123))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(-32.0))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(-32.456))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-1) % p_double(Double.NaN_))
    assertEquals(b_double(-1.0), b_int(-1) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_int(-1) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(23) % p_double(0.0))
    assertEquals(b_double(0.0), b_int(23) % p_double(1.0))
    assertEquals(b_double(0.0), b_int(23) % p_double(-1.0))
    assertEquals(b_double(0.0), b_int(23) % p_double(23.0))
    assertEquals(b_double(23.0), b_int(23) % p_double(23.123))
    assertEquals(b_double(23.0), b_int(23) % p_double(-32.0))
    assertEquals(b_double(23.0), b_int(23) % p_double(-32.456))
    assertEquals(b_double(23.0), b_int(23) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), b_int(23) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(23) % p_double(Double.NaN_))
    assertEquals(b_double(23.0), b_int(23) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(23) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(-32) % p_double(0.0))
    assertEquals(b_double(-0.0), b_int(-32) % p_double(1.0))
    assertEquals(b_double(-0.0), b_int(-32) % p_double(-1.0))
    assertEquals(b_double(-9.0), b_int(-32) % p_double(23.0))
    assertEquals(b_double(-8.876999999999999), b_int(-32) % p_double(23.123))
    assertEquals(b_double(-0.0), b_int(-32) % p_double(-32.0))
    assertEquals(b_double(-32.0), b_int(-32) % p_double(-32.456))
    assertEquals(b_double(-32.0), b_int(-32) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), b_int(-32) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-32) % p_double(Double.NaN_))
    assertEquals(b_double(-32.0), b_int(-32) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_int(-32) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(Integer.MAX_VALUE) % p_double(0.0))
    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) % p_double(1.0))
    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) % p_double(-1.0))
    assertEquals(b_double(5.0), b_int(Integer.MAX_VALUE) % p_double(23.0))
    assertEquals(b_double(20.75299989705613), b_int(Integer.MAX_VALUE) % p_double(23.123))
    assertEquals(b_double(31.0), b_int(Integer.MAX_VALUE) % p_double(-32.0))
    assertEquals(b_double(15.911999796900517), b_int(Integer.MAX_VALUE) % p_double(-32.456))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MAX_VALUE) % p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(Integer.MIN_VALUE) % p_double(0.0))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % p_double(1.0))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % p_double(-1.0))
    assertEquals(b_double(-6.0), b_int(Integer.MIN_VALUE) % p_double(23.0))
    assertEquals(b_double(-21.75299989705613), b_int(Integer.MIN_VALUE) % p_double(23.123))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % p_double(-32.0))
    assertEquals(b_double(-16.911999796900517), b_int(Integer.MIN_VALUE) % p_double(-32.456))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MIN_VALUE) % p_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_int(0) % p_double(0.0)))
  }

  function testIntegerDoubleRemainder() {
    assertEquals(b_double(Double.NaN_), b_int(0) % b_double(0.0))
    assertEquals(b_double(0.0), b_int(0) % b_double(1.0))
    assertEquals(b_double(0.0), b_int(0) % b_double(-1.0))
    assertEquals(b_double(0.0), b_int(0) % b_double(23.0))
    assertEquals(b_double(0.0), b_int(0) % b_double(23.123))
    assertEquals(b_double(0.0), b_int(0) % b_double(-32.0))
    assertEquals(b_double(0.0), b_int(0) % b_double(-32.456))
    assertEquals(b_double(0.0), b_int(0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), b_int(0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(0) % b_double(Double.NaN_))
    assertEquals(b_double(0.0), b_int(0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(1) % b_double(0.0))
    assertEquals(b_double(0.0), b_int(1) % b_double(1.0))
    assertEquals(b_double(0.0), b_int(1) % b_double(-1.0))
    assertEquals(b_double(1.0), b_int(1) % b_double(23.0))
    assertEquals(b_double(1.0), b_int(1) % b_double(23.123))
    assertEquals(b_double(1.0), b_int(1) % b_double(-32.0))
    assertEquals(b_double(1.0), b_int(1) % b_double(-32.456))
    assertEquals(b_double(1.0), b_int(1) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), b_int(1) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(1) % b_double(Double.NaN_))
    assertEquals(b_double(1.0), b_int(1) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(1) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(-1) % b_double(0.0))
    assertEquals(b_double(-0.0), b_int(-1) % b_double(1.0))
    assertEquals(b_double(-0.0), b_int(-1) % b_double(-1.0))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(23.0))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(23.123))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(-32.0))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(-32.456))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-1) % b_double(Double.NaN_))
    assertEquals(b_double(-1.0), b_int(-1) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_int(-1) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(23) % b_double(0.0))
    assertEquals(b_double(0.0), b_int(23) % b_double(1.0))
    assertEquals(b_double(0.0), b_int(23) % b_double(-1.0))
    assertEquals(b_double(0.0), b_int(23) % b_double(23.0))
    assertEquals(b_double(23.0), b_int(23) % b_double(23.123))
    assertEquals(b_double(23.0), b_int(23) % b_double(-32.0))
    assertEquals(b_double(23.0), b_int(23) % b_double(-32.456))
    assertEquals(b_double(23.0), b_int(23) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), b_int(23) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(23) % b_double(Double.NaN_))
    assertEquals(b_double(23.0), b_int(23) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(23) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(-32) % b_double(0.0))
    assertEquals(b_double(-0.0), b_int(-32) % b_double(1.0))
    assertEquals(b_double(-0.0), b_int(-32) % b_double(-1.0))
    assertEquals(b_double(-9.0), b_int(-32) % b_double(23.0))
    assertEquals(b_double(-8.876999999999999), b_int(-32) % b_double(23.123))
    assertEquals(b_double(-0.0), b_int(-32) % b_double(-32.0))
    assertEquals(b_double(-32.0), b_int(-32) % b_double(-32.456))
    assertEquals(b_double(-32.0), b_int(-32) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), b_int(-32) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(-32) % b_double(Double.NaN_))
    assertEquals(b_double(-32.0), b_int(-32) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_int(-32) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(Integer.MAX_VALUE) % b_double(0.0))
    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) % b_double(1.0))
    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) % b_double(-1.0))
    assertEquals(b_double(5.0), b_int(Integer.MAX_VALUE) % b_double(23.0))
    assertEquals(b_double(20.75299989705613), b_int(Integer.MAX_VALUE) % b_double(23.123))
    assertEquals(b_double(31.0), b_int(Integer.MAX_VALUE) % b_double(-32.0))
    assertEquals(b_double(15.911999796900517), b_int(Integer.MAX_VALUE) % b_double(-32.456))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MAX_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("2.147483647E9")), b_int(Integer.MAX_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), b_int(Integer.MAX_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), b_int(Integer.MIN_VALUE) % b_double(0.0))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % b_double(1.0))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % b_double(-1.0))
    assertEquals(b_double(-6.0), b_int(Integer.MIN_VALUE) % b_double(23.0))
    assertEquals(b_double(-21.75299989705613), b_int(Integer.MIN_VALUE) % b_double(23.123))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % b_double(-32.0))
    assertEquals(b_double(-16.911999796900517), b_int(Integer.MIN_VALUE) % b_double(-32.456))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), b_int(Integer.MIN_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(Double.parseDouble("-2.147483648E9")), b_int(Integer.MIN_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), b_int(Integer.MIN_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(b_int(0) % b_double(0.0)))
  }

  function testIntegerBigIntegerRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(0) % big_int("0"))
    assertEquals(big_int("0"), b_int(0) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(0) % big_int("-1"))
    assertEquals(big_int("0"), b_int(0) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(0) % big_int("-32"))
    assertEquals(big_int("0"), b_int(0) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(1) % big_int("0"))
    assertEquals(big_int("0"), b_int(1) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(1) % big_int("-1"))
    assertEquals(big_int("1"), b_int(1) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(1) % big_int("-32"))
    assertEquals(big_int("1"), b_int(1) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(1) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-1) % big_int("0"))
    assertEquals(big_int("0"), b_int(-1) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-1) % big_int("-1"))
    assertEquals(big_int("22"), b_int(-1) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-1) % big_int("-32"))
    assertEquals(big_int("123456789012345678901234567889"), b_int(-1) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-1) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(23) % big_int("0"))
    assertEquals(big_int("0"), b_int(23) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(23) % big_int("-1"))
    assertEquals(big_int("0"), b_int(23) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(23) % big_int("-32"))
    assertEquals(big_int("23"), b_int(23) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(23) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-32) % big_int("0"))
    assertEquals(big_int("0"), b_int(-32) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-32) % big_int("-1"))
    assertEquals(big_int("14"), b_int(-32) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-32) % big_int("-32"))
    assertEquals(big_int("123456789012345678901234567858"), b_int(-32) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(-32) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MAX_VALUE) % big_int("0"))
    assertEquals(big_int("0"), b_int(Integer.MAX_VALUE) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MAX_VALUE) % big_int("-1"))
    assertEquals(big_int("5"), b_int(Integer.MAX_VALUE) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MAX_VALUE) % big_int("-32"))
    assertEquals(big_int("2147483647"), b_int(Integer.MAX_VALUE) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MAX_VALUE) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MIN_VALUE) % big_int("0"))
    assertEquals(big_int("0"), b_int(Integer.MIN_VALUE) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MIN_VALUE) % big_int("-1"))
    assertEquals(big_int("17"), b_int(Integer.MIN_VALUE) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MIN_VALUE) % big_int("-32"))
    assertEquals(big_int("123456789012345678899087084242"), b_int(Integer.MIN_VALUE) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> b_int(Integer.MIN_VALUE) % big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(b_int(0) % big_int("0")))
  }

  function testIntegerBigDecimalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> b_int(0) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("-1"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("23"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("23.123"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("-32"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("-32.456"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0"), b_int(0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_int(1) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(1) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(1) % big_decimal("-1"))
    assertEquals(big_decimal("1"), b_int(1) % big_decimal("23"))
    assertEquals(big_decimal("1"), b_int(1) % big_decimal("23.123"))
    assertEquals(big_decimal("1"), b_int(1) % big_decimal("-32"))
    assertEquals(big_decimal("1"), b_int(1) % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), b_int(1) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), b_int(1) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_int(-1) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(-1) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(-1) % big_decimal("-1"))
    assertEquals(big_decimal("1"), b_int(-1) % big_decimal("23"))
    assertEquals(big_decimal("1"), b_int(-1) % big_decimal("23.123"))
    assertEquals(big_decimal("1"), b_int(-1) % big_decimal("-32"))
    assertEquals(big_decimal("1"), b_int(-1) % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), b_int(-1) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), b_int(-1) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_int(23) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(23) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(23) % big_decimal("-1"))
    assertEquals(big_decimal("0"), b_int(23) % big_decimal("23"))
    assertEquals(big_decimal("23"), b_int(23) % big_decimal("23.123"))
    assertEquals(big_decimal("23"), b_int(23) % big_decimal("-32"))
    assertEquals(big_decimal("23"), b_int(23) % big_decimal("-32.456"))
    assertEquals(big_decimal("23"), b_int(23) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23"), b_int(23) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_int(-32) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(-32) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(-32) % big_decimal("-1"))
    assertEquals(big_decimal("9"), b_int(-32) % big_decimal("23"))
    assertEquals(big_decimal("8.877"), b_int(-32) % big_decimal("23.123"))
    assertEquals(big_decimal("0"), b_int(-32) % big_decimal("-32"))
    assertEquals(big_decimal("32"), b_int(-32) % big_decimal("-32.456"))
    assertEquals(big_decimal("32"), b_int(-32) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32"), b_int(-32) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_int(Integer.MAX_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(Integer.MAX_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(Integer.MAX_VALUE) % big_decimal("-1"))
    assertEquals(big_decimal("5"), b_int(Integer.MAX_VALUE) % big_decimal("23"))
    assertEquals(big_decimal("20.753"), b_int(Integer.MAX_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("31"), b_int(Integer.MAX_VALUE) % big_decimal("-32"))
    assertEquals(big_decimal("15.912"), b_int(Integer.MAX_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("2147483647"), b_int(Integer.MAX_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2147483647"), b_int(Integer.MAX_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> b_int(Integer.MIN_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("0"), b_int(Integer.MIN_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("0"), b_int(Integer.MIN_VALUE) % big_decimal("-1"))
    assertEquals(big_decimal("6"), b_int(Integer.MIN_VALUE) % big_decimal("23"))
    assertEquals(big_decimal("21.753"), b_int(Integer.MIN_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("0"), b_int(Integer.MIN_VALUE) % big_decimal("-32"))
    assertEquals(big_decimal("16.912"), b_int(Integer.MIN_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("2147483648"), b_int(Integer.MIN_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("2147483648"), b_int(Integer.MIN_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(b_int(0) % big_decimal("0")))
  }

}

