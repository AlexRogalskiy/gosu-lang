package gw.spec.core.expressions.arithmetic.remainder
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Remainder_BigIntegerTest extends ArithmeticTestBase {

  function testBigIntegerPByteRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_byte(0))
    assertEquals(big_int("0"), big_int("0") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_byte(-1))
    assertEquals(big_int("0"), big_int("0") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_byte(-32))
    assertEquals(big_int("0"), big_int("0") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_byte(0))
    assertEquals(big_int("0"), big_int("1") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_byte(-1))
    assertEquals(big_int("1"), big_int("1") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_byte(-32))
    assertEquals(big_int("1"), big_int("1") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_byte(0))
    assertEquals(big_int("0"), big_int("-1") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_byte(-1))
    assertEquals(big_int("22"), big_int("-1") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_byte(-32))
    assertEquals(big_int("126"), big_int("-1") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_byte(0))
    assertEquals(big_int("0"), big_int("23") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_byte(-1))
    assertEquals(big_int("0"), big_int("23") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_byte(-32))
    assertEquals(big_int("23"), big_int("23") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_byte(0))
    assertEquals(big_int("0"), big_int("-32") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_byte(-1))
    assertEquals(big_int("14"), big_int("-32") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_byte(-32))
    assertEquals(big_int("95"), big_int("-32") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_byte(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_byte(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_byte(-32))
    assertEquals(big_int("100"), big_int("123456789012345678901234567890") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_byte(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_byte(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % p_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_byte(-32))
    assertEquals(big_int("27"), big_int("-123456789012345678901234567890") % p_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_byte(Byte.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % p_byte(0)))
  }

  function testBigIntegerByteRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_byte(0))
    assertEquals(big_int("0"), big_int("0") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_byte(-1))
    assertEquals(big_int("0"), big_int("0") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_byte(-32))
    assertEquals(big_int("0"), big_int("0") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_byte(0))
    assertEquals(big_int("0"), big_int("1") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_byte(-1))
    assertEquals(big_int("1"), big_int("1") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_byte(-32))
    assertEquals(big_int("1"), big_int("1") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_byte(0))
    assertEquals(big_int("0"), big_int("-1") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_byte(-1))
    assertEquals(big_int("22"), big_int("-1") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_byte(-32))
    assertEquals(big_int("126"), big_int("-1") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_byte(0))
    assertEquals(big_int("0"), big_int("23") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_byte(-1))
    assertEquals(big_int("0"), big_int("23") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_byte(-32))
    assertEquals(big_int("23"), big_int("23") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_byte(0))
    assertEquals(big_int("0"), big_int("-32") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_byte(-1))
    assertEquals(big_int("14"), big_int("-32") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_byte(-32))
    assertEquals(big_int("95"), big_int("-32") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_byte(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_byte(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_byte(-32))
    assertEquals(big_int("100"), big_int("123456789012345678901234567890") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_byte(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % p_byte(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_byte(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % b_byte(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_byte(-32))
    assertEquals(big_int("27"), big_int("-123456789012345678901234567890") % b_byte(Byte.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_byte(Byte.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % b_byte(0)))
  }

  function testBigIntegerPShortRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_short(0))
    assertEquals(big_int("0"), big_int("0") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_short(-1))
    assertEquals(big_int("0"), big_int("0") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_short(-32))
    assertEquals(big_int("0"), big_int("0") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_short(0))
    assertEquals(big_int("0"), big_int("1") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_short(-1))
    assertEquals(big_int("1"), big_int("1") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_short(-32))
    assertEquals(big_int("1"), big_int("1") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_short(0))
    assertEquals(big_int("0"), big_int("-1") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_short(-1))
    assertEquals(big_int("22"), big_int("-1") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_short(-32))
    assertEquals(big_int("32766"), big_int("-1") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_short(0))
    assertEquals(big_int("0"), big_int("23") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_short(-1))
    assertEquals(big_int("0"), big_int("23") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_short(-32))
    assertEquals(big_int("23"), big_int("23") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_short(0))
    assertEquals(big_int("0"), big_int("-32") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_short(-1))
    assertEquals(big_int("14"), big_int("-32") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_short(-32))
    assertEquals(big_int("32735"), big_int("-32") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_short(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_short(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_short(-32))
    assertEquals(big_int("9114"), big_int("123456789012345678901234567890") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_short(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % p_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_short(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % p_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_short(-32))
    assertEquals(big_int("23653"), big_int("-123456789012345678901234567890") % p_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_short(Short.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % p_short(0)))
  }

  function testBigIntegerShortRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_short(0))
    assertEquals(big_int("0"), big_int("0") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_short(-1))
    assertEquals(big_int("0"), big_int("0") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_short(-32))
    assertEquals(big_int("0"), big_int("0") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_short(0))
    assertEquals(big_int("0"), big_int("1") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_short(-1))
    assertEquals(big_int("1"), big_int("1") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_short(-32))
    assertEquals(big_int("1"), big_int("1") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_short(0))
    assertEquals(big_int("0"), big_int("-1") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_short(-1))
    assertEquals(big_int("22"), big_int("-1") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_short(-32))
    assertEquals(big_int("32766"), big_int("-1") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_short(0))
    assertEquals(big_int("0"), big_int("23") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_short(-1))
    assertEquals(big_int("0"), big_int("23") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_short(-32))
    assertEquals(big_int("23"), big_int("23") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_short(0))
    assertEquals(big_int("0"), big_int("-32") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_short(-1))
    assertEquals(big_int("14"), big_int("-32") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_short(-32))
    assertEquals(big_int("32735"), big_int("-32") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_short(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_short(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_short(-32))
    assertEquals(big_int("9114"), big_int("123456789012345678901234567890") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_short(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % b_short(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_short(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % b_short(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_short(-32))
    assertEquals(big_int("23653"), big_int("-123456789012345678901234567890") % b_short(Short.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_short(Short.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % b_short(0)))
  }

  function testBigIntegerPCharRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_char(0))
    assertEquals(big_int("0"), big_int("0") % p_char(1))
    assertEquals(big_int("0"), big_int("0") % p_char(23))
    assertEquals(big_int("0"), big_int("0") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_char(0))
    assertEquals(big_int("0"), big_int("1") % p_char(1))
    assertEquals(big_int("1"), big_int("1") % p_char(23))
    assertEquals(big_int("1"), big_int("1") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_char(0))
    assertEquals(big_int("0"), big_int("-1") % p_char(1))
    assertEquals(big_int("22"), big_int("-1") % p_char(23))
    assertEquals(big_int("65534"), big_int("-1") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_char(0))
    assertEquals(big_int("0"), big_int("23") % p_char(1))
    assertEquals(big_int("0"), big_int("23") % p_char(23))
    assertEquals(big_int("23"), big_int("23") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_char(0))
    assertEquals(big_int("0"), big_int("-32") % p_char(1))
    assertEquals(big_int("14"), big_int("-32") % p_char(23))
    assertEquals(big_int("65503"), big_int("-32") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_char(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % p_char(1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % p_char(23))
    assertEquals(big_int("40020"), big_int("123456789012345678901234567890") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_char(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % p_char(1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % p_char(23))
    assertEquals(big_int("25515"), big_int("-123456789012345678901234567890") % p_char(Character.MAX_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % p_char(0)))
  }

  function testBigIntegerCharacterRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_char(0))
    assertEquals(big_int("0"), big_int("0") % b_char(1))
    assertEquals(big_int("0"), big_int("0") % b_char(23))
    assertEquals(big_int("0"), big_int("0") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_char(0))
    assertEquals(big_int("0"), big_int("1") % b_char(1))
    assertEquals(big_int("1"), big_int("1") % b_char(23))
    assertEquals(big_int("1"), big_int("1") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_char(0))
    assertEquals(big_int("0"), big_int("-1") % b_char(1))
    assertEquals(big_int("22"), big_int("-1") % b_char(23))
    assertEquals(big_int("65534"), big_int("-1") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_char(0))
    assertEquals(big_int("0"), big_int("23") % b_char(1))
    assertEquals(big_int("0"), big_int("23") % b_char(23))
    assertEquals(big_int("23"), big_int("23") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_char(0))
    assertEquals(big_int("0"), big_int("-32") % b_char(1))
    assertEquals(big_int("14"), big_int("-32") % b_char(23))
    assertEquals(big_int("65503"), big_int("-32") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_char(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % b_char(1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % b_char(23))
    assertEquals(big_int("40020"), big_int("123456789012345678901234567890") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_char(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % b_char(1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % b_char(23))
    assertEquals(big_int("25515"), big_int("-123456789012345678901234567890") % b_char(Character.MAX_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % b_char(0)))
  }

  function testBigIntegerPIntRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_int(0))
    assertEquals(big_int("0"), big_int("0") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_int(-1))
    assertEquals(big_int("0"), big_int("0") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_int(-32))
    assertEquals(big_int("0"), big_int("0") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_int(0))
    assertEquals(big_int("0"), big_int("1") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_int(-1))
    assertEquals(big_int("1"), big_int("1") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_int(-32))
    assertEquals(big_int("1"), big_int("1") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_int(0))
    assertEquals(big_int("0"), big_int("-1") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_int(-1))
    assertEquals(big_int("22"), big_int("-1") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_int(-32))
    assertEquals(big_int("2147483646"), big_int("-1") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_int(0))
    assertEquals(big_int("0"), big_int("23") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_int(-1))
    assertEquals(big_int("0"), big_int("23") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_int(-32))
    assertEquals(big_int("23"), big_int("23") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_int(0))
    assertEquals(big_int("0"), big_int("-32") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_int(-1))
    assertEquals(big_int("14"), big_int("-32") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_int(-32))
    assertEquals(big_int("2147483615"), big_int("-32") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_int(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_int(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_int(-32))
    assertEquals(big_int("281742486"), big_int("123456789012345678901234567890") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_int(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % p_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_int(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % p_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_int(-32))
    assertEquals(big_int("1865741161"), big_int("-123456789012345678901234567890") % p_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_int(Integer.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % p_int(0)))
  }

  function testBigIntegerIntegerRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_int(0))
    assertEquals(big_int("0"), big_int("0") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_int(-1))
    assertEquals(big_int("0"), big_int("0") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_int(-32))
    assertEquals(big_int("0"), big_int("0") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_int(0))
    assertEquals(big_int("0"), big_int("1") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_int(-1))
    assertEquals(big_int("1"), big_int("1") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_int(-32))
    assertEquals(big_int("1"), big_int("1") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_int(0))
    assertEquals(big_int("0"), big_int("-1") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_int(-1))
    assertEquals(big_int("22"), big_int("-1") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_int(-32))
    assertEquals(big_int("2147483646"), big_int("-1") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_int(0))
    assertEquals(big_int("0"), big_int("23") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_int(-1))
    assertEquals(big_int("0"), big_int("23") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_int(-32))
    assertEquals(big_int("23"), big_int("23") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_int(0))
    assertEquals(big_int("0"), big_int("-32") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_int(-1))
    assertEquals(big_int("14"), big_int("-32") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_int(-32))
    assertEquals(big_int("2147483615"), big_int("-32") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_int(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_int(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_int(-32))
    assertEquals(big_int("281742486"), big_int("123456789012345678901234567890") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_int(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % b_int(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_int(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % b_int(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_int(-32))
    assertEquals(big_int("1865741161"), big_int("-123456789012345678901234567890") % b_int(Integer.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_int(Integer.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % b_int(0)))
  }

  function testBigIntegerPLongRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_long(0))
    assertEquals(big_int("0"), big_int("0") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_long(-1))
    assertEquals(big_int("0"), big_int("0") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_long(-32))
    assertEquals(big_int("0"), big_int("0") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_long(0))
    assertEquals(big_int("0"), big_int("1") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_long(-1))
    assertEquals(big_int("1"), big_int("1") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_long(-32))
    assertEquals(big_int("1"), big_int("1") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_long(0))
    assertEquals(big_int("0"), big_int("-1") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_long(-1))
    assertEquals(big_int("22"), big_int("-1") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_long(-32))
    assertEquals(big_int("9223372036854775806"), big_int("-1") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_long(0))
    assertEquals(big_int("0"), big_int("23") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_long(-1))
    assertEquals(big_int("0"), big_int("23") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_long(-32))
    assertEquals(big_int("23"), big_int("23") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_long(0))
    assertEquals(big_int("0"), big_int("-32") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_long(-1))
    assertEquals(big_int("14"), big_int("-32") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_long(-32))
    assertEquals(big_int("9223372036854775775"), big_int("-32") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_long(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_long(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_long(-32))
    assertEquals(big_int("4860475750367701695"), big_int("123456789012345678901234567890") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_long(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % p_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_long(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % p_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_long(-32))
    assertEquals(big_int("4362896286487074112"), big_int("-123456789012345678901234567890") % p_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % p_long(Long.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % p_long(0)))
  }

  function testBigIntegerLongRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_long(0))
    assertEquals(big_int("0"), big_int("0") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_long(-1))
    assertEquals(big_int("0"), big_int("0") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_long(-32))
    assertEquals(big_int("0"), big_int("0") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_long(0))
    assertEquals(big_int("0"), big_int("1") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_long(-1))
    assertEquals(big_int("1"), big_int("1") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_long(-32))
    assertEquals(big_int("1"), big_int("1") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_long(0))
    assertEquals(big_int("0"), big_int("-1") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_long(-1))
    assertEquals(big_int("22"), big_int("-1") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_long(-32))
    assertEquals(big_int("9223372036854775806"), big_int("-1") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_long(0))
    assertEquals(big_int("0"), big_int("23") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_long(-1))
    assertEquals(big_int("0"), big_int("23") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_long(-32))
    assertEquals(big_int("23"), big_int("23") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_long(0))
    assertEquals(big_int("0"), big_int("-32") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_long(-1))
    assertEquals(big_int("14"), big_int("-32") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_long(-32))
    assertEquals(big_int("9223372036854775775"), big_int("-32") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_long(0))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_long(-1))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_long(-32))
    assertEquals(big_int("4860475750367701695"), big_int("123456789012345678901234567890") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_long(0))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % b_long(1))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_long(-1))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % b_long(23))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_long(-32))
    assertEquals(big_int("4362896286487074112"), big_int("-123456789012345678901234567890") % b_long(Long.MAX_VALUE))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % b_long(Long.MIN_VALUE))

    assertEquals(BigInteger, statictypeof(big_int("0") % b_long(0)))
  }

  function testBigIntegerPFloatRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") % p_float(0.0))
    assertEquals(big_decimal("0"), big_int("0") % p_float(1.0))
    assertEquals(big_decimal("0"), big_int("0") % p_float(-1.0))
    assertEquals(big_decimal("0"), big_int("0") % p_float(23.0))
    assertEquals(big_decimal("0"), big_int("0") % p_float(23.123))
    assertEquals(big_decimal("0"), big_int("0") % p_float(-32.0))
    assertEquals(big_decimal("0"), big_int("0") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_float(Float.NaN_))
    assertEquals(big_decimal("0"), big_int("0") % p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("0") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("1") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("1") % p_float(-1.0))
    assertEquals(big_decimal("1"), big_int("1") % p_float(23.0))
    assertEquals(big_decimal("1"), big_int("1") % p_float(23.123))
    assertEquals(big_decimal("1"), big_int("1") % p_float(-32.0))
    assertEquals(big_decimal("1"), big_int("1") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_int("1") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("1") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % p_float(-1.0))
    assertEquals(big_decimal("1"), big_int("-1") % p_float(23.0))
    assertEquals(big_decimal("1"), big_int("-1") % p_float(23.123))
    assertEquals(big_decimal("1"), big_int("-1") % p_float(-32.0))
    assertEquals(big_decimal("1"), big_int("-1") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_int("-1") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-1") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("23") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % p_float(-1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % p_float(23.0))
    assertEquals(big_decimal("23"), big_int("23") % p_float(23.123))
    assertEquals(big_decimal("23"), big_int("23") % p_float(-32.0))
    assertEquals(big_decimal("23"), big_int("23") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_float(Float.NaN_))
    assertEquals(big_decimal("23"), big_int("23") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("23") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % p_float(-1.0))
    assertEquals(big_decimal("9.0"), big_int("-32") % p_float(23.0))
    assertEquals(big_decimal("8.877"), big_int("-32") % p_float(23.123))
    assertEquals(big_decimal("0.0"), big_int("-32") % p_float(-32.0))
    assertEquals(big_decimal("32"), big_int("-32") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_float(Float.NaN_))
    assertEquals(big_decimal("32"), big_int("-32") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-32") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") % p_float(0.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % p_float(1.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % p_float(-1.0))
    assertEquals(big_decimal("15.0"), big_int("123456789012345678901234567890") % p_float(23.0))
    assertEquals(big_decimal("15.529"), big_int("123456789012345678901234567890") % p_float(23.123))
    assertEquals(big_decimal("18.0"), big_int("123456789012345678901234567890") % p_float(-32.0))
    assertEquals(big_decimal("2.216"), big_int("123456789012345678901234567890") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") % p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") % p_float(0.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % p_float(1.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % p_float(-1.0))
    assertEquals(big_decimal("15.0"), big_int("-123456789012345678901234567890") % p_float(23.0))
    assertEquals(big_decimal("15.529"), big_int("-123456789012345678901234567890") % p_float(23.123))
    assertEquals(big_decimal("18.0"), big_int("-123456789012345678901234567890") % p_float(-32.0))
    assertEquals(big_decimal("2.216"), big_int("-123456789012345678901234567890") % p_float(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") % p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % p_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") % p_float(0.0)))
  }

  function testBigIntegerFloatRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") % b_float(0.0))
    assertEquals(big_decimal("0"), big_int("0") % b_float(1.0))
    assertEquals(big_decimal("0"), big_int("0") % b_float(-1.0))
    assertEquals(big_decimal("0"), big_int("0") % b_float(23.0))
    assertEquals(big_decimal("0"), big_int("0") % b_float(23.123))
    assertEquals(big_decimal("0"), big_int("0") % b_float(-32.0))
    assertEquals(big_decimal("0"), big_int("0") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_float(Float.NaN_))
    assertEquals(big_decimal("0"), big_int("0") % b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("0") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("1") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("1") % b_float(-1.0))
    assertEquals(big_decimal("1"), big_int("1") % b_float(23.0))
    assertEquals(big_decimal("1"), big_int("1") % b_float(23.123))
    assertEquals(big_decimal("1"), big_int("1") % b_float(-32.0))
    assertEquals(big_decimal("1"), big_int("1") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_int("1") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("1") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % b_float(-1.0))
    assertEquals(big_decimal("1"), big_int("-1") % b_float(23.0))
    assertEquals(big_decimal("1"), big_int("-1") % b_float(23.123))
    assertEquals(big_decimal("1"), big_int("-1") % b_float(-32.0))
    assertEquals(big_decimal("1"), big_int("-1") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_int("-1") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-1") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("23") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % b_float(-1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % b_float(23.0))
    assertEquals(big_decimal("23"), big_int("23") % b_float(23.123))
    assertEquals(big_decimal("23"), big_int("23") % b_float(-32.0))
    assertEquals(big_decimal("23"), big_int("23") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_float(Float.NaN_))
    assertEquals(big_decimal("23"), big_int("23") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("23") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % b_float(-1.0))
    assertEquals(big_decimal("9.0"), big_int("-32") % b_float(23.0))
    assertEquals(big_decimal("8.877"), big_int("-32") % b_float(23.123))
    assertEquals(big_decimal("0.0"), big_int("-32") % b_float(-32.0))
    assertEquals(big_decimal("32"), big_int("-32") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_float(Float.NaN_))
    assertEquals(big_decimal("32"), big_int("-32") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-32") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") % b_float(0.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % b_float(1.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % b_float(-1.0))
    assertEquals(big_decimal("15.0"), big_int("123456789012345678901234567890") % b_float(23.0))
    assertEquals(big_decimal("15.529"), big_int("123456789012345678901234567890") % b_float(23.123))
    assertEquals(big_decimal("18.0"), big_int("123456789012345678901234567890") % b_float(-32.0))
    assertEquals(big_decimal("2.216"), big_int("123456789012345678901234567890") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") % b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") % b_float(0.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % b_float(1.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % b_float(-1.0))
    assertEquals(big_decimal("15.0"), big_int("-123456789012345678901234567890") % b_float(23.0))
    assertEquals(big_decimal("15.529"), big_int("-123456789012345678901234567890") % b_float(23.123))
    assertEquals(big_decimal("18.0"), big_int("-123456789012345678901234567890") % b_float(-32.0))
    assertEquals(big_decimal("2.216"), big_int("-123456789012345678901234567890") % b_float(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") % b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % b_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") % b_float(0.0)))
  }

  function testBigIntegerPDoubleRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") % p_double(0.0))
    assertEquals(big_decimal("0"), big_int("0") % p_double(1.0))
    assertEquals(big_decimal("0"), big_int("0") % p_double(-1.0))
    assertEquals(big_decimal("0"), big_int("0") % p_double(23.0))
    assertEquals(big_decimal("0"), big_int("0") % p_double(23.123))
    assertEquals(big_decimal("0"), big_int("0") % p_double(-32.0))
    assertEquals(big_decimal("0"), big_int("0") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - p_double(Double.NaN_))
    assertEquals(big_decimal("0"), big_int("0") % p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("0") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("1") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("1") % p_double(-1.0))
    assertEquals(big_decimal("1"), big_int("1") % p_double(23.0))
    assertEquals(big_decimal("1"), big_int("1") % p_double(23.123))
    assertEquals(big_decimal("1"), big_int("1") % p_double(-32.0))
    assertEquals(big_decimal("1"), big_int("1") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - p_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_int("1") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("1") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % p_double(-1.0))
    assertEquals(big_decimal("1"), big_int("-1") % p_double(23.0))
    assertEquals(big_decimal("1"), big_int("-1") % p_double(23.123))
    assertEquals(big_decimal("1"), big_int("-1") % p_double(-32.0))
    assertEquals(big_decimal("1"), big_int("-1") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - p_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_int("-1") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-1") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("23") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % p_double(-1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % p_double(23.0))
    assertEquals(big_decimal("23"), big_int("23") % p_double(23.123))
    assertEquals(big_decimal("23"), big_int("23") % p_double(-32.0))
    assertEquals(big_decimal("23"), big_int("23") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - p_double(Double.NaN_))
    assertEquals(big_decimal("23"), big_int("23") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("23") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % p_double(-1.0))
    assertEquals(big_decimal("9.0"), big_int("-32") % p_double(23.0))
    assertEquals(big_decimal("8.877"), big_int("-32") % p_double(23.123))
    assertEquals(big_decimal("0.0"), big_int("-32") % p_double(-32.0))
    assertEquals(big_decimal("32"), big_int("-32") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - p_double(Double.NaN_))
    assertEquals(big_decimal("32"), big_int("-32") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-32") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") % p_double(0.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % p_double(1.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % p_double(-1.0))
    assertEquals(big_decimal("15.0"), big_int("123456789012345678901234567890") % p_double(23.0))
    assertEquals(big_decimal("15.529"), big_int("123456789012345678901234567890") % p_double(23.123))
    assertEquals(big_decimal("18.0"), big_int("123456789012345678901234567890") % p_double(-32.0))
    assertEquals(big_decimal("2.216"), big_int("123456789012345678901234567890") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - p_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("123456789012345678901234567890") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") % p_double(0.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % p_double(1.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % p_double(-1.0))
    assertEquals(big_decimal("15.0"), big_int("-123456789012345678901234567890") % p_double(23.0))
    assertEquals(big_decimal("15.529"), big_int("-123456789012345678901234567890") % p_double(23.123))
    assertEquals(big_decimal("18.0"), big_int("-123456789012345678901234567890") % p_double(-32.0))
    assertEquals(big_decimal("2.216"), big_int("-123456789012345678901234567890") % p_double(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - p_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-123456789012345678901234567890") % p_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") % p_double(0.0)))
  }

  function testBigIntegerDoubleRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") % b_double(0.0))
    assertEquals(big_decimal("0"), big_int("0") % b_double(1.0))
    assertEquals(big_decimal("0"), big_int("0") % b_double(-1.0))
    assertEquals(big_decimal("0"), big_int("0") % b_double(23.0))
    assertEquals(big_decimal("0"), big_int("0") % b_double(23.123))
    assertEquals(big_decimal("0"), big_int("0") % b_double(-32.0))
    assertEquals(big_decimal("0"), big_int("0") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("0") - b_double(Double.NaN_))
    assertEquals(big_decimal("0"), big_int("0") % b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0"), big_int("0") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("1") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("1") % b_double(-1.0))
    assertEquals(big_decimal("1"), big_int("1") % b_double(23.0))
    assertEquals(big_decimal("1"), big_int("1") % b_double(23.123))
    assertEquals(big_decimal("1"), big_int("1") % b_double(-32.0))
    assertEquals(big_decimal("1"), big_int("1") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("1") - b_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_int("1") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("1") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("-1") % b_double(-1.0))
    assertEquals(big_decimal("1"), big_int("-1") % b_double(23.0))
    assertEquals(big_decimal("1"), big_int("-1") % b_double(23.123))
    assertEquals(big_decimal("1"), big_int("-1") % b_double(-32.0))
    assertEquals(big_decimal("1"), big_int("-1") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-1") - b_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_int("-1") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-1") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("23") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % b_double(-1.0))
    assertEquals(big_decimal("0.0"), big_int("23") % b_double(23.0))
    assertEquals(big_decimal("23"), big_int("23") % b_double(23.123))
    assertEquals(big_decimal("23"), big_int("23") % b_double(-32.0))
    assertEquals(big_decimal("23"), big_int("23") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("23") - b_double(Double.NaN_))
    assertEquals(big_decimal("23"), big_int("23") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("23") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_int("-32") % b_double(-1.0))
    assertEquals(big_decimal("9.0"), big_int("-32") % b_double(23.0))
    assertEquals(big_decimal("8.877"), big_int("-32") % b_double(23.123))
    assertEquals(big_decimal("0.0"), big_int("-32") % b_double(-32.0))
    assertEquals(big_decimal("32"), big_int("-32") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-32") - b_double(Double.NaN_))
    assertEquals(big_decimal("32"), big_int("-32") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-32") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") % b_double(0.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % b_double(1.0))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % b_double(-1.0))
    assertEquals(big_decimal("15.0"), big_int("123456789012345678901234567890") % b_double(23.0))
    assertEquals(big_decimal("15.529"), big_int("123456789012345678901234567890") % b_double(23.123))
    assertEquals(big_decimal("18.0"), big_int("123456789012345678901234567890") % b_double(-32.0))
    assertEquals(big_decimal("2.216"), big_int("123456789012345678901234567890") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("123456789012345678901234567890") - b_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("123456789012345678901234567890") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") % b_double(0.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % b_double(1.0))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % b_double(-1.0))
    assertEquals(big_decimal("15.0"), big_int("-123456789012345678901234567890") % b_double(23.0))
    assertEquals(big_decimal("15.529"), big_int("-123456789012345678901234567890") % b_double(23.123))
    assertEquals(big_decimal("18.0"), big_int("-123456789012345678901234567890") % b_double(-32.0))
    assertEquals(big_decimal("2.216"), big_int("-123456789012345678901234567890") % b_double(-32.456))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_int("-123456789012345678901234567890") - b_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_int("-123456789012345678901234567890") % b_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_int("0") % b_double(0.0)))
  }

  function testBigIntegerBigIntegerRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % big_int("0"))
    assertEquals(big_int("0"), big_int("0") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % big_int("-1"))
    assertEquals(big_int("0"), big_int("0") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % big_int("-32"))
    assertEquals(big_int("0"), big_int("0") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("0") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % big_int("0"))
    assertEquals(big_int("0"), big_int("1") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % big_int("-1"))
    assertEquals(big_int("1"), big_int("1") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % big_int("-32"))
    assertEquals(big_int("1"), big_int("1") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("1") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % big_int("0"))
    assertEquals(big_int("0"), big_int("-1") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % big_int("-1"))
    assertEquals(big_int("22"), big_int("-1") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % big_int("-32"))
    assertEquals(big_int("123456789012345678901234567889"), big_int("-1") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-1") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % big_int("0"))
    assertEquals(big_int("0"), big_int("23") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % big_int("-1"))
    assertEquals(big_int("0"), big_int("23") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % big_int("-32"))
    assertEquals(big_int("23"), big_int("23") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("23") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % big_int("0"))
    assertEquals(big_int("0"), big_int("-32") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % big_int("-1"))
    assertEquals(big_int("14"), big_int("-32") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % big_int("-32"))
    assertEquals(big_int("123456789012345678901234567858"), big_int("-32") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-32") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % big_int("0"))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % big_int("-1"))
    assertEquals(big_int("15"), big_int("123456789012345678901234567890") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % big_int("-32"))
    assertEquals(big_int("0"), big_int("123456789012345678901234567890") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("123456789012345678901234567890") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % big_int("0"))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % big_int("-1"))
    assertEquals(big_int("8"), big_int("-123456789012345678901234567890") % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % big_int("-32"))
    assertEquals(big_int("0"), big_int("-123456789012345678901234567890") % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> big_int("-123456789012345678901234567890") % big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(big_int("0") % big_int("0")))
  }

  function testBigIntegerBigDecimalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_int("0") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("-1"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("23"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("-32"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("-32.456"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0"), big_int("0") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("1") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("1") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("1") % big_decimal("-1"))
    assertEquals(big_decimal("1"), big_int("1") % big_decimal("23"))
    assertEquals(big_decimal("1"), big_int("1") % big_decimal("23.123"))
    assertEquals(big_decimal("1"), big_int("1") % big_decimal("-32"))
    assertEquals(big_decimal("1"), big_int("1") % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), big_int("1") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), big_int("1") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-1") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("-1") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("-1") % big_decimal("-1"))
    assertEquals(big_decimal("1"), big_int("-1") % big_decimal("23"))
    assertEquals(big_decimal("1"), big_int("-1") % big_decimal("23.123"))
    assertEquals(big_decimal("1"), big_int("-1") % big_decimal("-32"))
    assertEquals(big_decimal("1"), big_int("-1") % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), big_int("-1") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), big_int("-1") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("23") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("23") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("23") % big_decimal("-1"))
    assertEquals(big_decimal("0"), big_int("23") % big_decimal("23"))
    assertEquals(big_decimal("23"), big_int("23") % big_decimal("23.123"))
    assertEquals(big_decimal("23"), big_int("23") % big_decimal("-32"))
    assertEquals(big_decimal("23"), big_int("23") % big_decimal("-32.456"))
    assertEquals(big_decimal("23"), big_int("23") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23"), big_int("23") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-32") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("-32") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("-32") % big_decimal("-1"))
    assertEquals(big_decimal("9"), big_int("-32") % big_decimal("23"))
    assertEquals(big_decimal("8.877"), big_int("-32") % big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_int("-32") % big_decimal("-32"))
    assertEquals(big_decimal("32"), big_int("-32") % big_decimal("-32.456"))
    assertEquals(big_decimal("32"), big_int("-32") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32"), big_int("-32") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("123456789012345678901234567890") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("123456789012345678901234567890") % big_decimal("-1"))
    assertEquals(big_decimal("15"), big_int("123456789012345678901234567890") % big_decimal("23"))
    assertEquals(big_decimal("15.529"), big_int("123456789012345678901234567890") % big_decimal("23.123"))
    assertEquals(big_decimal("18"), big_int("123456789012345678901234567890") % big_decimal("-32"))
    assertEquals(big_decimal("2.216"), big_int("123456789012345678901234567890") % big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("123456789012345678901234567890") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_int("-123456789012345678901234567890") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_int("-123456789012345678901234567890") % big_decimal("-1"))
    assertEquals(big_decimal("15"), big_int("-123456789012345678901234567890") % big_decimal("23"))
    assertEquals(big_decimal("15.529"), big_int("-123456789012345678901234567890") % big_decimal("23.123"))
    assertEquals(big_decimal("18"), big_int("-123456789012345678901234567890") % big_decimal("-32"))
    assertEquals(big_decimal("2.216"), big_int("-123456789012345678901234567890") % big_decimal("-32.456"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("123456789012345678901234567890"), big_int("-123456789012345678901234567890") % big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(big_int("0") % big_decimal("0")))
  }

}

