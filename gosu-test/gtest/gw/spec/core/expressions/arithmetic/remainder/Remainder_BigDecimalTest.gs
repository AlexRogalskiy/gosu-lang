package gw.spec.core.expressions.arithmetic.remainder
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Remainder_BigDecimalTest extends ArithmeticTestBase {

  function testBigDecimalPByteRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(23))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("1") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("1") % p_byte(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % p_byte(23))
    assertEquals(big_decimal("1"), big_decimal("1") % p_byte(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_byte(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_byte(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_byte(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("23") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_byte(23))
    assertEquals(big_decimal("23"), big_decimal("23") % p_byte(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_byte(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_byte(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_byte(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_byte(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_byte(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_byte(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_byte(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % p_byte(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_byte(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_byte(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_byte(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_byte(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_byte(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_byte(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_byte(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(-32))
    assertEquals(big_decimal("100.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("82.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_byte(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(-32))
    assertEquals(big_decimal("100.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("82.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(Byte.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_byte(0)))
  }

  function testBigDecimalByteRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_byte(23))
    assertEquals(big_decimal("0"), big_decimal("0") % b_byte(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("1") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("1") % p_byte(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % b_byte(23))
    assertEquals(big_decimal("1"), big_decimal("1") % b_byte(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_byte(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_byte(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_byte(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("23") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_byte(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_byte(23))
    assertEquals(big_decimal("23"), big_decimal("23") % b_byte(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_byte(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_byte(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_byte(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_byte(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_byte(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_byte(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_byte(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_byte(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % b_byte(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_byte(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_byte(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_byte(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_byte(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_byte(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_byte(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_byte(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_byte(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_byte(-32))
    assertEquals(big_decimal("100.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("82.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_byte(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_byte(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_byte(-32))
    assertEquals(big_decimal("100.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_byte(Byte.MAX_VALUE))
    assertEquals(big_decimal("82.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_byte(Byte.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_byte(0)))
  }

  function testBigDecimalPShortRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_short(0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_short(1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_short(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_short(23))
    assertEquals(big_decimal("0"), big_decimal("0") % p_short(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_short(0))
    assertEquals(big_decimal("0"), big_decimal("1") % p_short(1))
    assertEquals(big_decimal("0"), big_decimal("1") % p_short(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % p_short(23))
    assertEquals(big_decimal("1"), big_decimal("1") % p_short(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_short(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_short(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_short(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_short(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_short(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_short(0))
    assertEquals(big_decimal("0"), big_decimal("23") % p_short(1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_short(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_short(23))
    assertEquals(big_decimal("23"), big_decimal("23") % p_short(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_short(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_short(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_short(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_short(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_short(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_short(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_short(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_short(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % p_short(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_short(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_short(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_short(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_short(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_short(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_short(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_short(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_short(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_short(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_short(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_short(-32))
    assertEquals(big_decimal("9114.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("2770.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_short(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_short(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_short(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_short(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_short(-32))
    assertEquals(big_decimal("9114.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_short(Short.MAX_VALUE))
    assertEquals(big_decimal("2770.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_short(Short.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_short(0)))
  }

  function testBigDecimalShortRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_short(0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_short(1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_short(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_short(23))
    assertEquals(big_decimal("0"), big_decimal("0") % b_short(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_short(0))
    assertEquals(big_decimal("0"), big_decimal("1") % b_short(1))
    assertEquals(big_decimal("0"), big_decimal("1") % b_short(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % b_short(23))
    assertEquals(big_decimal("1"), big_decimal("1") % b_short(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_short(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_short(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_short(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_short(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_short(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_short(0))
    assertEquals(big_decimal("0"), big_decimal("23") % b_short(1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_short(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_short(23))
    assertEquals(big_decimal("23"), big_decimal("23") % b_short(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_short(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_short(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_short(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_short(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_short(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_short(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_short(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_short(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % b_short(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_short(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_short(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_short(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_short(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_short(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_short(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_short(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_short(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_short(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_short(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_short(-32))
    assertEquals(big_decimal("9114.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("2770.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_short(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_short(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_short(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_short(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_short(-32))
    assertEquals(big_decimal("9114.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_short(Short.MAX_VALUE))
    assertEquals(big_decimal("2770.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_short(Short.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_short(0)))
  }

  function testBigDecimalPCharRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_char(0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_char(1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_char(23))
    assertEquals(big_decimal("0"), big_decimal("0") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_char(0))
    assertEquals(big_decimal("0"), big_decimal("1") % p_char(1))
    assertEquals(big_decimal("1"), big_decimal("1") % p_char(23))
    assertEquals(big_decimal("1"), big_decimal("1") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_char(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_char(1))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_char(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_char(0))
    assertEquals(big_decimal("0"), big_decimal("23") % p_char(1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_char(23))
    assertEquals(big_decimal("23"), big_decimal("23") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_char(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_char(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_char(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_char(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_char(1))
    assertEquals(big_decimal("9"), big_decimal("-32") % p_char(23))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_char(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_char(1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_char(23))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_char(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_char(1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_char(23))
    assertEquals(big_decimal("40020.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_char(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_char(1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_char(23))
    assertEquals(big_decimal("40020.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_char(Character.MAX_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_char(0)))
  }

  function testBigDecimalCharacterRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_char(0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_char(1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_char(23))
    assertEquals(big_decimal("0"), big_decimal("0") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_char(0))
    assertEquals(big_decimal("0"), big_decimal("1") % b_char(1))
    assertEquals(big_decimal("1"), big_decimal("1") % b_char(23))
    assertEquals(big_decimal("1"), big_decimal("1") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_char(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_char(1))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_char(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_char(0))
    assertEquals(big_decimal("0"), big_decimal("23") % b_char(1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_char(23))
    assertEquals(big_decimal("23"), big_decimal("23") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_char(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_char(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_char(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_char(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_char(1))
    assertEquals(big_decimal("9"), big_decimal("-32") % b_char(23))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_char(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_char(1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_char(23))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_char(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_char(1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_char(23))
    assertEquals(big_decimal("40020.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_char(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_char(1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_char(23))
    assertEquals(big_decimal("40020.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_char(Character.MAX_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_char(0)))
  }

  function testBigDecimalPIntRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_int(0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_int(1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_int(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_int(23))
    assertEquals(big_decimal("0"), big_decimal("0") % p_int(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_int(0))
    assertEquals(big_decimal("0"), big_decimal("1") % p_int(1))
    assertEquals(big_decimal("0"), big_decimal("1") % p_int(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % p_int(23))
    assertEquals(big_decimal("1"), big_decimal("1") % p_int(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_int(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_int(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_int(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_int(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_int(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_int(0))
    assertEquals(big_decimal("0"), big_decimal("23") % p_int(1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_int(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_int(23))
    assertEquals(big_decimal("23"), big_decimal("23") % p_int(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_int(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_int(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_int(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_int(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_int(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_int(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_int(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_int(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % p_int(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_int(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_int(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_int(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_int(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_int(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_int(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_int(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_int(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_int(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_int(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_int(-32))
    assertEquals(big_decimal("281742486.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1312754386.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_int(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_int(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_int(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_int(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_int(-32))
    assertEquals(big_decimal("281742486.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1312754386.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_int(Integer.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_int(0)))
  }

  function testBigDecimalIntegerRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_int(0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_int(1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_int(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_int(23))
    assertEquals(big_decimal("0"), big_decimal("0") % b_int(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_int(0))
    assertEquals(big_decimal("0"), big_decimal("1") % b_int(1))
    assertEquals(big_decimal("0"), big_decimal("1") % b_int(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % b_int(23))
    assertEquals(big_decimal("1"), big_decimal("1") % b_int(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_int(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_int(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_int(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_int(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_int(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_int(0))
    assertEquals(big_decimal("0"), big_decimal("23") % b_int(1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_int(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_int(23))
    assertEquals(big_decimal("23"), big_decimal("23") % b_int(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_int(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_int(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_int(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_int(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_int(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_int(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_int(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_int(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % b_int(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_int(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_int(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_int(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_int(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_int(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_int(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_int(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_int(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_int(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_int(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_int(-32))
    assertEquals(big_decimal("281742486.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1312754386.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_int(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_int(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_int(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_int(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_int(-32))
    assertEquals(big_decimal("281742486.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_int(Integer.MAX_VALUE))
    assertEquals(big_decimal("1312754386.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_int(Integer.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_int(0)))
  }

  function testBigDecimalPLongRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_long(0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_long(1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_long(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % p_long(23))
    assertEquals(big_decimal("0"), big_decimal("0") % p_long(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_long(0))
    assertEquals(big_decimal("0"), big_decimal("1") % p_long(1))
    assertEquals(big_decimal("0"), big_decimal("1") % p_long(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % p_long(23))
    assertEquals(big_decimal("1"), big_decimal("1") % p_long(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_long(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_long(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % p_long(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_long(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_long(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_long(0))
    assertEquals(big_decimal("0"), big_decimal("23") % p_long(1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_long(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % p_long(23))
    assertEquals(big_decimal("23"), big_decimal("23") % p_long(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_long(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_long(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_long(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_long(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_long(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_long(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_long(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_long(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % p_long(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % p_long(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_long(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_long(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_long(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_long(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_long(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_long(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_long(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_long(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_long(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_long(-32))
    assertEquals(big_decimal("4860475750367701695.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("4860475736982489810.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_long(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_long(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_long(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_long(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_long(-32))
    assertEquals(big_decimal("4860475750367701695.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_long(Long.MAX_VALUE))
    assertEquals(big_decimal("4860475736982489810.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_long(Long.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_long(0)))
  }

  function testBigDecimalLongRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_long(0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_long(1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_long(-1))
    assertEquals(big_decimal("0"), big_decimal("0") % b_long(23))
    assertEquals(big_decimal("0"), big_decimal("0") % b_long(-32))
    assertEquals(big_decimal("0"), big_decimal("0") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_long(0))
    assertEquals(big_decimal("0"), big_decimal("1") % b_long(1))
    assertEquals(big_decimal("0"), big_decimal("1") % b_long(-1))
    assertEquals(big_decimal("1"), big_decimal("1") % b_long(23))
    assertEquals(big_decimal("1"), big_decimal("1") % b_long(-32))
    assertEquals(big_decimal("1"), big_decimal("1") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("1") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_long(0))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_long(1))
    assertEquals(big_decimal("0"), big_decimal("-1") % b_long(-1))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_long(23))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_long(-32))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_long(0))
    assertEquals(big_decimal("0"), big_decimal("23") % b_long(1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_long(-1))
    assertEquals(big_decimal("0"), big_decimal("23") % b_long(23))
    assertEquals(big_decimal("23"), big_decimal("23") % b_long(-32))
    assertEquals(big_decimal("23"), big_decimal("23") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("23"), big_decimal("23") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_long(0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_long(1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_long(-1))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_long(23))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_long(-32))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_long(0))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_long(1))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_long(-1))
    assertEquals(big_decimal("9"), big_decimal("-32") % b_long(23))
    assertEquals(big_decimal("0"), big_decimal("-32") % b_long(-32))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_long(0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_long(1))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_long(-1))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_long(23))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_long(-32))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_long(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_long(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_long(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_long(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_long(-32))
    assertEquals(big_decimal("4860475750367701695.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("4860475736982489810.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_long(0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_long(1))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_long(-1))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_long(23))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_long(-32))
    assertEquals(big_decimal("4860475750367701695.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_long(Long.MAX_VALUE))
    assertEquals(big_decimal("4860475736982489810.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_long(Long.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_long(0)))
  }

  function testBigDecimalPFloatRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_float(0.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(-1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(23.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(23.123))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(-32.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_float(Float.NaN_))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % p_float(-1.0))
    assertEquals(big_decimal("1"), big_decimal("1") % p_float(23.0))
    assertEquals(big_decimal("1"), big_decimal("1") % p_float(23.123))
    assertEquals(big_decimal("1"), big_decimal("1") % p_float(-32.0))
    assertEquals(big_decimal("1"), big_decimal("1") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_decimal("1") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("1") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % p_float(-1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_float(23.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_float(23.123))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_float(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-1") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % p_float(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % p_float(23.0))
    assertEquals(big_decimal("23"), big_decimal("23") % p_float(23.123))
    assertEquals(big_decimal("23"), big_decimal("23") % p_float(-32.0))
    assertEquals(big_decimal("23"), big_decimal("23") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_float(Float.NaN_))
    assertEquals(big_decimal("23"), big_decimal("23") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_float(0.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_float(1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_float(-1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_float(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("23.123") % p_float(23.123))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_float(-32.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_float(Float.NaN_))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23.123") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % p_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % p_float(-1.0))
    assertEquals(big_decimal("9.0"), big_decimal("-32") % p_float(23.0))
    assertEquals(big_decimal("8.877"), big_decimal("-32") % p_float(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % p_float(-32.0))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_float(Float.NaN_))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_float(0.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_float(1.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_float(-1.0))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_float(23.0))
    assertEquals(big_decimal("9.333"), big_decimal("-32.456") % p_float(23.123))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_float(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("-32.456") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_float(Float.NaN_))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32.456") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_float(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("123456789012345678901234567890.123456789") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_float(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_float(0.0)))
  }

  function testBigDecimalFloatRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_float(0.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(-1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(23.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(23.123))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(-32.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_float(Float.NaN_))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(Float.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % b_float(-1.0))
    assertEquals(big_decimal("1"), big_decimal("1") % b_float(23.0))
    assertEquals(big_decimal("1"), big_decimal("1") % b_float(23.123))
    assertEquals(big_decimal("1"), big_decimal("1") % b_float(-32.0))
    assertEquals(big_decimal("1"), big_decimal("1") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_decimal("1") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("1") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % b_float(-1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_float(23.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_float(23.123))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_float(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_float(Float.NaN_))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-1") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % b_float(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % b_float(23.0))
    assertEquals(big_decimal("23"), big_decimal("23") % b_float(23.123))
    assertEquals(big_decimal("23"), big_decimal("23") % b_float(-32.0))
    assertEquals(big_decimal("23"), big_decimal("23") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_float(Float.NaN_))
    assertEquals(big_decimal("23"), big_decimal("23") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_float(0.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_float(1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_float(-1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_float(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("23.123") % b_float(23.123))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_float(-32.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_float(Float.NaN_))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23.123") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_float(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % b_float(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % b_float(-1.0))
    assertEquals(big_decimal("9.0"), big_decimal("-32") % b_float(23.0))
    assertEquals(big_decimal("8.877"), big_decimal("-32") % b_float(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % b_float(-32.0))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_float(Float.NaN_))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_float(0.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_float(1.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_float(-1.0))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_float(23.0))
    assertEquals(big_decimal("9.333"), big_decimal("-32.456") % b_float(23.123))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_float(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("-32.456") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_float(Float.NaN_))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32.456") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_float(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("123456789012345678901234567890.123456789") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_float(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_float(Float.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_float(Float.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_float(0.0)))
  }

  function testBigDecimalPDoubleRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % p_double(0.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(-1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(23.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(23.123))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(-32.0))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - p_double(Double.NaN_))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % p_double(-1.0))
    assertEquals(big_decimal("1"), big_decimal("1") % p_double(23.0))
    assertEquals(big_decimal("1"), big_decimal("1") % p_double(23.123))
    assertEquals(big_decimal("1"), big_decimal("1") % p_double(-32.0))
    assertEquals(big_decimal("1"), big_decimal("1") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - p_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_decimal("1") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("1") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % p_double(-1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_double(23.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_double(23.123))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_double(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - p_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_decimal("-1") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-1") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % p_double(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % p_double(23.0))
    assertEquals(big_decimal("23"), big_decimal("23") % p_double(23.123))
    assertEquals(big_decimal("23"), big_decimal("23") % p_double(-32.0))
    assertEquals(big_decimal("23"), big_decimal("23") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - p_double(Double.NaN_))
    assertEquals(big_decimal("23"), big_decimal("23") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % p_double(0.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_double(1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_double(-1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % p_double(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("23.123") % p_double(23.123))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_double(-32.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - p_double(Double.NaN_))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23.123") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % p_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % p_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % p_double(-1.0))
    assertEquals(big_decimal("9.0"), big_decimal("-32") % p_double(23.0))
    assertEquals(big_decimal("8.877"), big_decimal("-32") % p_double(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % p_double(-32.0))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - p_double(Double.NaN_))
    assertEquals(big_decimal("32"), big_decimal("-32") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % p_double(0.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_double(1.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_double(-1.0))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % p_double(23.0))
    assertEquals(big_decimal("9.333"), big_decimal("-32.456") % p_double(23.123))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % p_double(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("-32.456") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - p_double(Double.NaN_))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32.456") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % p_double(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("123456789012345678901234567890.123456789") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_double(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") % p_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-123456789012345678901234567890.123456789") % p_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % p_double(0.0)))
  }

  function testBigDecimalDoubleRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % b_double(0.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(-1.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(23.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(23.123))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(-32.0))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("0") - b_double(Double.NaN_))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(Double.MAX_VALUE))
    assertEquals(big_decimal("0"), big_decimal("0") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("1") % b_double(-1.0))
    assertEquals(big_decimal("1"), big_decimal("1") % b_double(23.0))
    assertEquals(big_decimal("1"), big_decimal("1") % b_double(23.123))
    assertEquals(big_decimal("1"), big_decimal("1") % b_double(-32.0))
    assertEquals(big_decimal("1"), big_decimal("1") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("1") - b_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_decimal("1") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("1") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-1") % b_double(-1.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_double(23.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_double(23.123))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_double(-32.0))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-1") - b_double(Double.NaN_))
    assertEquals(big_decimal("1"), big_decimal("-1") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-1") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % b_double(-1.0))
    assertEquals(big_decimal("0.0"), big_decimal("23") % b_double(23.0))
    assertEquals(big_decimal("23"), big_decimal("23") % b_double(23.123))
    assertEquals(big_decimal("23"), big_decimal("23") % b_double(-32.0))
    assertEquals(big_decimal("23"), big_decimal("23") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23") - b_double(Double.NaN_))
    assertEquals(big_decimal("23"), big_decimal("23") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % b_double(0.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_double(1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_double(-1.0))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % b_double(23.0))
    assertEquals(big_decimal("0.000"), big_decimal("23.123") % b_double(23.123))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_double(-32.0))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("23.123") - b_double(Double.NaN_))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("23.123") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % b_double(0.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % b_double(1.0))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % b_double(-1.0))
    assertEquals(big_decimal("9.0"), big_decimal("-32") % b_double(23.0))
    assertEquals(big_decimal("8.877"), big_decimal("-32") % b_double(23.123))
    assertEquals(big_decimal("0.0"), big_decimal("-32") % b_double(-32.0))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32") - b_double(Double.NaN_))
    assertEquals(big_decimal("32"), big_decimal("-32") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % b_double(0.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_double(1.0))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_double(-1.0))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % b_double(23.0))
    assertEquals(big_decimal("9.333"), big_decimal("-32.456") % b_double(23.123))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % b_double(-32.0))
    assertEquals(big_decimal("0.000"), big_decimal("-32.456") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-32.456") - b_double(Double.NaN_))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-32.456") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % b_double(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("123456789012345678901234567890.123456789") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("123456789012345678901234567890.123456789") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_double(0.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(1.0))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(-1.0))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(23.0))
    assertEquals(big_decimal("15.652456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(23.123))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(-32.0))
    assertEquals(big_decimal("2.339456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(-32.456))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, big_decimal("-123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(big_decimal("123456789012345678901234567890.123456789"), big_decimal("-123456789012345678901234567890.123456789") % b_double(Double.MAX_VALUE))
    assertThrowsArithmeticException("Division impossible", \ -> big_decimal("-123456789012345678901234567890.123456789") % b_double(Double.MIN_VALUE))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % b_double(0.0)))
  }

  function testBigDecimalBigIntegerRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_int("-1"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_int("23"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_int("-32"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("1") % big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("1") % big_int("-1"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_int("23"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_int("-32"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("-1") % big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("-1") % big_int("-1"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_int("23"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_int("-32"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("23") % big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("23") % big_int("-1"))
    assertEquals(big_decimal("0"), big_decimal("23") % big_int("23"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_int("-32"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % big_int("0"))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % big_int("1"))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % big_int("-1"))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % big_int("23"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_int("-32"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % big_int("0"))
    assertEquals(big_decimal("0"), big_decimal("-32") % big_int("1"))
    assertEquals(big_decimal("0"), big_decimal("-32") % big_int("-1"))
    assertEquals(big_decimal("9"), big_decimal("-32") % big_int("23"))
    assertEquals(big_decimal("0"), big_decimal("-32") % big_int("-32"))
    assertEquals(big_decimal("32"), big_decimal("-32") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("32"), big_decimal("-32") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % big_int("0"))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % big_int("1"))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % big_int("-1"))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % big_int("23"))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % big_int("-32"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % big_int("0"))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_int("1"))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_int("-1"))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_int("23"))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_int("-32"))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % big_int("0"))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_int("1"))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_int("-1"))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_int("23"))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_int("-32"))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % big_int("0")))
  }

  function testBigDecimalBigDecimalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> big_decimal("0") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("-1"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("23"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("-32"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("-32.456"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0"), big_decimal("0") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("1") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("1") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("1") % big_decimal("-1"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_decimal("23"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_decimal("23.123"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_decimal("-32"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), big_decimal("1") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-1") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("-1") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("-1") % big_decimal("-1"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_decimal("23"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_decimal("23.123"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_decimal("-32"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), big_decimal("-1") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("23") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("23") % big_decimal("-1"))
    assertEquals(big_decimal("0"), big_decimal("23") % big_decimal("23"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_decimal("23.123"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_decimal("-32"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_decimal("-32.456"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23"), big_decimal("23") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("23.123") % big_decimal("0"))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % big_decimal("1"))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % big_decimal("-1"))
    assertEquals(big_decimal("0.123"), big_decimal("23.123") % big_decimal("23"))
    assertEquals(big_decimal("0.000"), big_decimal("23.123") % big_decimal("23.123"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_decimal("-32"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_decimal("-32.456"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23.123"), big_decimal("23.123") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32") % big_decimal("0"))
    assertEquals(big_decimal("0"), big_decimal("-32") % big_decimal("1"))
    assertEquals(big_decimal("0"), big_decimal("-32") % big_decimal("-1"))
    assertEquals(big_decimal("9"), big_decimal("-32") % big_decimal("23"))
    assertEquals(big_decimal("8.877"), big_decimal("-32") % big_decimal("23.123"))
    assertEquals(big_decimal("0"), big_decimal("-32") % big_decimal("-32"))
    assertEquals(big_decimal("32"), big_decimal("-32") % big_decimal("-32.456"))
    assertEquals(big_decimal("32"), big_decimal("-32") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32"), big_decimal("-32") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-32.456") % big_decimal("0"))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % big_decimal("1"))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % big_decimal("-1"))
    assertEquals(big_decimal("9.456"), big_decimal("-32.456") % big_decimal("23"))
    assertEquals(big_decimal("9.333"), big_decimal("-32.456") % big_decimal("23.123"))
    assertEquals(big_decimal("0.456"), big_decimal("-32.456") % big_decimal("-32"))
    assertEquals(big_decimal("0.000"), big_decimal("-32.456") % big_decimal("-32.456"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32.456"), big_decimal("-32.456") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("123456789012345678901234567890.123456789") % big_decimal("0"))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("1"))
    assertEquals(big_decimal("0.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("-1"))
    assertEquals(big_decimal("15.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("23"))
    assertEquals(big_decimal("15.652456789"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("23.123"))
    assertEquals(big_decimal("18.123456789"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("-32"))
    assertEquals(big_decimal("2.339456789"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), big_decimal("123456789012345678901234567890.123456789") % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> big_decimal("-123456789012345678901234567890.123456789") % big_decimal("0"))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("1"))
    assertEquals(big_decimal("0.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("-1"))
    assertEquals(big_decimal("15.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("23"))
    assertEquals(big_decimal("15.652456789"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("23.123"))
    assertEquals(big_decimal("18.123456789"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("-32"))
    assertEquals(big_decimal("2.339456789"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("-32.456"))
    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0E-9"), big_decimal("-123456789012345678901234567890.123456789") % big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(big_decimal("0") % big_decimal("0")))
  }

}

