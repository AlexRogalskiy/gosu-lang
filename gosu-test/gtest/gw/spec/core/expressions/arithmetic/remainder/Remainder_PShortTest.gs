package gw.spec.core.expressions.arithmetic.remainder
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Remainder_PShortTest extends ArithmeticTestBase {

  function testPShortPByteRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % p_byte(0))
    assertEquals(p_int(0), p_short(0) % p_byte(1))
    assertEquals(p_int(0), p_short(0) % p_byte(-1))
    assertEquals(p_int(0), p_short(0) % p_byte(23))
    assertEquals(p_int(0), p_short(0) % p_byte(-32))
    assertEquals(p_int(0), p_short(0) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % p_byte(0))
    assertEquals(p_int(0), p_short(1) % p_byte(1))
    assertEquals(p_int(0), p_short(1) % p_byte(-1))
    assertEquals(p_int(1), p_short(1) % p_byte(23))
    assertEquals(p_int(1), p_short(1) % p_byte(-32))
    assertEquals(p_int(1), p_short(1) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(1), p_short(1) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % p_byte(0))
    assertEquals(p_int(0), p_short(-1) % p_byte(1))
    assertEquals(p_int(0), p_short(-1) % p_byte(-1))
    assertEquals(p_int(-1), p_short(-1) % p_byte(23))
    assertEquals(p_int(-1), p_short(-1) % p_byte(-32))
    assertEquals(p_int(-1), p_short(-1) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-1), p_short(-1) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % p_byte(0))
    assertEquals(p_int(0), p_short(23) % p_byte(1))
    assertEquals(p_int(0), p_short(23) % p_byte(-1))
    assertEquals(p_int(0), p_short(23) % p_byte(23))
    assertEquals(p_int(23), p_short(23) % p_byte(-32))
    assertEquals(p_int(23), p_short(23) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(23), p_short(23) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % p_byte(0))
    assertEquals(p_int(0), p_short(-32) % p_byte(1))
    assertEquals(p_int(0), p_short(-32) % p_byte(-1))
    assertEquals(p_int(-9), p_short(-32) % p_byte(23))
    assertEquals(p_int(0), p_short(-32) % p_byte(-32))
    assertEquals(p_int(-32), p_short(-32) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(-32), p_short(-32) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % p_byte(0))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_byte(1))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_byte(-1))
    assertEquals(p_int(15), p_short(Short.MAX_VALUE) % p_byte(23))
    assertEquals(p_int(31), p_short(Short.MAX_VALUE) % p_byte(-32))
    assertEquals(p_int(1), p_short(Short.MAX_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(127), p_short(Short.MAX_VALUE) % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % p_byte(0))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_byte(1))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_byte(-1))
    assertEquals(p_int(-16), p_short(Short.MIN_VALUE) % p_byte(23))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_byte(-32))
    assertEquals(p_int(-2), p_short(Short.MIN_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_byte(Byte.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) % p_byte(0)))
  }

  function testPShortByteRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % b_byte(0))
    assertEquals(p_int(0), p_short(0) % p_byte(1))
    assertEquals(p_int(0), p_short(0) % p_byte(-1))
    assertEquals(b_int(0), p_short(0) % b_byte(23))
    assertEquals(b_int(0), p_short(0) % b_byte(-32))
    assertEquals(b_int(0), p_short(0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % b_byte(0))
    assertEquals(p_int(0), p_short(1) % p_byte(1))
    assertEquals(p_int(0), p_short(1) % p_byte(-1))
    assertEquals(b_int(1), p_short(1) % b_byte(23))
    assertEquals(b_int(1), p_short(1) % b_byte(-32))
    assertEquals(b_int(1), p_short(1) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(1), p_short(1) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % b_byte(0))
    assertEquals(p_int(0), p_short(-1) % p_byte(1))
    assertEquals(p_int(0), p_short(-1) % p_byte(-1))
    assertEquals(b_int(-1), p_short(-1) % b_byte(23))
    assertEquals(b_int(-1), p_short(-1) % b_byte(-32))
    assertEquals(b_int(-1), p_short(-1) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-1), p_short(-1) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % b_byte(0))
    assertEquals(p_int(0), p_short(23) % p_byte(1))
    assertEquals(p_int(0), p_short(23) % p_byte(-1))
    assertEquals(b_int(0), p_short(23) % b_byte(23))
    assertEquals(b_int(23), p_short(23) % b_byte(-32))
    assertEquals(b_int(23), p_short(23) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(23), p_short(23) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % b_byte(0))
    assertEquals(p_int(0), p_short(-32) % p_byte(1))
    assertEquals(p_int(0), p_short(-32) % p_byte(-1))
    assertEquals(b_int(-9), p_short(-32) % b_byte(23))
    assertEquals(b_int(0), p_short(-32) % b_byte(-32))
    assertEquals(b_int(-32), p_short(-32) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(-32), p_short(-32) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % b_byte(0))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_byte(1))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_byte(-1))
    assertEquals(b_int(15), p_short(Short.MAX_VALUE) % b_byte(23))
    assertEquals(b_int(31), p_short(Short.MAX_VALUE) % b_byte(-32))
    assertEquals(b_int(1), p_short(Short.MAX_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(127), p_short(Short.MAX_VALUE) % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % b_byte(0))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_byte(1))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_byte(-1))
    assertEquals(b_int(-16), p_short(Short.MIN_VALUE) % b_byte(23))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_byte(-32))
    assertEquals(b_int(-2), p_short(Short.MIN_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_byte(Byte.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) % b_byte(0)))
  }

  function testPShortPShortRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % p_short(0))
    assertEquals(p_int(0), p_short(0) % p_short(1))
    assertEquals(p_int(0), p_short(0) % p_short(-1))
    assertEquals(p_int(0), p_short(0) % p_short(23))
    assertEquals(p_int(0), p_short(0) % p_short(-32))
    assertEquals(p_int(0), p_short(0) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % p_short(0))
    assertEquals(p_int(0), p_short(1) % p_short(1))
    assertEquals(p_int(0), p_short(1) % p_short(-1))
    assertEquals(p_int(1), p_short(1) % p_short(23))
    assertEquals(p_int(1), p_short(1) % p_short(-32))
    assertEquals(p_int(1), p_short(1) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(1), p_short(1) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % p_short(0))
    assertEquals(p_int(0), p_short(-1) % p_short(1))
    assertEquals(p_int(0), p_short(-1) % p_short(-1))
    assertEquals(p_int(-1), p_short(-1) % p_short(23))
    assertEquals(p_int(-1), p_short(-1) % p_short(-32))
    assertEquals(p_int(-1), p_short(-1) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(-1), p_short(-1) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % p_short(0))
    assertEquals(p_int(0), p_short(23) % p_short(1))
    assertEquals(p_int(0), p_short(23) % p_short(-1))
    assertEquals(p_int(0), p_short(23) % p_short(23))
    assertEquals(p_int(23), p_short(23) % p_short(-32))
    assertEquals(p_int(23), p_short(23) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(23), p_short(23) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % p_short(0))
    assertEquals(p_int(0), p_short(-32) % p_short(1))
    assertEquals(p_int(0), p_short(-32) % p_short(-1))
    assertEquals(p_int(-9), p_short(-32) % p_short(23))
    assertEquals(p_int(0), p_short(-32) % p_short(-32))
    assertEquals(p_int(-32), p_short(-32) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(-32), p_short(-32) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % p_short(0))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_short(1))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_short(-1))
    assertEquals(p_int(15), p_short(Short.MAX_VALUE) % p_short(23))
    assertEquals(p_int(31), p_short(Short.MAX_VALUE) % p_short(-32))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % p_short(0))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_short(1))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_short(-1))
    assertEquals(p_int(-16), p_short(Short.MIN_VALUE) % p_short(23))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_short(-32))
    assertEquals(p_int(-1), p_short(Short.MIN_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_short(Short.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) % p_short(0)))
  }

  function testPShortShortRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % b_short(0))
    assertEquals(b_int(0), p_short(0) % b_short(1))
    assertEquals(b_int(0), p_short(0) % b_short(-1))
    assertEquals(b_int(0), p_short(0) % b_short(23))
    assertEquals(b_int(0), p_short(0) % b_short(-32))
    assertEquals(b_int(0), p_short(0) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % b_short(0))
    assertEquals(b_int(0), p_short(1) % b_short(1))
    assertEquals(b_int(0), p_short(1) % b_short(-1))
    assertEquals(b_int(1), p_short(1) % b_short(23))
    assertEquals(b_int(1), p_short(1) % b_short(-32))
    assertEquals(b_int(1), p_short(1) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(1), p_short(1) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % b_short(0))
    assertEquals(b_int(0), p_short(-1) % b_short(1))
    assertEquals(b_int(0), p_short(-1) % b_short(-1))
    assertEquals(b_int(-1), p_short(-1) % b_short(23))
    assertEquals(b_int(-1), p_short(-1) % b_short(-32))
    assertEquals(b_int(-1), p_short(-1) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(-1), p_short(-1) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % b_short(0))
    assertEquals(b_int(0), p_short(23) % b_short(1))
    assertEquals(b_int(0), p_short(23) % b_short(-1))
    assertEquals(b_int(0), p_short(23) % b_short(23))
    assertEquals(b_int(23), p_short(23) % b_short(-32))
    assertEquals(b_int(23), p_short(23) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(23), p_short(23) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % b_short(0))
    assertEquals(b_int(0), p_short(-32) % b_short(1))
    assertEquals(b_int(0), p_short(-32) % b_short(-1))
    assertEquals(b_int(-9), p_short(-32) % b_short(23))
    assertEquals(b_int(0), p_short(-32) % b_short(-32))
    assertEquals(b_int(-32), p_short(-32) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(-32), p_short(-32) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % b_short(0))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) % b_short(1))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) % b_short(-1))
    assertEquals(b_int(15), p_short(Short.MAX_VALUE) % b_short(23))
    assertEquals(b_int(31), p_short(Short.MAX_VALUE) % b_short(-32))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % b_short(0))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_short(1))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_short(-1))
    assertEquals(b_int(-16), p_short(Short.MIN_VALUE) % b_short(23))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_short(-32))
    assertEquals(b_int(-1), p_short(Short.MIN_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_short(Short.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) % b_short(0)))
  }

  function testPShortPCharRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % p_char(0))
    assertEquals(p_int(0), p_short(0) % p_char(1))
    assertEquals(p_int(0), p_short(0) % p_char(23))
    assertEquals(p_int(0), p_short(0) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % p_char(0))
    assertEquals(p_int(0), p_short(1) % p_char(1))
    assertEquals(p_int(1), p_short(1) % p_char(23))
    assertEquals(p_int(1), p_short(1) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % p_char(0))
    assertEquals(p_int(0), p_short(-1) % p_char(1))
    assertEquals(p_int(-1), p_short(-1) % p_char(23))
    assertEquals(p_int(-1), p_short(-1) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % p_char(0))
    assertEquals(p_int(0), p_short(23) % p_char(1))
    assertEquals(p_int(0), p_short(23) % p_char(23))
    assertEquals(p_int(23), p_short(23) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % p_char(0))
    assertEquals(p_int(0), p_short(-32) % p_char(1))
    assertEquals(p_int(-9), p_short(-32) % p_char(23))
    assertEquals(p_int(-32), p_short(-32) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % p_char(0))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_char(1))
    assertEquals(p_int(15), p_short(Short.MAX_VALUE) % p_char(23))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % p_char(0))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_char(1))
    assertEquals(p_int(-16), p_short(Short.MIN_VALUE) % p_char(23))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) % p_char(Character.MAX_VALUE))

    assertEquals(int, statictypeof(p_short(0) % p_char(0)))
  }

  function testPShortCharacterRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % b_char(0))
    assertEquals(b_int(0), p_short(0) % b_char(1))
    assertEquals(b_int(0), p_short(0) % b_char(23))
    assertEquals(b_int(0), p_short(0) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % b_char(0))
    assertEquals(b_int(0), p_short(1) % b_char(1))
    assertEquals(b_int(1), p_short(1) % b_char(23))
    assertEquals(b_int(1), p_short(1) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % b_char(0))
    assertEquals(b_int(0), p_short(-1) % b_char(1))
    assertEquals(b_int(-1), p_short(-1) % b_char(23))
    assertEquals(b_int(-1), p_short(-1) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % b_char(0))
    assertEquals(b_int(0), p_short(23) % b_char(1))
    assertEquals(b_int(0), p_short(23) % b_char(23))
    assertEquals(b_int(23), p_short(23) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % b_char(0))
    assertEquals(b_int(0), p_short(-32) % b_char(1))
    assertEquals(b_int(-9), p_short(-32) % b_char(23))
    assertEquals(b_int(-32), p_short(-32) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % b_char(0))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) % b_char(1))
    assertEquals(b_int(15), p_short(Short.MAX_VALUE) % b_char(23))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % b_char(0))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_char(1))
    assertEquals(b_int(-16), p_short(Short.MIN_VALUE) % b_char(23))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) % b_char(Character.MAX_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) % b_char(0)))
  }

  function testPShortPIntRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % p_int(0))
    assertEquals(p_int(0), p_short(0) % p_int(1))
    assertEquals(p_int(0), p_short(0) % p_int(-1))
    assertEquals(p_int(0), p_short(0) % p_int(23))
    assertEquals(p_int(0), p_short(0) % p_int(-32))
    assertEquals(p_int(0), p_short(0) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(0), p_short(0) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % p_int(0))
    assertEquals(p_int(0), p_short(1) % p_int(1))
    assertEquals(p_int(0), p_short(1) % p_int(-1))
    assertEquals(p_int(1), p_short(1) % p_int(23))
    assertEquals(p_int(1), p_short(1) % p_int(-32))
    assertEquals(p_int(1), p_short(1) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(1), p_short(1) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % p_int(0))
    assertEquals(p_int(0), p_short(-1) % p_int(1))
    assertEquals(p_int(0), p_short(-1) % p_int(-1))
    assertEquals(p_int(-1), p_short(-1) % p_int(23))
    assertEquals(p_int(-1), p_short(-1) % p_int(-32))
    assertEquals(p_int(-1), p_short(-1) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-1), p_short(-1) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % p_int(0))
    assertEquals(p_int(0), p_short(23) % p_int(1))
    assertEquals(p_int(0), p_short(23) % p_int(-1))
    assertEquals(p_int(0), p_short(23) % p_int(23))
    assertEquals(p_int(23), p_short(23) % p_int(-32))
    assertEquals(p_int(23), p_short(23) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(23), p_short(23) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % p_int(0))
    assertEquals(p_int(0), p_short(-32) % p_int(1))
    assertEquals(p_int(0), p_short(-32) % p_int(-1))
    assertEquals(p_int(-9), p_short(-32) % p_int(23))
    assertEquals(p_int(0), p_short(-32) % p_int(-32))
    assertEquals(p_int(-32), p_short(-32) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-32), p_short(-32) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % p_int(0))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_int(1))
    assertEquals(p_int(0), p_short(Short.MAX_VALUE) % p_int(-1))
    assertEquals(p_int(15), p_short(Short.MAX_VALUE) % p_int(23))
    assertEquals(p_int(31), p_short(Short.MAX_VALUE) % p_int(-32))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(32767), p_short(Short.MAX_VALUE) % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % p_int(0))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_int(1))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_int(-1))
    assertEquals(p_int(-16), p_short(Short.MIN_VALUE) % p_int(23))
    assertEquals(p_int(0), p_short(Short.MIN_VALUE) % p_int(-32))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(p_int(-32768), p_short(Short.MIN_VALUE) % p_int(Integer.MIN_VALUE))

    assertEquals(int, statictypeof(p_short(0) % p_int(0)))
  }

  function testPShortIntegerRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % b_int(0))
    assertEquals(b_int(0), p_short(0) % b_int(1))
    assertEquals(b_int(0), p_short(0) % b_int(-1))
    assertEquals(b_int(0), p_short(0) % b_int(23))
    assertEquals(b_int(0), p_short(0) % b_int(-32))
    assertEquals(b_int(0), p_short(0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(0), p_short(0) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % b_int(0))
    assertEquals(b_int(0), p_short(1) % b_int(1))
    assertEquals(b_int(0), p_short(1) % b_int(-1))
    assertEquals(b_int(1), p_short(1) % b_int(23))
    assertEquals(b_int(1), p_short(1) % b_int(-32))
    assertEquals(b_int(1), p_short(1) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(1), p_short(1) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % b_int(0))
    assertEquals(b_int(0), p_short(-1) % b_int(1))
    assertEquals(b_int(0), p_short(-1) % b_int(-1))
    assertEquals(b_int(-1), p_short(-1) % b_int(23))
    assertEquals(b_int(-1), p_short(-1) % b_int(-32))
    assertEquals(b_int(-1), p_short(-1) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-1), p_short(-1) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % b_int(0))
    assertEquals(b_int(0), p_short(23) % b_int(1))
    assertEquals(b_int(0), p_short(23) % b_int(-1))
    assertEquals(b_int(0), p_short(23) % b_int(23))
    assertEquals(b_int(23), p_short(23) % b_int(-32))
    assertEquals(b_int(23), p_short(23) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(23), p_short(23) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % b_int(0))
    assertEquals(b_int(0), p_short(-32) % b_int(1))
    assertEquals(b_int(0), p_short(-32) % b_int(-1))
    assertEquals(b_int(-9), p_short(-32) % b_int(23))
    assertEquals(b_int(0), p_short(-32) % b_int(-32))
    assertEquals(b_int(-32), p_short(-32) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-32), p_short(-32) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % b_int(0))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) % b_int(1))
    assertEquals(b_int(0), p_short(Short.MAX_VALUE) % b_int(-1))
    assertEquals(b_int(15), p_short(Short.MAX_VALUE) % b_int(23))
    assertEquals(b_int(31), p_short(Short.MAX_VALUE) % b_int(-32))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(32767), p_short(Short.MAX_VALUE) % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % b_int(0))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_int(1))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_int(-1))
    assertEquals(b_int(-16), p_short(Short.MIN_VALUE) % b_int(23))
    assertEquals(b_int(0), p_short(Short.MIN_VALUE) % b_int(-32))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_int(-32768), p_short(Short.MIN_VALUE) % b_int(Integer.MIN_VALUE))

    assertEquals(Integer, statictypeof(p_short(0) % b_int(0)))
  }

  function testPShortPLongRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % p_long(0))
    assertEquals(p_long(0), p_short(0) % p_long(1))
    assertEquals(p_long(0), p_short(0) % p_long(-1))
    assertEquals(p_long(0), p_short(0) % p_long(23))
    assertEquals(p_long(0), p_short(0) % p_long(-32))
    assertEquals(p_long(0), p_short(0) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(0), p_short(0) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % p_long(0))
    assertEquals(p_long(0), p_short(1) % p_long(1))
    assertEquals(p_long(0), p_short(1) % p_long(-1))
    assertEquals(p_long(1), p_short(1) % p_long(23))
    assertEquals(p_long(1), p_short(1) % p_long(-32))
    assertEquals(p_long(1), p_short(1) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(1), p_short(1) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % p_long(0))
    assertEquals(p_long(0), p_short(-1) % p_long(1))
    assertEquals(p_long(0), p_short(-1) % p_long(-1))
    assertEquals(p_long(-1), p_short(-1) % p_long(23))
    assertEquals(p_long(-1), p_short(-1) % p_long(-32))
    assertEquals(p_long(-1), p_short(-1) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(-1), p_short(-1) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % p_long(0))
    assertEquals(p_long(0), p_short(23) % p_long(1))
    assertEquals(p_long(0), p_short(23) % p_long(-1))
    assertEquals(p_long(0), p_short(23) % p_long(23))
    assertEquals(p_long(23), p_short(23) % p_long(-32))
    assertEquals(p_long(23), p_short(23) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(23), p_short(23) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % p_long(0))
    assertEquals(p_long(0), p_short(-32) % p_long(1))
    assertEquals(p_long(0), p_short(-32) % p_long(-1))
    assertEquals(p_long(-9), p_short(-32) % p_long(23))
    assertEquals(p_long(0), p_short(-32) % p_long(-32))
    assertEquals(p_long(-32), p_short(-32) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(-32), p_short(-32) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % p_long(0))
    assertEquals(p_long(0), p_short(Short.MAX_VALUE) % p_long(1))
    assertEquals(p_long(0), p_short(Short.MAX_VALUE) % p_long(-1))
    assertEquals(p_long(15), p_short(Short.MAX_VALUE) % p_long(23))
    assertEquals(p_long(31), p_short(Short.MAX_VALUE) % p_long(-32))
    assertEquals(p_long(32767), p_short(Short.MAX_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(32767), p_short(Short.MAX_VALUE) % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % p_long(0))
    assertEquals(p_long(0), p_short(Short.MIN_VALUE) % p_long(1))
    assertEquals(p_long(0), p_short(Short.MIN_VALUE) % p_long(-1))
    assertEquals(p_long(-16), p_short(Short.MIN_VALUE) % p_long(23))
    assertEquals(p_long(0), p_short(Short.MIN_VALUE) % p_long(-32))
    assertEquals(p_long(-32768), p_short(Short.MIN_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(p_long(-32768), p_short(Short.MIN_VALUE) % p_long(Long.MIN_VALUE))

    assertEquals(long, statictypeof(p_short(0) % p_long(0)))
  }

  function testPShortLongRemainder() {
    assertThrowsArithmeticException("/ by zero", \ -> p_short(0) % b_long(0))
    assertEquals(b_long(0), p_short(0) % b_long(1))
    assertEquals(b_long(0), p_short(0) % b_long(-1))
    assertEquals(b_long(0), p_short(0) % b_long(23))
    assertEquals(b_long(0), p_short(0) % b_long(-32))
    assertEquals(b_long(0), p_short(0) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(0), p_short(0) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(1) % b_long(0))
    assertEquals(b_long(0), p_short(1) % b_long(1))
    assertEquals(b_long(0), p_short(1) % b_long(-1))
    assertEquals(b_long(1), p_short(1) % b_long(23))
    assertEquals(b_long(1), p_short(1) % b_long(-32))
    assertEquals(b_long(1), p_short(1) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(1), p_short(1) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-1) % b_long(0))
    assertEquals(b_long(0), p_short(-1) % b_long(1))
    assertEquals(b_long(0), p_short(-1) % b_long(-1))
    assertEquals(b_long(-1), p_short(-1) % b_long(23))
    assertEquals(b_long(-1), p_short(-1) % b_long(-32))
    assertEquals(b_long(-1), p_short(-1) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(-1), p_short(-1) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(23) % b_long(0))
    assertEquals(b_long(0), p_short(23) % b_long(1))
    assertEquals(b_long(0), p_short(23) % b_long(-1))
    assertEquals(b_long(0), p_short(23) % b_long(23))
    assertEquals(b_long(23), p_short(23) % b_long(-32))
    assertEquals(b_long(23), p_short(23) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(23), p_short(23) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(-32) % b_long(0))
    assertEquals(b_long(0), p_short(-32) % b_long(1))
    assertEquals(b_long(0), p_short(-32) % b_long(-1))
    assertEquals(b_long(-9), p_short(-32) % b_long(23))
    assertEquals(b_long(0), p_short(-32) % b_long(-32))
    assertEquals(b_long(-32), p_short(-32) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(-32), p_short(-32) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MAX_VALUE) % b_long(0))
    assertEquals(b_long(0), p_short(Short.MAX_VALUE) % b_long(1))
    assertEquals(b_long(0), p_short(Short.MAX_VALUE) % b_long(-1))
    assertEquals(b_long(15), p_short(Short.MAX_VALUE) % b_long(23))
    assertEquals(b_long(31), p_short(Short.MAX_VALUE) % b_long(-32))
    assertEquals(b_long(32767), p_short(Short.MAX_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(32767), p_short(Short.MAX_VALUE) % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("/ by zero", \ -> p_short(Short.MIN_VALUE) % b_long(0))
    assertEquals(b_long(0), p_short(Short.MIN_VALUE) % b_long(1))
    assertEquals(b_long(0), p_short(Short.MIN_VALUE) % b_long(-1))
    assertEquals(b_long(-16), p_short(Short.MIN_VALUE) % b_long(23))
    assertEquals(b_long(0), p_short(Short.MIN_VALUE) % b_long(-32))
    assertEquals(b_long(-32768), p_short(Short.MIN_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_long(-32768), p_short(Short.MIN_VALUE) % b_long(Long.MIN_VALUE))

    assertEquals(Long, statictypeof(p_short(0) % b_long(0)))
  }

  function testPShortPFloatRemainder() {
    assertEquals(p_float(Float.NaN_), p_short(0) % p_float(0.0))
    assertEquals(p_float(0.0), p_short(0) % p_float(1.0))
    assertEquals(p_float(0.0), p_short(0) % p_float(-1.0))
    assertEquals(p_float(0.0), p_short(0) % p_float(23.0))
    assertEquals(p_float(0.0), p_short(0) % p_float(23.123))
    assertEquals(p_float(0.0), p_short(0) % p_float(-32.0))
    assertEquals(p_float(0.0), p_short(0) % p_float(-32.456))
    assertEquals(p_float(0.0), p_short(0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(0.0), p_short(0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(0) % p_float(Float.NaN_))
    assertEquals(p_float(0.0), p_short(0) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_short(0) % p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NaN_), p_short(1) % p_float(0.0))
    assertEquals(p_float(0.0), p_short(1) % p_float(1.0))
    assertEquals(p_float(0.0), p_short(1) % p_float(-1.0))
    assertEquals(p_float(1.0), p_short(1) % p_float(23.0))
    assertEquals(p_float(1.0), p_short(1) % p_float(23.123))
    assertEquals(p_float(1.0), p_short(1) % p_float(-32.0))
    assertEquals(p_float(1.0), p_short(1) % p_float(-32.456))
    assertEquals(p_float(1.0), p_short(1) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(1.0), p_short(1) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(1) % p_float(Float.NaN_))
    assertEquals(p_float(1.0), p_short(1) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_short(1) % p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NaN_), p_short(-1) % p_float(0.0))
    assertEquals(p_float(-0.0), p_short(-1) % p_float(1.0))
    assertEquals(p_float(-0.0), p_short(-1) % p_float(-1.0))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(23.0))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(23.123))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(-32.0))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(-32.456))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(-1) % p_float(Float.NaN_))
    assertEquals(p_float(-1.0), p_short(-1) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(-0.0), p_short(-1) % p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NaN_), p_short(23) % p_float(0.0))
    assertEquals(p_float(0.0), p_short(23) % p_float(1.0))
    assertEquals(p_float(0.0), p_short(23) % p_float(-1.0))
    assertEquals(p_float(0.0), p_short(23) % p_float(23.0))
    assertEquals(p_float(23.0), p_short(23) % p_float(23.123))
    assertEquals(p_float(23.0), p_short(23) % p_float(-32.0))
    assertEquals(p_float(23.0), p_short(23) % p_float(-32.456))
    assertEquals(p_float(23.0), p_short(23) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(23.0), p_short(23) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(23) % p_float(Float.NaN_))
    assertEquals(p_float(23.0), p_short(23) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_short(23) % p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NaN_), p_short(-32) % p_float(0.0))
    assertEquals(p_float(-0.0), p_short(-32) % p_float(1.0))
    assertEquals(p_float(-0.0), p_short(-32) % p_float(-1.0))
    assertEquals(p_float(-9.0), p_short(-32) % p_float(23.0))
    assertEquals(p_float(-8.877001), p_short(-32) % p_float(23.123))
    assertEquals(p_float(-0.0), p_short(-32) % p_float(-32.0))
    assertEquals(p_float(-32.0), p_short(-32) % p_float(-32.456))
    assertEquals(p_float(-32.0), p_short(-32) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-32.0), p_short(-32) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(-32) % p_float(Float.NaN_))
    assertEquals(p_float(-32.0), p_short(-32) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(-0.0), p_short(-32) % p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NaN_), p_short(Short.MAX_VALUE) % p_float(0.0))
    assertEquals(p_float(0.0), p_short(Short.MAX_VALUE) % p_float(1.0))
    assertEquals(p_float(0.0), p_short(Short.MAX_VALUE) % p_float(-1.0))
    assertEquals(p_float(15.0), p_short(Short.MAX_VALUE) % p_float(23.0))
    assertEquals(p_float(1.710146), p_short(Short.MAX_VALUE) % p_float(23.123))
    assertEquals(p_float(31.0), p_short(Short.MAX_VALUE) % p_float(-32.0))
    assertEquals(p_float(18.894707), p_short(Short.MAX_VALUE) % p_float(-32.456))
    assertEquals(p_float(32767.0), p_short(Short.MAX_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(32767.0), p_short(Short.MAX_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(Short.MAX_VALUE) % p_float(Float.NaN_))
    assertEquals(p_float(32767.0), p_short(Short.MAX_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(0.0), p_short(Short.MAX_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(p_float(Float.NaN_), p_short(Short.MIN_VALUE) % p_float(0.0))
    assertEquals(p_float(-0.0), p_short(Short.MIN_VALUE) % p_float(1.0))
    assertEquals(p_float(-0.0), p_short(Short.MIN_VALUE) % p_float(-1.0))
    assertEquals(p_float(-16.0), p_short(Short.MIN_VALUE) % p_float(23.0))
    assertEquals(p_float(-2.710146), p_short(Short.MIN_VALUE) % p_float(23.123))
    assertEquals(p_float(-0.0), p_short(Short.MIN_VALUE) % p_float(-32.0))
    assertEquals(p_float(-19.894707), p_short(Short.MIN_VALUE) % p_float(-32.456))
    assertEquals(p_float(-32768.0), p_short(Short.MIN_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_float(-32768.0), p_short(Short.MIN_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_float(Float.NaN_), p_short(Short.MIN_VALUE) % p_float(Float.NaN_))
    assertEquals(p_float(-32768.0), p_short(Short.MIN_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(p_float(-0.0), p_short(Short.MIN_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(float, statictypeof(p_short(0) % p_float(0.0)))
  }

  function testPShortFloatRemainder() {
    assertEquals(b_float(Float.NaN_), p_short(0) % b_float(0.0))
    assertEquals(b_float(0.0), p_short(0) % b_float(1.0))
    assertEquals(b_float(0.0), p_short(0) % b_float(-1.0))
    assertEquals(b_float(0.0), p_short(0) % b_float(23.0))
    assertEquals(b_float(0.0), p_short(0) % b_float(23.123))
    assertEquals(b_float(0.0), p_short(0) % b_float(-32.0))
    assertEquals(b_float(0.0), p_short(0) % b_float(-32.456))
    assertEquals(b_float(0.0), p_short(0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(0.0), p_short(0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(0) % b_float(Float.NaN_))
    assertEquals(b_float(0.0), p_short(0) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_short(0) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), p_short(1) % b_float(0.0))
    assertEquals(b_float(0.0), p_short(1) % b_float(1.0))
    assertEquals(b_float(0.0), p_short(1) % b_float(-1.0))
    assertEquals(b_float(1.0), p_short(1) % b_float(23.0))
    assertEquals(b_float(1.0), p_short(1) % b_float(23.123))
    assertEquals(b_float(1.0), p_short(1) % b_float(-32.0))
    assertEquals(b_float(1.0), p_short(1) % b_float(-32.456))
    assertEquals(b_float(1.0), p_short(1) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(1.0), p_short(1) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(1) % b_float(Float.NaN_))
    assertEquals(b_float(1.0), p_short(1) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_short(1) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), p_short(-1) % b_float(0.0))
    assertEquals(b_float(-0.0), p_short(-1) % b_float(1.0))
    assertEquals(b_float(-0.0), p_short(-1) % b_float(-1.0))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(23.0))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(23.123))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(-32.0))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(-32.456))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(-1) % b_float(Float.NaN_))
    assertEquals(b_float(-1.0), p_short(-1) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), p_short(-1) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), p_short(23) % b_float(0.0))
    assertEquals(b_float(0.0), p_short(23) % b_float(1.0))
    assertEquals(b_float(0.0), p_short(23) % b_float(-1.0))
    assertEquals(b_float(0.0), p_short(23) % b_float(23.0))
    assertEquals(b_float(23.0), p_short(23) % b_float(23.123))
    assertEquals(b_float(23.0), p_short(23) % b_float(-32.0))
    assertEquals(b_float(23.0), p_short(23) % b_float(-32.456))
    assertEquals(b_float(23.0), p_short(23) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(23.0), p_short(23) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(23) % b_float(Float.NaN_))
    assertEquals(b_float(23.0), p_short(23) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_short(23) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), p_short(-32) % b_float(0.0))
    assertEquals(b_float(-0.0), p_short(-32) % b_float(1.0))
    assertEquals(b_float(-0.0), p_short(-32) % b_float(-1.0))
    assertEquals(b_float(-9.0), p_short(-32) % b_float(23.0))
    assertEquals(b_float(-8.877001), p_short(-32) % b_float(23.123))
    assertEquals(b_float(-0.0), p_short(-32) % b_float(-32.0))
    assertEquals(b_float(-32.0), p_short(-32) % b_float(-32.456))
    assertEquals(b_float(-32.0), p_short(-32) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32.0), p_short(-32) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(-32) % b_float(Float.NaN_))
    assertEquals(b_float(-32.0), p_short(-32) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), p_short(-32) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), p_short(Short.MAX_VALUE) % b_float(0.0))
    assertEquals(b_float(0.0), p_short(Short.MAX_VALUE) % b_float(1.0))
    assertEquals(b_float(0.0), p_short(Short.MAX_VALUE) % b_float(-1.0))
    assertEquals(b_float(15.0), p_short(Short.MAX_VALUE) % b_float(23.0))
    assertEquals(b_float(1.710146), p_short(Short.MAX_VALUE) % b_float(23.123))
    assertEquals(b_float(31.0), p_short(Short.MAX_VALUE) % b_float(-32.0))
    assertEquals(b_float(18.894707), p_short(Short.MAX_VALUE) % b_float(-32.456))
    assertEquals(b_float(32767.0), p_short(Short.MAX_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(32767.0), p_short(Short.MAX_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(Short.MAX_VALUE) % b_float(Float.NaN_))
    assertEquals(b_float(32767.0), p_short(Short.MAX_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(0.0), p_short(Short.MAX_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(b_float(Float.NaN_), p_short(Short.MIN_VALUE) % b_float(0.0))
    assertEquals(b_float(-0.0), p_short(Short.MIN_VALUE) % b_float(1.0))
    assertEquals(b_float(-0.0), p_short(Short.MIN_VALUE) % b_float(-1.0))
    assertEquals(b_float(-16.0), p_short(Short.MIN_VALUE) % b_float(23.0))
    assertEquals(b_float(-2.710146), p_short(Short.MIN_VALUE) % b_float(23.123))
    assertEquals(b_float(-0.0), p_short(Short.MIN_VALUE) % b_float(-32.0))
    assertEquals(b_float(-19.894707), p_short(Short.MIN_VALUE) % b_float(-32.456))
    assertEquals(b_float(-32768.0), p_short(Short.MIN_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_float(-32768.0), p_short(Short.MIN_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_float(Float.NaN_), p_short(Short.MIN_VALUE) % b_float(Float.NaN_))
    assertEquals(b_float(-32768.0), p_short(Short.MIN_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_float(-0.0), p_short(Short.MIN_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(Float, statictypeof(p_short(0) % b_float(0.0)))
  }

  function testPShortPDoubleRemainder() {
    assertEquals(p_double(Double.NaN_), p_short(0) % p_double(0.0))
    assertEquals(p_double(0.0), p_short(0) % p_double(1.0))
    assertEquals(p_double(0.0), p_short(0) % p_double(-1.0))
    assertEquals(p_double(0.0), p_short(0) % p_double(23.0))
    assertEquals(p_double(0.0), p_short(0) % p_double(23.123))
    assertEquals(p_double(0.0), p_short(0) % p_double(-32.0))
    assertEquals(p_double(0.0), p_short(0) % p_double(-32.456))
    assertEquals(p_double(0.0), p_short(0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_short(0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(0) % p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_short(0) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_short(0) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_short(1) % p_double(0.0))
    assertEquals(p_double(0.0), p_short(1) % p_double(1.0))
    assertEquals(p_double(0.0), p_short(1) % p_double(-1.0))
    assertEquals(p_double(1.0), p_short(1) % p_double(23.0))
    assertEquals(p_double(1.0), p_short(1) % p_double(23.123))
    assertEquals(p_double(1.0), p_short(1) % p_double(-32.0))
    assertEquals(p_double(1.0), p_short(1) % p_double(-32.456))
    assertEquals(p_double(1.0), p_short(1) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(1.0), p_short(1) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(1) % p_double(Double.NaN_))
    assertEquals(p_double(1.0), p_short(1) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_short(1) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_short(-1) % p_double(0.0))
    assertEquals(p_double(-0.0), p_short(-1) % p_double(1.0))
    assertEquals(p_double(-0.0), p_short(-1) % p_double(-1.0))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(23.0))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(23.123))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(-32.0))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(-32.456))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(-1) % p_double(Double.NaN_))
    assertEquals(p_double(-1.0), p_short(-1) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(-0.0), p_short(-1) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_short(23) % p_double(0.0))
    assertEquals(p_double(0.0), p_short(23) % p_double(1.0))
    assertEquals(p_double(0.0), p_short(23) % p_double(-1.0))
    assertEquals(p_double(0.0), p_short(23) % p_double(23.0))
    assertEquals(p_double(23.0), p_short(23) % p_double(23.123))
    assertEquals(p_double(23.0), p_short(23) % p_double(-32.0))
    assertEquals(p_double(23.0), p_short(23) % p_double(-32.456))
    assertEquals(p_double(23.0), p_short(23) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(23.0), p_short(23) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(23) % p_double(Double.NaN_))
    assertEquals(p_double(23.0), p_short(23) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_short(23) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_short(-32) % p_double(0.0))
    assertEquals(p_double(-0.0), p_short(-32) % p_double(1.0))
    assertEquals(p_double(-0.0), p_short(-32) % p_double(-1.0))
    assertEquals(p_double(-9.0), p_short(-32) % p_double(23.0))
    assertEquals(p_double(-8.876999999999999), p_short(-32) % p_double(23.123))
    assertEquals(p_double(-0.0), p_short(-32) % p_double(-32.0))
    assertEquals(p_double(-32.0), p_short(-32) % p_double(-32.456))
    assertEquals(p_double(-32.0), p_short(-32) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-32.0), p_short(-32) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(-32) % p_double(Double.NaN_))
    assertEquals(p_double(-32.0), p_short(-32) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(-0.0), p_short(-32) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_short(Short.MAX_VALUE) % p_double(0.0))
    assertEquals(p_double(0.0), p_short(Short.MAX_VALUE) % p_double(1.0))
    assertEquals(p_double(0.0), p_short(Short.MAX_VALUE) % p_double(-1.0))
    assertEquals(p_double(15.0), p_short(Short.MAX_VALUE) % p_double(23.0))
    assertEquals(p_double(1.7089999999984293), p_short(Short.MAX_VALUE) % p_double(23.123))
    assertEquals(p_double(31.0), p_short(Short.MAX_VALUE) % p_double(-32.0))
    assertEquals(p_double(18.895999999996903), p_short(Short.MAX_VALUE) % p_double(-32.456))
    assertEquals(p_double(32767.0), p_short(Short.MAX_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(32767.0), p_short(Short.MAX_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(Short.MAX_VALUE) % p_double(Double.NaN_))
    assertEquals(p_double(32767.0), p_short(Short.MAX_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_short(Short.MAX_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_short(Short.MIN_VALUE) % p_double(0.0))
    assertEquals(p_double(-0.0), p_short(Short.MIN_VALUE) % p_double(1.0))
    assertEquals(p_double(-0.0), p_short(Short.MIN_VALUE) % p_double(-1.0))
    assertEquals(p_double(-16.0), p_short(Short.MIN_VALUE) % p_double(23.0))
    assertEquals(p_double(-2.7089999999984293), p_short(Short.MIN_VALUE) % p_double(23.123))
    assertEquals(p_double(-0.0), p_short(Short.MIN_VALUE) % p_double(-32.0))
    assertEquals(p_double(-19.895999999996903), p_short(Short.MIN_VALUE) % p_double(-32.456))
    assertEquals(p_double(-32768.0), p_short(Short.MIN_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-32768.0), p_short(Short.MIN_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_short(Short.MIN_VALUE) % p_double(Double.NaN_))
    assertEquals(p_double(-32768.0), p_short(Short.MIN_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(-0.0), p_short(Short.MIN_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_short(0) % p_double(0.0)))
  }

  function testPShortDoubleRemainder() {
    assertEquals(b_double(Double.NaN_), p_short(0) % b_double(0.0))
    assertEquals(b_double(0.0), p_short(0) % b_double(1.0))
    assertEquals(b_double(0.0), p_short(0) % b_double(-1.0))
    assertEquals(b_double(0.0), p_short(0) % b_double(23.0))
    assertEquals(b_double(0.0), p_short(0) % b_double(23.123))
    assertEquals(b_double(0.0), p_short(0) % b_double(-32.0))
    assertEquals(b_double(0.0), p_short(0) % b_double(-32.456))
    assertEquals(b_double(0.0), p_short(0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_short(0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(0) % b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_short(0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_short(0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_short(1) % b_double(0.0))
    assertEquals(b_double(0.0), p_short(1) % b_double(1.0))
    assertEquals(b_double(0.0), p_short(1) % b_double(-1.0))
    assertEquals(b_double(1.0), p_short(1) % b_double(23.0))
    assertEquals(b_double(1.0), p_short(1) % b_double(23.123))
    assertEquals(b_double(1.0), p_short(1) % b_double(-32.0))
    assertEquals(b_double(1.0), p_short(1) % b_double(-32.456))
    assertEquals(b_double(1.0), p_short(1) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), p_short(1) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(1) % b_double(Double.NaN_))
    assertEquals(b_double(1.0), p_short(1) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_short(1) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_short(-1) % b_double(0.0))
    assertEquals(b_double(-0.0), p_short(-1) % b_double(1.0))
    assertEquals(b_double(-0.0), p_short(-1) % b_double(-1.0))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(23.0))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(23.123))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(-32.0))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(-32.456))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(-1) % b_double(Double.NaN_))
    assertEquals(b_double(-1.0), p_short(-1) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), p_short(-1) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_short(23) % b_double(0.0))
    assertEquals(b_double(0.0), p_short(23) % b_double(1.0))
    assertEquals(b_double(0.0), p_short(23) % b_double(-1.0))
    assertEquals(b_double(0.0), p_short(23) % b_double(23.0))
    assertEquals(b_double(23.0), p_short(23) % b_double(23.123))
    assertEquals(b_double(23.0), p_short(23) % b_double(-32.0))
    assertEquals(b_double(23.0), p_short(23) % b_double(-32.456))
    assertEquals(b_double(23.0), p_short(23) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), p_short(23) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(23) % b_double(Double.NaN_))
    assertEquals(b_double(23.0), p_short(23) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_short(23) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_short(-32) % b_double(0.0))
    assertEquals(b_double(-0.0), p_short(-32) % b_double(1.0))
    assertEquals(b_double(-0.0), p_short(-32) % b_double(-1.0))
    assertEquals(b_double(-9.0), p_short(-32) % b_double(23.0))
    assertEquals(b_double(-8.876999999999999), p_short(-32) % b_double(23.123))
    assertEquals(b_double(-0.0), p_short(-32) % b_double(-32.0))
    assertEquals(b_double(-32.0), p_short(-32) % b_double(-32.456))
    assertEquals(b_double(-32.0), p_short(-32) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), p_short(-32) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(-32) % b_double(Double.NaN_))
    assertEquals(b_double(-32.0), p_short(-32) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), p_short(-32) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_short(Short.MAX_VALUE) % b_double(0.0))
    assertEquals(b_double(0.0), p_short(Short.MAX_VALUE) % b_double(1.0))
    assertEquals(b_double(0.0), p_short(Short.MAX_VALUE) % b_double(-1.0))
    assertEquals(b_double(15.0), p_short(Short.MAX_VALUE) % b_double(23.0))
    assertEquals(b_double(1.7089999999984293), p_short(Short.MAX_VALUE) % b_double(23.123))
    assertEquals(b_double(31.0), p_short(Short.MAX_VALUE) % b_double(-32.0))
    assertEquals(b_double(18.895999999996903), p_short(Short.MAX_VALUE) % b_double(-32.456))
    assertEquals(b_double(32767.0), p_short(Short.MAX_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(32767.0), p_short(Short.MAX_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(Short.MAX_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(32767.0), p_short(Short.MAX_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_short(Short.MAX_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_short(Short.MIN_VALUE) % b_double(0.0))
    assertEquals(b_double(-0.0), p_short(Short.MIN_VALUE) % b_double(1.0))
    assertEquals(b_double(-0.0), p_short(Short.MIN_VALUE) % b_double(-1.0))
    assertEquals(b_double(-16.0), p_short(Short.MIN_VALUE) % b_double(23.0))
    assertEquals(b_double(-2.7089999999984293), p_short(Short.MIN_VALUE) % b_double(23.123))
    assertEquals(b_double(-0.0), p_short(Short.MIN_VALUE) % b_double(-32.0))
    assertEquals(b_double(-19.895999999996903), p_short(Short.MIN_VALUE) % b_double(-32.456))
    assertEquals(b_double(-32768.0), p_short(Short.MIN_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32768.0), p_short(Short.MIN_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_short(Short.MIN_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(-32768.0), p_short(Short.MIN_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), p_short(Short.MIN_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_short(0) % b_double(0.0)))
  }

  function testPShortBigIntegerRemainder() {
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(0) % big_int("0"))
    assertEquals(big_int("0"), p_short(0) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(0) % big_int("-1"))
    assertEquals(big_int("0"), p_short(0) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(0) % big_int("-32"))
    assertEquals(big_int("0"), p_short(0) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(1) % big_int("0"))
    assertEquals(big_int("0"), p_short(1) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(1) % big_int("-1"))
    assertEquals(big_int("1"), p_short(1) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(1) % big_int("-32"))
    assertEquals(big_int("1"), p_short(1) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(1) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-1) % big_int("0"))
    assertEquals(big_int("0"), p_short(-1) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-1) % big_int("-1"))
    assertEquals(big_int("22"), p_short(-1) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-1) % big_int("-32"))
    assertEquals(big_int("123456789012345678901234567889"), p_short(-1) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-1) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(23) % big_int("0"))
    assertEquals(big_int("0"), p_short(23) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(23) % big_int("-1"))
    assertEquals(big_int("0"), p_short(23) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(23) % big_int("-32"))
    assertEquals(big_int("23"), p_short(23) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(23) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-32) % big_int("0"))
    assertEquals(big_int("0"), p_short(-32) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-32) % big_int("-1"))
    assertEquals(big_int("14"), p_short(-32) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-32) % big_int("-32"))
    assertEquals(big_int("123456789012345678901234567858"), p_short(-32) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(-32) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MAX_VALUE) % big_int("0"))
    assertEquals(big_int("0"), p_short(Short.MAX_VALUE) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MAX_VALUE) % big_int("-1"))
    assertEquals(big_int("15"), p_short(Short.MAX_VALUE) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MAX_VALUE) % big_int("-32"))
    assertEquals(big_int("32767"), p_short(Short.MAX_VALUE) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MAX_VALUE) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MIN_VALUE) % big_int("0"))
    assertEquals(big_int("0"), p_short(Short.MIN_VALUE) % big_int("1"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MIN_VALUE) % big_int("-1"))
    assertEquals(big_int("7"), p_short(Short.MIN_VALUE) % big_int("23"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MIN_VALUE) % big_int("-32"))
    assertEquals(big_int("123456789012345678901234535122"), p_short(Short.MIN_VALUE) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("BigInteger: modulus not positive", \ -> p_short(Short.MIN_VALUE) % big_int("-123456789012345678901234567890"))

    assertEquals(BigInteger, statictypeof(p_short(0) % big_int("0")))
  }

  function testPShortBigDecimalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> p_short(0) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("-1"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("23"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("-32"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("-32.456"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0"), p_short(0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(1) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(1) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(1) % big_decimal("-1"))
    assertEquals(big_decimal("1"), p_short(1) % big_decimal("23"))
    assertEquals(big_decimal("1"), p_short(1) % big_decimal("23.123"))
    assertEquals(big_decimal("1"), p_short(1) % big_decimal("-32"))
    assertEquals(big_decimal("1"), p_short(1) % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), p_short(1) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), p_short(1) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(-1) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(-1) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(-1) % big_decimal("-1"))
    assertEquals(big_decimal("1"), p_short(-1) % big_decimal("23"))
    assertEquals(big_decimal("1"), p_short(-1) % big_decimal("23.123"))
    assertEquals(big_decimal("1"), p_short(-1) % big_decimal("-32"))
    assertEquals(big_decimal("1"), p_short(-1) % big_decimal("-32.456"))
    assertEquals(big_decimal("1"), p_short(-1) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1"), p_short(-1) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(23) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(23) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(23) % big_decimal("-1"))
    assertEquals(big_decimal("0"), p_short(23) % big_decimal("23"))
    assertEquals(big_decimal("23"), p_short(23) % big_decimal("23.123"))
    assertEquals(big_decimal("23"), p_short(23) % big_decimal("-32"))
    assertEquals(big_decimal("23"), p_short(23) % big_decimal("-32.456"))
    assertEquals(big_decimal("23"), p_short(23) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23"), p_short(23) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(-32) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(-32) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(-32) % big_decimal("-1"))
    assertEquals(big_decimal("9"), p_short(-32) % big_decimal("23"))
    assertEquals(big_decimal("8.877"), p_short(-32) % big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_short(-32) % big_decimal("-32"))
    assertEquals(big_decimal("32"), p_short(-32) % big_decimal("-32.456"))
    assertEquals(big_decimal("32"), p_short(-32) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32"), p_short(-32) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(Short.MAX_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(Short.MAX_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(Short.MAX_VALUE) % big_decimal("-1"))
    assertEquals(big_decimal("15"), p_short(Short.MAX_VALUE) % big_decimal("23"))
    assertEquals(big_decimal("1.709"), p_short(Short.MAX_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("31"), p_short(Short.MAX_VALUE) % big_decimal("-32"))
    assertEquals(big_decimal("18.896"), p_short(Short.MAX_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("32767"), p_short(Short.MAX_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32767"), p_short(Short.MAX_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_short(Short.MIN_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("0"), p_short(Short.MIN_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("0"), p_short(Short.MIN_VALUE) % big_decimal("-1"))
    assertEquals(big_decimal("16"), p_short(Short.MIN_VALUE) % big_decimal("23"))
    assertEquals(big_decimal("2.709"), p_short(Short.MIN_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("0"), p_short(Short.MIN_VALUE) % big_decimal("-32"))
    assertEquals(big_decimal("19.896"), p_short(Short.MIN_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("32768"), p_short(Short.MIN_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32768"), p_short(Short.MIN_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_short(0) % big_decimal("0")))
  }

}

