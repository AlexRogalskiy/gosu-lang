package gw.spec.core.expressions.arithmetic.remainder
uses java.lang.Byte
uses java.lang.Character
uses java.lang.Integer
uses java.lang.Short
uses java.lang.Long
uses java.lang.Float
uses java.lang.Double
uses java.math.BigInteger
uses java.math.BigDecimal
uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

class Remainder_PDoubleTest extends ArithmeticTestBase {

  function testPDoublePByteRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_byte(0))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(1))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(-1))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(23))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(-32))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_byte(0))
    assertEquals(p_double(0.0), p_double(1.0) % p_byte(1))
    assertEquals(p_double(0.0), p_double(1.0) % p_byte(-1))
    assertEquals(p_double(1.0), p_double(1.0) % p_byte(23))
    assertEquals(p_double(1.0), p_double(1.0) % p_byte(-32))
    assertEquals(p_double(1.0), p_double(1.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(1.0), p_double(1.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_byte(0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_byte(1))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_byte(-1))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_byte(23))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_byte(-32))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_byte(0))
    assertEquals(p_double(0.0), p_double(23.0) % p_byte(1))
    assertEquals(p_double(0.0), p_double(23.0) % p_byte(-1))
    assertEquals(p_double(0.0), p_double(23.0) % p_byte(23))
    assertEquals(p_double(23.0), p_double(23.0) % p_byte(-32))
    assertEquals(p_double(23.0), p_double(23.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(23.0), p_double(23.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_byte(0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_byte(1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_byte(-1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_byte(23))
    assertEquals(p_double(23.123), p_double(23.123) % p_byte(-32))
    assertEquals(p_double(23.123), p_double(23.123) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(23.123), p_double(23.123) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_byte(0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_byte(1))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_byte(-1))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_byte(23))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_byte(-32))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_byte(0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_byte(1))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_byte(-1))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_byte(23))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_byte(-32))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_byte(0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_byte(1))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_byte(-1))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_byte(23))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_byte(-32))
    assertEquals(p_double(99.0), p_double(Double.MAX_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_byte(Byte.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_byte(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(-1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(23))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(-32))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(Byte.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(Byte.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_byte(0)))
  }

  function testPDoubleByteRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_byte(0))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(1))
    assertEquals(p_double(0.0), p_double(0.0) % p_byte(-1))
    assertEquals(b_double(0.0), p_double(0.0) % b_byte(23))
    assertEquals(b_double(0.0), p_double(0.0) % b_byte(-32))
    assertEquals(b_double(0.0), p_double(0.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_byte(0))
    assertEquals(p_double(0.0), p_double(1.0) % p_byte(1))
    assertEquals(p_double(0.0), p_double(1.0) % p_byte(-1))
    assertEquals(b_double(1.0), p_double(1.0) % b_byte(23))
    assertEquals(b_double(1.0), p_double(1.0) % b_byte(-32))
    assertEquals(b_double(1.0), p_double(1.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(1.0), p_double(1.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_byte(0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_byte(1))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_byte(-1))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_byte(23))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_byte(-32))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_byte(0))
    assertEquals(p_double(0.0), p_double(23.0) % p_byte(1))
    assertEquals(p_double(0.0), p_double(23.0) % p_byte(-1))
    assertEquals(b_double(0.0), p_double(23.0) % b_byte(23))
    assertEquals(b_double(23.0), p_double(23.0) % b_byte(-32))
    assertEquals(b_double(23.0), p_double(23.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(23.0), p_double(23.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_byte(0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_byte(1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_byte(-1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_byte(23))
    assertEquals(b_double(23.123), p_double(23.123) % b_byte(-32))
    assertEquals(b_double(23.123), p_double(23.123) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(23.123), p_double(23.123) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_byte(0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_byte(1))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_byte(-1))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_byte(23))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_byte(-32))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_byte(0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_byte(1))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_byte(-1))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_byte(23))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_byte(-32))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_byte(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_byte(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_byte(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_byte(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_byte(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_byte(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_byte(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_byte(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_byte(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_byte(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_byte(0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_byte(1))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_byte(-1))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_byte(23))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_byte(-32))
    assertEquals(b_double(99.0), p_double(Double.MAX_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_byte(Byte.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_byte(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_byte(-1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_byte(23))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_byte(-32))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_byte(Byte.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_byte(Byte.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_byte(0)))
  }

  function testPDoublePShortRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_short(0))
    assertEquals(p_double(0.0), p_double(0.0) % p_short(1))
    assertEquals(p_double(0.0), p_double(0.0) % p_short(-1))
    assertEquals(p_double(0.0), p_double(0.0) % p_short(23))
    assertEquals(p_double(0.0), p_double(0.0) % p_short(-32))
    assertEquals(p_double(0.0), p_double(0.0) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_short(0))
    assertEquals(p_double(0.0), p_double(1.0) % p_short(1))
    assertEquals(p_double(0.0), p_double(1.0) % p_short(-1))
    assertEquals(p_double(1.0), p_double(1.0) % p_short(23))
    assertEquals(p_double(1.0), p_double(1.0) % p_short(-32))
    assertEquals(p_double(1.0), p_double(1.0) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(1.0), p_double(1.0) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_short(0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_short(1))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_short(-1))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_short(23))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_short(-32))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_short(0))
    assertEquals(p_double(0.0), p_double(23.0) % p_short(1))
    assertEquals(p_double(0.0), p_double(23.0) % p_short(-1))
    assertEquals(p_double(0.0), p_double(23.0) % p_short(23))
    assertEquals(p_double(23.0), p_double(23.0) % p_short(-32))
    assertEquals(p_double(23.0), p_double(23.0) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(23.0), p_double(23.0) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_short(0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_short(1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_short(-1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_short(23))
    assertEquals(p_double(23.123), p_double(23.123) % p_short(-32))
    assertEquals(p_double(23.123), p_double(23.123) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(23.123), p_double(23.123) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_short(0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_short(1))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_short(-1))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_short(23))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_short(-32))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_short(0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_short(1))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_short(-1))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_short(23))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_short(-32))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_short(0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_short(1))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_short(-1))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_short(23))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_short(-32))
    assertEquals(p_double(30735.0), p_double(Double.MAX_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_short(Short.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_short(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_short(1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_short(-1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_short(23))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_short(-32))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_short(Short.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_short(Short.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_short(0)))
  }

  function testPDoubleShortRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_short(0))
    assertEquals(b_double(0.0), p_double(0.0) % b_short(1))
    assertEquals(b_double(0.0), p_double(0.0) % b_short(-1))
    assertEquals(b_double(0.0), p_double(0.0) % b_short(23))
    assertEquals(b_double(0.0), p_double(0.0) % b_short(-32))
    assertEquals(b_double(0.0), p_double(0.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_short(0))
    assertEquals(b_double(0.0), p_double(1.0) % b_short(1))
    assertEquals(b_double(0.0), p_double(1.0) % b_short(-1))
    assertEquals(b_double(1.0), p_double(1.0) % b_short(23))
    assertEquals(b_double(1.0), p_double(1.0) % b_short(-32))
    assertEquals(b_double(1.0), p_double(1.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(1.0), p_double(1.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_short(0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_short(1))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_short(-1))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_short(23))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_short(-32))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_short(0))
    assertEquals(b_double(0.0), p_double(23.0) % b_short(1))
    assertEquals(b_double(0.0), p_double(23.0) % b_short(-1))
    assertEquals(b_double(0.0), p_double(23.0) % b_short(23))
    assertEquals(b_double(23.0), p_double(23.0) % b_short(-32))
    assertEquals(b_double(23.0), p_double(23.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(23.0), p_double(23.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_short(0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_short(1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_short(-1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_short(23))
    assertEquals(b_double(23.123), p_double(23.123) % b_short(-32))
    assertEquals(b_double(23.123), p_double(23.123) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(23.123), p_double(23.123) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_short(0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_short(1))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_short(-1))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_short(23))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_short(-32))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_short(0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_short(1))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_short(-1))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_short(23))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_short(-32))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_short(0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_short(1))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_short(-1))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_short(23))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_short(-32))
    assertEquals(b_double(30735.0), p_double(Double.MAX_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_short(Short.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_short(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_short(1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_short(-1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_short(23))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_short(-32))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_short(Short.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_short(Short.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_short(0)))
  }

  function testPDoublePCharRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_char(0))
    assertEquals(p_double(0.0), p_double(0.0) % p_char(1))
    assertEquals(p_double(0.0), p_double(0.0) % p_char(23))
    assertEquals(p_double(0.0), p_double(0.0) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_char(0))
    assertEquals(p_double(0.0), p_double(1.0) % p_char(1))
    assertEquals(p_double(1.0), p_double(1.0) % p_char(23))
    assertEquals(p_double(1.0), p_double(1.0) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_char(0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_char(1))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_char(23))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_char(0))
    assertEquals(p_double(0.0), p_double(23.0) % p_char(1))
    assertEquals(p_double(0.0), p_double(23.0) % p_char(23))
    assertEquals(p_double(23.0), p_double(23.0) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_char(0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_char(1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_char(23))
    assertEquals(p_double(23.123), p_double(23.123) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_char(0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_char(1))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_char(23))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_char(0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_char(1))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_char(23))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_char(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_char(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_char(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_char(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_char(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_char(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_char(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_char(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_char(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_char(0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_char(1))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_char(23))
    assertEquals(p_double(63488.0), p_double(Double.MAX_VALUE) % p_char(Character.MAX_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_char(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_char(1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_char(23))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_char(Character.MAX_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_char(0)))
  }

  function testPDoubleCharacterRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_char(0))
    assertEquals(b_double(0.0), p_double(0.0) % b_char(1))
    assertEquals(b_double(0.0), p_double(0.0) % b_char(23))
    assertEquals(b_double(0.0), p_double(0.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_char(0))
    assertEquals(b_double(0.0), p_double(1.0) % b_char(1))
    assertEquals(b_double(1.0), p_double(1.0) % b_char(23))
    assertEquals(b_double(1.0), p_double(1.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_char(0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_char(1))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_char(23))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_char(0))
    assertEquals(b_double(0.0), p_double(23.0) % b_char(1))
    assertEquals(b_double(0.0), p_double(23.0) % b_char(23))
    assertEquals(b_double(23.0), p_double(23.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_char(0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_char(1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_char(23))
    assertEquals(b_double(23.123), p_double(23.123) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_char(0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_char(1))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_char(23))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_char(0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_char(1))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_char(23))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_char(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_char(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_char(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_char(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_char(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_char(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_char(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_char(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_char(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_char(0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_char(1))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_char(23))
    assertEquals(b_double(63488.0), p_double(Double.MAX_VALUE) % b_char(Character.MAX_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_char(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_char(1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_char(23))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_char(Character.MAX_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_char(0)))
  }

  function testPDoublePIntRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_int(0))
    assertEquals(p_double(0.0), p_double(0.0) % p_int(1))
    assertEquals(p_double(0.0), p_double(0.0) % p_int(-1))
    assertEquals(p_double(0.0), p_double(0.0) % p_int(23))
    assertEquals(p_double(0.0), p_double(0.0) % p_int(-32))
    assertEquals(p_double(0.0), p_double(0.0) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_int(0))
    assertEquals(p_double(0.0), p_double(1.0) % p_int(1))
    assertEquals(p_double(0.0), p_double(1.0) % p_int(-1))
    assertEquals(p_double(1.0), p_double(1.0) % p_int(23))
    assertEquals(p_double(1.0), p_double(1.0) % p_int(-32))
    assertEquals(p_double(1.0), p_double(1.0) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(1.0), p_double(1.0) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_int(0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_int(1))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_int(-1))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_int(23))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_int(-32))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_int(0))
    assertEquals(p_double(0.0), p_double(23.0) % p_int(1))
    assertEquals(p_double(0.0), p_double(23.0) % p_int(-1))
    assertEquals(p_double(0.0), p_double(23.0) % p_int(23))
    assertEquals(p_double(23.0), p_double(23.0) % p_int(-32))
    assertEquals(p_double(23.0), p_double(23.0) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(23.0), p_double(23.0) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_int(0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_int(1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_int(-1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_int(23))
    assertEquals(p_double(23.123), p_double(23.123) % p_int(-32))
    assertEquals(p_double(23.123), p_double(23.123) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(23.123), p_double(23.123) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_int(0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_int(1))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_int(-1))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_int(23))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_int(-32))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_int(0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_int(1))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_int(-1))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_int(23))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_int(-32))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_int(0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_int(1))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_int(-1))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_int(23))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_int(-32))
    assertEquals(p_double(Double.parseDouble("2.147482625E9")), p_double(Double.MAX_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_int(Integer.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_int(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_int(1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_int(-1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_int(23))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_int(-32))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_int(Integer.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_int(Integer.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_int(0)))
  }

  function testPDoubleIntegerRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_int(0))
    assertEquals(b_double(0.0), p_double(0.0) % b_int(1))
    assertEquals(b_double(0.0), p_double(0.0) % b_int(-1))
    assertEquals(b_double(0.0), p_double(0.0) % b_int(23))
    assertEquals(b_double(0.0), p_double(0.0) % b_int(-32))
    assertEquals(b_double(0.0), p_double(0.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_int(0))
    assertEquals(b_double(0.0), p_double(1.0) % b_int(1))
    assertEquals(b_double(0.0), p_double(1.0) % b_int(-1))
    assertEquals(b_double(1.0), p_double(1.0) % b_int(23))
    assertEquals(b_double(1.0), p_double(1.0) % b_int(-32))
    assertEquals(b_double(1.0), p_double(1.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(1.0), p_double(1.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_int(0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_int(1))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_int(-1))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_int(23))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_int(-32))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_int(0))
    assertEquals(b_double(0.0), p_double(23.0) % b_int(1))
    assertEquals(b_double(0.0), p_double(23.0) % b_int(-1))
    assertEquals(b_double(0.0), p_double(23.0) % b_int(23))
    assertEquals(b_double(23.0), p_double(23.0) % b_int(-32))
    assertEquals(b_double(23.0), p_double(23.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(23.0), p_double(23.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_int(0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_int(1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_int(-1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_int(23))
    assertEquals(b_double(23.123), p_double(23.123) % b_int(-32))
    assertEquals(b_double(23.123), p_double(23.123) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(23.123), p_double(23.123) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_int(0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_int(1))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_int(-1))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_int(23))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_int(-32))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_int(0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_int(1))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_int(-1))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_int(23))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_int(-32))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_int(0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_int(1))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_int(-1))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_int(23))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_int(-32))
    assertEquals(b_double(Double.parseDouble("2.147482625E9")), p_double(Double.MAX_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_int(Integer.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_int(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_int(1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_int(-1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_int(23))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_int(-32))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_int(Integer.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_int(Integer.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_int(0)))
  }

  function testPDoublePLongRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_long(0))
    assertEquals(p_double(0.0), p_double(0.0) % p_long(1))
    assertEquals(p_double(0.0), p_double(0.0) % p_long(-1))
    assertEquals(p_double(0.0), p_double(0.0) % p_long(23))
    assertEquals(p_double(0.0), p_double(0.0) % p_long(-32))
    assertEquals(p_double(0.0), p_double(0.0) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_long(0))
    assertEquals(p_double(0.0), p_double(1.0) % p_long(1))
    assertEquals(p_double(0.0), p_double(1.0) % p_long(-1))
    assertEquals(p_double(1.0), p_double(1.0) % p_long(23))
    assertEquals(p_double(1.0), p_double(1.0) % p_long(-32))
    assertEquals(p_double(1.0), p_double(1.0) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(1.0), p_double(1.0) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_long(0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_long(1))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_long(-1))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_long(23))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_long(-32))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_long(0))
    assertEquals(p_double(0.0), p_double(23.0) % p_long(1))
    assertEquals(p_double(0.0), p_double(23.0) % p_long(-1))
    assertEquals(p_double(0.0), p_double(23.0) % p_long(23))
    assertEquals(p_double(23.0), p_double(23.0) % p_long(-32))
    assertEquals(p_double(23.0), p_double(23.0) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(23.0), p_double(23.0) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_long(0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_long(1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_long(-1))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_long(23))
    assertEquals(p_double(23.123), p_double(23.123) % p_long(-32))
    assertEquals(p_double(23.123), p_double(23.123) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(23.123), p_double(23.123) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_long(0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_long(1))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_long(-1))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_long(23))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_long(-32))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_long(0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_long(1))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_long(-1))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_long(23))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_long(-32))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(-1))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(23))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(-32))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_long(0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_long(1))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_long(-1))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_long(23))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_long(-32))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_long(Long.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_long(0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_long(1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_long(-1))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_long(23))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_long(-32))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_long(Long.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_long(Long.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_long(0)))
  }

  function testPDoubleLongRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_long(0))
    assertEquals(b_double(0.0), p_double(0.0) % b_long(1))
    assertEquals(b_double(0.0), p_double(0.0) % b_long(-1))
    assertEquals(b_double(0.0), p_double(0.0) % b_long(23))
    assertEquals(b_double(0.0), p_double(0.0) % b_long(-32))
    assertEquals(b_double(0.0), p_double(0.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_long(0))
    assertEquals(b_double(0.0), p_double(1.0) % b_long(1))
    assertEquals(b_double(0.0), p_double(1.0) % b_long(-1))
    assertEquals(b_double(1.0), p_double(1.0) % b_long(23))
    assertEquals(b_double(1.0), p_double(1.0) % b_long(-32))
    assertEquals(b_double(1.0), p_double(1.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(1.0), p_double(1.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_long(0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_long(1))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_long(-1))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_long(23))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_long(-32))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_long(0))
    assertEquals(b_double(0.0), p_double(23.0) % b_long(1))
    assertEquals(b_double(0.0), p_double(23.0) % b_long(-1))
    assertEquals(b_double(0.0), p_double(23.0) % b_long(23))
    assertEquals(b_double(23.0), p_double(23.0) % b_long(-32))
    assertEquals(b_double(23.0), p_double(23.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(23.0), p_double(23.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_long(0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_long(1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_long(-1))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_long(23))
    assertEquals(b_double(23.123), p_double(23.123) % b_long(-32))
    assertEquals(b_double(23.123), p_double(23.123) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(23.123), p_double(23.123) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_long(0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_long(1))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_long(-1))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_long(23))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_long(-32))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_long(0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_long(1))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_long(-1))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_long(23))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_long(-32))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(-1))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(23))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(-32))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_long(0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_long(1))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_long(-1))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_long(23))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_long(-32))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_long(Long.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_long(0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_long(1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_long(-1))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_long(23))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_long(-32))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_long(Long.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_long(Long.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_long(0)))
  }

  function testPDoublePFloatRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_float(0.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(1.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(-1.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(23.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(23.123))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(-32.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(-32.456))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_float(Float.NaN_))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_float(0.0))
    assertEquals(p_double(0.0), p_double(1.0) % p_float(1.0))
    assertEquals(p_double(0.0), p_double(1.0) % p_float(-1.0))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(23.0))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(23.123))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(-32.0))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(-32.456))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_float(Float.NaN_))
    assertEquals(p_double(1.0), p_double(1.0) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(1.0) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_float(0.0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_float(1.0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_float(-1.0))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(23.0))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(23.123))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(-32.0))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(-32.456))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_float(Float.NaN_))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_float(0.0))
    assertEquals(p_double(0.0), p_double(23.0) % p_float(1.0))
    assertEquals(p_double(0.0), p_double(23.0) % p_float(-1.0))
    assertEquals(p_double(0.0), p_double(23.0) % p_float(23.0))
    assertEquals(p_double(23.0), p_double(23.0) % p_float(23.123))
    assertEquals(p_double(23.0), p_double(23.0) % p_float(-32.0))
    assertEquals(p_double(23.0), p_double(23.0) % p_float(-32.456))
    assertEquals(p_double(23.0), p_double(23.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(23.0), p_double(23.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_float(Float.NaN_))
    assertEquals(p_double(23.0), p_double(23.0) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(23.0) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_float(0.0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_float(1.0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_float(-1.0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_float(23.0))
    assertEquals(p_double(Double.parseDouble("8.087158214209467E-7")), p_double(23.123) % p_float(23.123))
    assertEquals(p_double(23.123), p_double(23.123) % p_float(-32.0))
    assertEquals(p_double(23.123), p_double(23.123) % p_float(-32.456))
    assertEquals(p_double(23.123), p_double(23.123) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(23.123), p_double(23.123) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_float(Float.NaN_))
    assertEquals(p_double(23.123), p_double(23.123) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(23.123) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_float(0.0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_float(1.0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_float(-1.0))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_float(23.0))
    assertEquals(p_double(-8.87700080871582), p_double(-32.0) % p_float(23.123))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_float(-32.0))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_float(-32.456))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_float(Float.NaN_))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_float(0.0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_float(1.0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_float(-1.0))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_float(23.0))
    assertEquals(p_double(-9.333000808715823), p_double(-32.456) % p_float(23.123))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_float(-32.0))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_float(-32.456))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_float(Float.NaN_))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(-32.456) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(Float.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(Float.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(Float.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_float(0.0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_float(1.0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_float(-1.0))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_float(23.0))
    assertEquals(p_double(10.911537170410156), p_double(Double.MAX_VALUE) % p_float(23.123))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_float(-32.0))
    assertEquals(p_double(27.12767791748047), p_double(Double.MAX_VALUE) % p_float(-32.456))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_float(Float.NaN_))
    assertEquals(p_double(Double.parseDouble("5.030037581705614E33")), p_double(Double.MAX_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_float(0.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(1.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(-1.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(23.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(23.123))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(-32.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(-32.456))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(Float.POSITIVE_INFINITY))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(Float.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_float(Float.NaN_))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(Float.MAX_VALUE))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_float(Float.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_float(0.0)))
  }

  function testPDoubleFloatRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_float(0.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(1.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(-1.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(23.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(23.123))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(-32.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(-32.456))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_float(Float.NaN_))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_float(0.0))
    assertEquals(b_double(0.0), p_double(1.0) % b_float(1.0))
    assertEquals(b_double(0.0), p_double(1.0) % b_float(-1.0))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(23.0))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(23.123))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(-32.0))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(-32.456))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_float(Float.NaN_))
    assertEquals(b_double(1.0), p_double(1.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(1.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_float(0.0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_float(1.0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_float(-1.0))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(23.0))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(23.123))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(-32.0))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(-32.456))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_float(Float.NaN_))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_float(0.0))
    assertEquals(b_double(0.0), p_double(23.0) % b_float(1.0))
    assertEquals(b_double(0.0), p_double(23.0) % b_float(-1.0))
    assertEquals(b_double(0.0), p_double(23.0) % b_float(23.0))
    assertEquals(b_double(23.0), p_double(23.0) % b_float(23.123))
    assertEquals(b_double(23.0), p_double(23.0) % b_float(-32.0))
    assertEquals(b_double(23.0), p_double(23.0) % b_float(-32.456))
    assertEquals(b_double(23.0), p_double(23.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), p_double(23.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_float(Float.NaN_))
    assertEquals(b_double(23.0), p_double(23.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(23.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_float(0.0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_float(1.0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_float(-1.0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_float(23.0))
    assertEquals(b_double(Double.parseDouble("8.087158214209467E-7")), p_double(23.123) % b_float(23.123))
    assertEquals(b_double(23.123), p_double(23.123) % b_float(-32.0))
    assertEquals(b_double(23.123), p_double(23.123) % b_float(-32.456))
    assertEquals(b_double(23.123), p_double(23.123) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(23.123), p_double(23.123) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_float(Float.NaN_))
    assertEquals(b_double(23.123), p_double(23.123) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(23.123) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_float(0.0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_float(1.0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_float(-1.0))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_float(23.0))
    assertEquals(b_double(-8.87700080871582), p_double(-32.0) % b_float(23.123))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_float(-32.0))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_float(-32.456))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_float(Float.NaN_))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_float(0.0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_float(1.0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_float(-1.0))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_float(23.0))
    assertEquals(b_double(-9.333000808715823), p_double(-32.456) % b_float(23.123))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_float(-32.0))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_float(-32.456))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_float(Float.NaN_))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(-32.456) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(Float.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(Float.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(Float.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_float(0.0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_float(1.0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_float(-1.0))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_float(23.0))
    assertEquals(b_double(10.911537170410156), p_double(Double.MAX_VALUE) % b_float(23.123))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_float(-32.0))
    assertEquals(b_double(27.12767791748047), p_double(Double.MAX_VALUE) % b_float(-32.456))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_float(Float.NaN_))
    assertEquals(b_double(Double.parseDouble("5.030037581705614E33")), p_double(Double.MAX_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_float(0.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(1.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(-1.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(23.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(23.123))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(-32.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(-32.456))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(Float.POSITIVE_INFINITY))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(Float.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_float(Float.NaN_))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(Float.MAX_VALUE))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_float(Float.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_float(0.0)))
  }

  function testPDoublePDoubleRemainder() {
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_double(0.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(1.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(-1.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(23.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(23.123))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(-32.0))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(-32.456))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(0.0) % p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(0.0) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_double(0.0))
    assertEquals(p_double(0.0), p_double(1.0) % p_double(1.0))
    assertEquals(p_double(0.0), p_double(1.0) % p_double(-1.0))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(23.0))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(23.123))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(-32.0))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(-32.456))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(1.0) % p_double(Double.NaN_))
    assertEquals(p_double(1.0), p_double(1.0) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(1.0) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_double(0.0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_double(1.0))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_double(-1.0))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(23.0))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(23.123))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(-32.0))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(-32.456))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-1.0) % p_double(Double.NaN_))
    assertEquals(p_double(-1.0), p_double(-1.0) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(-1.0) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_double(0.0))
    assertEquals(p_double(0.0), p_double(23.0) % p_double(1.0))
    assertEquals(p_double(0.0), p_double(23.0) % p_double(-1.0))
    assertEquals(p_double(0.0), p_double(23.0) % p_double(23.0))
    assertEquals(p_double(23.0), p_double(23.0) % p_double(23.123))
    assertEquals(p_double(23.0), p_double(23.0) % p_double(-32.0))
    assertEquals(p_double(23.0), p_double(23.0) % p_double(-32.456))
    assertEquals(p_double(23.0), p_double(23.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(23.0), p_double(23.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.0) % p_double(Double.NaN_))
    assertEquals(p_double(23.0), p_double(23.0) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(23.0) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_double(0.0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_double(1.0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_double(-1.0))
    assertEquals(p_double(0.12300000000000111), p_double(23.123) % p_double(23.0))
    assertEquals(p_double(0.0), p_double(23.123) % p_double(23.123))
    assertEquals(p_double(23.123), p_double(23.123) % p_double(-32.0))
    assertEquals(p_double(23.123), p_double(23.123) % p_double(-32.456))
    assertEquals(p_double(23.123), p_double(23.123) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(23.123), p_double(23.123) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(23.123) % p_double(Double.NaN_))
    assertEquals(p_double(23.123), p_double(23.123) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(23.123) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_double(0.0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_double(1.0))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_double(-1.0))
    assertEquals(p_double(-9.0), p_double(-32.0) % p_double(23.0))
    assertEquals(p_double(-8.876999999999999), p_double(-32.0) % p_double(23.123))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_double(-32.0))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_double(-32.456))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.0) % p_double(Double.NaN_))
    assertEquals(p_double(-32.0), p_double(-32.0) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(-32.0) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_double(0.0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_double(1.0))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_double(-1.0))
    assertEquals(p_double(-9.456000000000003), p_double(-32.456) % p_double(23.0))
    assertEquals(p_double(-9.333000000000002), p_double(-32.456) % p_double(23.123))
    assertEquals(p_double(-0.45600000000000307), p_double(-32.456) % p_double(-32.0))
    assertEquals(p_double(-0.0), p_double(-32.456) % p_double(-32.456))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(-32.456) % p_double(Double.NaN_))
    assertEquals(p_double(-32.456), p_double(-32.456) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(-0.0), p_double(-32.456) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(Double.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(Double.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(0.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(-1.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(23.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(23.123))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(-32.0))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(-32.456))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(Double.NaN_))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(Double.NaN_), p_double(Double.NaN_) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_double(0.0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_double(1.0))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_double(-1.0))
    assertEquals(p_double(17.0), p_double(Double.MAX_VALUE) % p_double(23.0))
    assertEquals(p_double(5.30043915584417), p_double(Double.MAX_VALUE) % p_double(23.123))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_double(-32.0))
    assertEquals(p_double(16.974826223116864), p_double(Double.MAX_VALUE) % p_double(-32.456))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MAX_VALUE) % p_double(Double.NaN_))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MAX_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_double(0.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(1.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(-1.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(23.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(23.123))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(-32.0))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(-32.456))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(Double.POSITIVE_INFINITY))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(Double.NEGATIVE_INFINITY))
    assertEquals(p_double(Double.NaN_), p_double(Double.MIN_VALUE) % p_double(Double.NaN_))
    assertEquals(p_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % p_double(Double.MAX_VALUE))
    assertEquals(p_double(0.0), p_double(Double.MIN_VALUE) % p_double(Double.MIN_VALUE))

    assertEquals(double, statictypeof(p_double(0.0) % p_double(0.0)))
  }

  function testPDoubleDoubleRemainder() {
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_double(0.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(1.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(-1.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(23.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(23.123))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(-32.0))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(-32.456))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(0.0) % b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(0.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_double(0.0))
    assertEquals(b_double(0.0), p_double(1.0) % b_double(1.0))
    assertEquals(b_double(0.0), p_double(1.0) % b_double(-1.0))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(23.0))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(23.123))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(-32.0))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(-32.456))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(1.0) % b_double(Double.NaN_))
    assertEquals(b_double(1.0), p_double(1.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(1.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_double(0.0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_double(1.0))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_double(-1.0))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(23.0))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(23.123))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(-32.0))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(-32.456))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-1.0) % b_double(Double.NaN_))
    assertEquals(b_double(-1.0), p_double(-1.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(-1.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_double(0.0))
    assertEquals(b_double(0.0), p_double(23.0) % b_double(1.0))
    assertEquals(b_double(0.0), p_double(23.0) % b_double(-1.0))
    assertEquals(b_double(0.0), p_double(23.0) % b_double(23.0))
    assertEquals(b_double(23.0), p_double(23.0) % b_double(23.123))
    assertEquals(b_double(23.0), p_double(23.0) % b_double(-32.0))
    assertEquals(b_double(23.0), p_double(23.0) % b_double(-32.456))
    assertEquals(b_double(23.0), p_double(23.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.0), p_double(23.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.0) % b_double(Double.NaN_))
    assertEquals(b_double(23.0), p_double(23.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(23.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_double(0.0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_double(1.0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_double(-1.0))
    assertEquals(b_double(0.12300000000000111), p_double(23.123) % b_double(23.0))
    assertEquals(b_double(0.0), p_double(23.123) % b_double(23.123))
    assertEquals(b_double(23.123), p_double(23.123) % b_double(-32.0))
    assertEquals(b_double(23.123), p_double(23.123) % b_double(-32.456))
    assertEquals(b_double(23.123), p_double(23.123) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(23.123), p_double(23.123) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(23.123) % b_double(Double.NaN_))
    assertEquals(b_double(23.123), p_double(23.123) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(23.123) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_double(0.0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_double(1.0))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_double(-1.0))
    assertEquals(b_double(-9.0), p_double(-32.0) % b_double(23.0))
    assertEquals(b_double(-8.876999999999999), p_double(-32.0) % b_double(23.123))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_double(-32.0))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_double(-32.456))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.0) % b_double(Double.NaN_))
    assertEquals(b_double(-32.0), p_double(-32.0) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(-32.0) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_double(0.0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_double(1.0))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_double(-1.0))
    assertEquals(b_double(-9.456000000000003), p_double(-32.456) % b_double(23.0))
    assertEquals(b_double(-9.333000000000002), p_double(-32.456) % b_double(23.123))
    assertEquals(b_double(-0.45600000000000307), p_double(-32.456) % b_double(-32.0))
    assertEquals(b_double(-0.0), p_double(-32.456) % b_double(-32.456))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(-32.456) % b_double(Double.NaN_))
    assertEquals(b_double(-32.456), p_double(-32.456) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(-0.0), p_double(-32.456) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.POSITIVE_INFINITY) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NEGATIVE_INFINITY) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(0.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(-1.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(23.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(23.123))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(-32.0))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(-32.456))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(Double.NaN_))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(Double.NaN_), p_double(Double.NaN_) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_double(0.0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_double(1.0))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_double(-1.0))
    assertEquals(b_double(17.0), p_double(Double.MAX_VALUE) % b_double(23.0))
    assertEquals(b_double(5.30043915584417), p_double(Double.MAX_VALUE) % b_double(23.123))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_double(-32.0))
    assertEquals(b_double(16.974826223116864), p_double(Double.MAX_VALUE) % b_double(-32.456))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.MAX_VALUE), p_double(Double.MAX_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MAX_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MAX_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_double(0.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(1.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(-1.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(23.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(23.123))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(-32.0))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(-32.456))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(Double.POSITIVE_INFINITY))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(Double.NEGATIVE_INFINITY))
    assertEquals(b_double(Double.NaN_), p_double(Double.MIN_VALUE) % b_double(Double.NaN_))
    assertEquals(b_double(Double.MIN_VALUE), p_double(Double.MIN_VALUE) % b_double(Double.MAX_VALUE))
    assertEquals(b_double(0.0), p_double(Double.MIN_VALUE) % b_double(Double.MIN_VALUE))

    assertEquals(Double, statictypeof(p_double(0.0) % b_double(0.0)))
  }

  function testPDoubleBigIntegerRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> p_double(0.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_int("-1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_int("23"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_int("-32"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(1.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), p_double(1.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), p_double(1.0) % big_int("-1"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_int("23"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_int("-32"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-1.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), p_double(-1.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), p_double(-1.0) % big_int("-1"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_int("23"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_int("-32"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), p_double(23.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), p_double(23.0) % big_int("-1"))
    assertEquals(big_decimal("0.0"), p_double(23.0) % big_int("23"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_int("-32"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.123) % big_int("0"))
    assertEquals(big_decimal("0.123"), p_double(23.123) % big_int("1"))
    assertEquals(big_decimal("0.123"), p_double(23.123) % big_int("-1"))
    assertEquals(big_decimal("0.123"), p_double(23.123) % big_int("23"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_int("-32"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.0) % big_int("0"))
    assertEquals(big_decimal("0.0"), p_double(-32.0) % big_int("1"))
    assertEquals(big_decimal("0.0"), p_double(-32.0) % big_int("-1"))
    assertEquals(big_decimal("9.0"), p_double(-32.0) % big_int("23"))
    assertEquals(big_decimal("0.0"), p_double(-32.0) % big_int("-32"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.456) % big_int("0"))
    assertEquals(big_decimal("0.456"), p_double(-32.456) % big_int("1"))
    assertEquals(big_decimal("0.456"), p_double(-32.456) % big_int("-1"))
    assertEquals(big_decimal("9.456"), p_double(-32.456) % big_int("23"))
    assertEquals(big_decimal("0.456"), p_double(-32.456) % big_int("-32"))
    assertEquals(big_decimal("32.456"), p_double(-32.456) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("32.456"), p_double(-32.456) % big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("0"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("-1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("23"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("-32"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_int("-123456789012345678901234567890"))

    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("0"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("-1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("23"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("-32"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("123456789012345678901234567890"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MAX_VALUE) % big_int("0"))
    assertEquals(big_decimal("0E+292"), p_double(Double.MAX_VALUE) % big_int("1"))
    assertEquals(big_decimal("0E+292"), p_double(Double.MAX_VALUE) % big_int("-1"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_int("23"))
    assertEquals(big_decimal("0E+287"), p_double(Double.MAX_VALUE) % big_int("-32"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_int("123456789012345678901234567890"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MIN_VALUE) % big_int("0"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_int("1"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_int("-1"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_int("23"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_int("-32"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_int("123456789012345678901234567890"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_int("-123456789012345678901234567890"))

    assertEquals(BigDecimal, statictypeof(p_double(0.0) % big_int("0")))
  }

  function testPDoubleBigDecimalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> p_double(0.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("-1"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("23"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("-32"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("0.0"), p_double(0.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(1.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), p_double(1.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), p_double(1.0) % big_decimal("-1"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_decimal("23"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_decimal("23.123"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_decimal("-32"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.0"), p_double(1.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-1.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), p_double(-1.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), p_double(-1.0) % big_decimal("-1"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_decimal("23"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_decimal("23.123"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_decimal("-32"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("1.0"), p_double(-1.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), p_double(23.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), p_double(23.0) % big_decimal("-1"))
    assertEquals(big_decimal("0.0"), p_double(23.0) % big_decimal("23"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_decimal("23.123"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_decimal("-32"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23.0"), p_double(23.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(23.123) % big_decimal("0"))
    assertEquals(big_decimal("0.123"), p_double(23.123) % big_decimal("1"))
    assertEquals(big_decimal("0.123"), p_double(23.123) % big_decimal("-1"))
    assertEquals(big_decimal("0.123"), p_double(23.123) % big_decimal("23"))
    assertEquals(big_decimal("0.000"), p_double(23.123) % big_decimal("23.123"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_decimal("-32"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_decimal("-32.456"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("23.123"), p_double(23.123) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.0) % big_decimal("0"))
    assertEquals(big_decimal("0.0"), p_double(-32.0) % big_decimal("1"))
    assertEquals(big_decimal("0.0"), p_double(-32.0) % big_decimal("-1"))
    assertEquals(big_decimal("9.0"), p_double(-32.0) % big_decimal("23"))
    assertEquals(big_decimal("8.877"), p_double(-32.0) % big_decimal("23.123"))
    assertEquals(big_decimal("0.0"), p_double(-32.0) % big_decimal("-32"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) % big_decimal("-32.456"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32.0"), p_double(-32.0) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(-32.456) % big_decimal("0"))
    assertEquals(big_decimal("0.456"), p_double(-32.456) % big_decimal("1"))
    assertEquals(big_decimal("0.456"), p_double(-32.456) % big_decimal("-1"))
    assertEquals(big_decimal("9.456"), p_double(-32.456) % big_decimal("23"))
    assertEquals(big_decimal("9.333"), p_double(-32.456) % big_decimal("23.123"))
    assertEquals(big_decimal("0.456"), p_double(-32.456) % big_decimal("-32"))
    assertEquals(big_decimal("0.000"), p_double(-32.456) % big_decimal("-32.456"))
    assertEquals(big_decimal("32.456"), p_double(-32.456) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("32.456"), p_double(-32.456) % big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, p_double(Double.POSITIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("0"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-1"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("23"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("23.123"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-32"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, p_double(Double.NEGATIVE_INFINITY) - big_decimal("-123456789012345678901234567890.123456789"))

    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("0"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-1"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("23"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("23.123"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-32"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-32.456"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("123456789012345678901234567890.123456789"))
    // Skipped test assertEquals(something, p_double(Double.NaN_) - big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MAX_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("0E+292"), p_double(Double.MAX_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("0E+292"), p_double(Double.MAX_VALUE) % big_decimal("-1"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_decimal("23"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("0E+287"), p_double(Double.MAX_VALUE) % big_decimal("-32"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_decimal("-32.456"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertThrowsArithmeticException("Division impossible", \ -> p_double(Double.MAX_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> p_double(Double.MIN_VALUE) % big_decimal("0"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("1"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("-1"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("23"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("23.123"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("-32"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("-32.456"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("123456789012345678901234567890.123456789"))
    assertEquals(big_decimal("4.9E-324"), p_double(Double.MIN_VALUE) % big_decimal("-123456789012345678901234567890.123456789"))

    assertEquals(BigDecimal, statictypeof(p_double(0.0) % big_decimal("0")))
  }

}

